#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class UserGender:
  Unknown = 0
  Male = 1
  Female = 2

  _VALUES_TO_NAMES = {
    0: "Unknown",
    1: "Male",
    2: "Female",
  }

  _NAMES_TO_VALUES = {
    "Unknown": 0,
    "Male": 1,
    "Female": 2,
  }

class UserListType:
  All = 0
  Recommend = 1
  Nearby = 2
  Following = 3
  Followed = 4
  Friends = 5

  _VALUES_TO_NAMES = {
    0: "All",
    1: "Recommend",
    2: "Nearby",
    3: "Following",
    4: "Followed",
    5: "Friends",
  }

  _NAMES_TO_VALUES = {
    "All": 0,
    "Recommend": 1,
    "Nearby": 2,
    "Following": 3,
    "Followed": 4,
    "Friends": 5,
  }

class TaskState:
  Normal = 0
  Interested = 1
  Accepted = 2
  Applied = 3
  Invited = 4
  Rejected = 5

  _VALUES_TO_NAMES = {
    0: "Normal",
    1: "Interested",
    2: "Accepted",
    3: "Applied",
    4: "Invited",
    5: "Rejected",
  }

  _NAMES_TO_VALUES = {
    "Normal": 0,
    "Interested": 1,
    "Accepted": 2,
    "Applied": 3,
    "Invited": 4,
    "Rejected": 5,
  }

class TaskListType:
  All = 0
  Recommend = 1
  Nearby = 2
  Following = 3

  _VALUES_TO_NAMES = {
    0: "All",
    1: "Recommend",
    2: "Nearby",
    3: "Following",
  }

  _NAMES_TO_VALUES = {
    "All": 0,
    "Recommend": 1,
    "Nearby": 2,
    "Following": 3,
  }

class MsgType:
  All = 0
  System = 1
  Friends = 2
  Stranger = 4
  Unread = 8

  _VALUES_TO_NAMES = {
    0: "All",
    1: "System",
    2: "Friends",
    4: "Stranger",
    8: "Unread",
  }

  _NAMES_TO_VALUES = {
    "All": 0,
    "System": 1,
    "Friends": 2,
    "Stranger": 4,
    "Unread": 8,
  }

class FeedType:
  All = 0
  Text = 1
  Article = 2
  Pic = 3
  Activity = 4

  _VALUES_TO_NAMES = {
    0: "All",
    1: "Text",
    2: "Article",
    3: "Pic",
    4: "Activity",
  }

  _NAMES_TO_VALUES = {
    "All": 0,
    "Text": 1,
    "Article": 2,
    "Pic": 3,
    "Activity": 4,
  }


class AuthRequest:
  """
  Attributes:
   - client_id
   - client_secret
   - mail
   - password
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'client_id', None, None, ), # 1
    (2, TType.STRING, 'client_secret', None, None, ), # 2
    (3, TType.STRING, 'mail', None, None, ), # 3
    (4, TType.STRING, 'password', None, None, ), # 4
  )

  def __init__(self, client_id=None, client_secret=None, mail=None, password=None,):
    self.client_id = client_id
    self.client_secret = client_secret
    self.mail = mail
    self.password = password

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.client_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.client_secret = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.mail = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.password = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AuthRequest')
    if self.client_id is not None:
      oprot.writeFieldBegin('client_id', TType.I64, 1)
      oprot.writeI64(self.client_id)
      oprot.writeFieldEnd()
    if self.client_secret is not None:
      oprot.writeFieldBegin('client_secret', TType.STRING, 2)
      oprot.writeString(self.client_secret)
      oprot.writeFieldEnd()
    if self.mail is not None:
      oprot.writeFieldBegin('mail', TType.STRING, 3)
      oprot.writeString(self.mail)
      oprot.writeFieldEnd()
    if self.password is not None:
      oprot.writeFieldBegin('password', TType.STRING, 4)
      oprot.writeString(self.password)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.client_id is None:
      raise TProtocol.TProtocolException(message='Required field client_id is unset!')
    if self.client_secret is None:
      raise TProtocol.TProtocolException(message='Required field client_secret is unset!')
    if self.mail is None:
      raise TProtocol.TProtocolException(message='Required field mail is unset!')
    if self.password is None:
      raise TProtocol.TProtocolException(message='Required field password is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AuthResponse:
  """
  Attributes:
   - access_token
   - expire_in
   - user_id
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'access_token', None, None, ), # 1
    (2, TType.I64, 'expire_in', None, None, ), # 2
    (3, TType.I64, 'user_id', None, None, ), # 3
  )

  def __init__(self, access_token=None, expire_in=None, user_id=None,):
    self.access_token = access_token
    self.expire_in = expire_in
    self.user_id = user_id

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.access_token = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.expire_in = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.user_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AuthResponse')
    if self.access_token is not None:
      oprot.writeFieldBegin('access_token', TType.STRING, 1)
      oprot.writeString(self.access_token)
      oprot.writeFieldEnd()
    if self.expire_in is not None:
      oprot.writeFieldBegin('expire_in', TType.I64, 2)
      oprot.writeI64(self.expire_in)
      oprot.writeFieldEnd()
    if self.user_id is not None:
      oprot.writeFieldBegin('user_id', TType.I64, 3)
      oprot.writeI64(self.user_id)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.access_token is None:
      raise TProtocol.TProtocolException(message='Required field access_token is unset!')
    if self.expire_in is None:
      raise TProtocol.TProtocolException(message='Required field expire_in is unset!')
    if self.user_id is None:
      raise TProtocol.TProtocolException(message='Required field user_id is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserBasic:
  """
  Attributes:
   - user_id
   - name
   - gender
   - org
   - job
   - avator
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'user_id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.I32, 'gender', None, None, ), # 3
    (4, TType.STRING, 'org', None, None, ), # 4
    (5, TType.STRING, 'job', None, None, ), # 5
    (6, TType.STRING, 'avator', None, None, ), # 6
  )

  def __init__(self, user_id=None, name=None, gender=None, org=None, job=None, avator=None,):
    self.user_id = user_id
    self.name = name
    self.gender = gender
    self.org = org
    self.job = job
    self.avator = avator

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.user_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.gender = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.org = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.job = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.avator = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserBasic')
    if self.user_id is not None:
      oprot.writeFieldBegin('user_id', TType.I64, 1)
      oprot.writeI64(self.user_id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.gender is not None:
      oprot.writeFieldBegin('gender', TType.I32, 3)
      oprot.writeI32(self.gender)
      oprot.writeFieldEnd()
    if self.org is not None:
      oprot.writeFieldBegin('org', TType.STRING, 4)
      oprot.writeString(self.org)
      oprot.writeFieldEnd()
    if self.job is not None:
      oprot.writeFieldBegin('job', TType.STRING, 5)
      oprot.writeString(self.job)
      oprot.writeFieldEnd()
    if self.avator is not None:
      oprot.writeFieldBegin('avator', TType.STRING, 6)
      oprot.writeString(self.avator)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.user_id is None:
      raise TProtocol.TProtocolException(message='Required field user_id is unset!')
    if self.name is None:
      raise TProtocol.TProtocolException(message='Required field name is unset!')
    if self.gender is None:
      raise TProtocol.TProtocolException(message='Required field gender is unset!')
    if self.org is None:
      raise TProtocol.TProtocolException(message='Required field org is unset!')
    if self.job is None:
      raise TProtocol.TProtocolException(message='Required field job is unset!')
    if self.avator is None:
      raise TProtocol.TProtocolException(message='Required field avator is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserExt:
  """
  Attributes:
   - intro
   - following
   - followed
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'intro', None, None, ), # 1
    (2, TType.LIST, 'following', (TType.I64,None), None, ), # 2
    (3, TType.LIST, 'followed', (TType.I64,None), None, ), # 3
  )

  def __init__(self, intro=None, following=None, followed=None,):
    self.intro = intro
    self.following = following
    self.followed = followed

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.intro = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.following = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readI64();
            self.following.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.followed = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = iprot.readI64();
            self.followed.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserExt')
    if self.intro is not None:
      oprot.writeFieldBegin('intro', TType.STRING, 1)
      oprot.writeString(self.intro)
      oprot.writeFieldEnd()
    if self.following is not None:
      oprot.writeFieldBegin('following', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.following))
      for iter12 in self.following:
        oprot.writeI64(iter12)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.followed is not None:
      oprot.writeFieldBegin('followed', TType.LIST, 3)
      oprot.writeListBegin(TType.I64, len(self.followed))
      for iter13 in self.followed:
        oprot.writeI64(iter13)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.intro is None:
      raise TProtocol.TProtocolException(message='Required field intro is unset!')
    if self.following is None:
      raise TProtocol.TProtocolException(message='Required field following is unset!')
    if self.followed is None:
      raise TProtocol.TProtocolException(message='Required field followed is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class User:
  """
  Attributes:
   - basic
   - ext
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'basic', (UserBasic, UserBasic.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ext', (UserExt, UserExt.thrift_spec), None, ), # 2
  )

  def __init__(self, basic=None, ext=None,):
    self.basic = basic
    self.ext = ext

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.basic = UserBasic()
          self.basic.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ext = UserExt()
          self.ext.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('User')
    if self.basic is not None:
      oprot.writeFieldBegin('basic', TType.STRUCT, 1)
      self.basic.write(oprot)
      oprot.writeFieldEnd()
    if self.ext is not None:
      oprot.writeFieldBegin('ext', TType.STRUCT, 2)
      self.ext.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.ext is None:
      raise TProtocol.TProtocolException(message='Required field ext is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TaskBasic:
  """
  Attributes:
   - task_id
   - state
   - title
   - intro
   - cover
   - sponsor
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'task_id', None, None, ), # 1
    (2, TType.I32, 'state', None, None, ), # 2
    (3, TType.STRING, 'title', None, None, ), # 3
    (4, TType.STRING, 'intro', None, None, ), # 4
    (5, TType.STRING, 'cover', None, None, ), # 5
    None, # 6
    (7, TType.STRUCT, 'sponsor', (UserBasic, UserBasic.thrift_spec), None, ), # 7
  )

  def __init__(self, task_id=None, state=None, title=None, intro=None, cover=None, sponsor=None,):
    self.task_id = task_id
    self.state = state
    self.title = title
    self.intro = intro
    self.cover = cover
    self.sponsor = sponsor

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.task_id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.state = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.title = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.intro = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.cover = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRUCT:
          self.sponsor = UserBasic()
          self.sponsor.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TaskBasic')
    if self.task_id is not None:
      oprot.writeFieldBegin('task_id', TType.I64, 1)
      oprot.writeI64(self.task_id)
      oprot.writeFieldEnd()
    if self.state is not None:
      oprot.writeFieldBegin('state', TType.I32, 2)
      oprot.writeI32(self.state)
      oprot.writeFieldEnd()
    if self.title is not None:
      oprot.writeFieldBegin('title', TType.STRING, 3)
      oprot.writeString(self.title)
      oprot.writeFieldEnd()
    if self.intro is not None:
      oprot.writeFieldBegin('intro', TType.STRING, 4)
      oprot.writeString(self.intro)
      oprot.writeFieldEnd()
    if self.cover is not None:
      oprot.writeFieldBegin('cover', TType.STRING, 5)
      oprot.writeString(self.cover)
      oprot.writeFieldEnd()
    if self.sponsor is not None:
      oprot.writeFieldBegin('sponsor', TType.STRUCT, 7)
      self.sponsor.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.task_id is None:
      raise TProtocol.TProtocolException(message='Required field task_id is unset!')
    if self.state is None:
      raise TProtocol.TProtocolException(message='Required field state is unset!')
    if self.title is None:
      raise TProtocol.TProtocolException(message='Required field title is unset!')
    if self.intro is None:
      raise TProtocol.TProtocolException(message='Required field intro is unset!')
    if self.cover is None:
      raise TProtocol.TProtocolException(message='Required field cover is unset!')
    if self.sponsor is None:
      raise TProtocol.TProtocolException(message='Required field sponsor is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TaskExt:
  """
  Attributes:
   - interested_list
   - accepted_list
   - invited_list
   - applied_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'interested_list', (TType.I64,None), None, ), # 1
    (2, TType.LIST, 'accepted_list', (TType.I64,None), None, ), # 2
    (3, TType.LIST, 'invited_list', (TType.I64,None), None, ), # 3
    (4, TType.LIST, 'applied_list', (TType.I64,None), None, ), # 4
  )

  def __init__(self, interested_list=None, accepted_list=None, invited_list=None, applied_list=None,):
    self.interested_list = interested_list
    self.accepted_list = accepted_list
    self.invited_list = invited_list
    self.applied_list = applied_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.interested_list = []
          (_etype17, _size14) = iprot.readListBegin()
          for _i18 in xrange(_size14):
            _elem19 = iprot.readI64();
            self.interested_list.append(_elem19)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.accepted_list = []
          (_etype23, _size20) = iprot.readListBegin()
          for _i24 in xrange(_size20):
            _elem25 = iprot.readI64();
            self.accepted_list.append(_elem25)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.invited_list = []
          (_etype29, _size26) = iprot.readListBegin()
          for _i30 in xrange(_size26):
            _elem31 = iprot.readI64();
            self.invited_list.append(_elem31)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.applied_list = []
          (_etype35, _size32) = iprot.readListBegin()
          for _i36 in xrange(_size32):
            _elem37 = iprot.readI64();
            self.applied_list.append(_elem37)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TaskExt')
    if self.interested_list is not None:
      oprot.writeFieldBegin('interested_list', TType.LIST, 1)
      oprot.writeListBegin(TType.I64, len(self.interested_list))
      for iter38 in self.interested_list:
        oprot.writeI64(iter38)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.accepted_list is not None:
      oprot.writeFieldBegin('accepted_list', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.accepted_list))
      for iter39 in self.accepted_list:
        oprot.writeI64(iter39)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.invited_list is not None:
      oprot.writeFieldBegin('invited_list', TType.LIST, 3)
      oprot.writeListBegin(TType.I64, len(self.invited_list))
      for iter40 in self.invited_list:
        oprot.writeI64(iter40)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.applied_list is not None:
      oprot.writeFieldBegin('applied_list', TType.LIST, 4)
      oprot.writeListBegin(TType.I64, len(self.applied_list))
      for iter41 in self.applied_list:
        oprot.writeI64(iter41)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.interested_list is None:
      raise TProtocol.TProtocolException(message='Required field interested_list is unset!')
    if self.accepted_list is None:
      raise TProtocol.TProtocolException(message='Required field accepted_list is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Task:
  """
  Attributes:
   - basic
   - ext
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'basic', (TaskBasic, TaskBasic.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ext', (TaskExt, TaskExt.thrift_spec), None, ), # 2
  )

  def __init__(self, basic=None, ext=None,):
    self.basic = basic
    self.ext = ext

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.basic = TaskBasic()
          self.basic.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ext = TaskExt()
          self.ext.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Task')
    if self.basic is not None:
      oprot.writeFieldBegin('basic', TType.STRUCT, 1)
      self.basic.write(oprot)
      oprot.writeFieldEnd()
    if self.ext is not None:
      oprot.writeFieldBegin('ext', TType.STRUCT, 2)
      self.ext.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.ext is None:
      raise TProtocol.TProtocolException(message='Required field ext is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TaskListRequest:
  """
  Attributes:
   - type
   - lastid
   - length
  """

  thrift_spec = (
    None, # 0
    (1, TType.I32, 'type', None, None, ), # 1
    (2, TType.I64, 'lastid', None, None, ), # 2
    (3, TType.I64, 'length', None, None, ), # 3
  )

  def __init__(self, type=None, lastid=None, length=None,):
    self.type = type
    self.lastid = lastid
    self.length = length

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.lastid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.length = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TaskListRequest')
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 1)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.lastid is not None:
      oprot.writeFieldBegin('lastid', TType.I64, 2)
      oprot.writeI64(self.lastid)
      oprot.writeFieldEnd()
    if self.length is not None:
      oprot.writeFieldBegin('length', TType.I64, 3)
      oprot.writeI64(self.length)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.type is None:
      raise TProtocol.TProtocolException(message='Required field type is unset!')
    if self.lastid is None:
      raise TProtocol.TProtocolException(message='Required field lastid is unset!')
    if self.length is None:
      raise TProtocol.TProtocolException(message='Required field length is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Msg:
  """
  Attributes:
   - sender
   - time
   - text
   - type
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'sender', None, None, ), # 1
    (2, TType.I64, 'time', None, None, ), # 2
    (3, TType.STRING, 'text', None, None, ), # 3
    (4, TType.I32, 'type', None, None, ), # 4
  )

  def __init__(self, sender=None, time=None, text=None, type=None,):
    self.sender = sender
    self.time = time
    self.text = text
    self.type = type

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.sender = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.time = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.text = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Msg')
    if self.sender is not None:
      oprot.writeFieldBegin('sender', TType.I64, 1)
      oprot.writeI64(self.sender)
      oprot.writeFieldEnd()
    if self.time is not None:
      oprot.writeFieldBegin('time', TType.I64, 2)
      oprot.writeI64(self.time)
      oprot.writeFieldEnd()
    if self.text is not None:
      oprot.writeFieldBegin('text', TType.STRING, 3)
      oprot.writeString(self.text)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 4)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.sender is None:
      raise TProtocol.TProtocolException(message='Required field sender is unset!')
    if self.time is None:
      raise TProtocol.TProtocolException(message='Required field time is unset!')
    if self.text is None:
      raise TProtocol.TProtocolException(message='Required field text is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FeedMsg:
  """
  Attributes:
   - sender
   - time
   - type
   - content
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'sender', None, None, ), # 1
    (2, TType.I64, 'time', None, None, ), # 2
    (3, TType.I32, 'type', None, None, ), # 3
    (4, TType.STRING, 'content', None, None, ), # 4
  )

  def __init__(self, sender=None, time=None, type=None, content=None,):
    self.sender = sender
    self.time = time
    self.type = type
    self.content = content

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.sender = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.time = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.content = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FeedMsg')
    if self.sender is not None:
      oprot.writeFieldBegin('sender', TType.STRING, 1)
      oprot.writeString(self.sender)
      oprot.writeFieldEnd()
    if self.time is not None:
      oprot.writeFieldBegin('time', TType.I64, 2)
      oprot.writeI64(self.time)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 3)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.content is not None:
      oprot.writeFieldBegin('content', TType.STRING, 4)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.sender is None:
      raise TProtocol.TProtocolException(message='Required field sender is unset!')
    if self.time is None:
      raise TProtocol.TProtocolException(message='Required field time is unset!')
    if self.type is None:
      raise TProtocol.TProtocolException(message='Required field type is unset!')
    if self.content is None:
      raise TProtocol.TProtocolException(message='Required field content is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Summary:
  """
  Attributes:
   - unread_msg_num
   - following_num
   - followed_num
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'unread_msg_num', None, None, ), # 1
    (2, TType.I64, 'following_num', None, None, ), # 2
    (3, TType.I64, 'followed_num', None, None, ), # 3
  )

  def __init__(self, unread_msg_num=None, following_num=None, followed_num=None,):
    self.unread_msg_num = unread_msg_num
    self.following_num = following_num
    self.followed_num = followed_num

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.unread_msg_num = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.following_num = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.followed_num = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Summary')
    if self.unread_msg_num is not None:
      oprot.writeFieldBegin('unread_msg_num', TType.I64, 1)
      oprot.writeI64(self.unread_msg_num)
      oprot.writeFieldEnd()
    if self.following_num is not None:
      oprot.writeFieldBegin('following_num', TType.I64, 2)
      oprot.writeI64(self.following_num)
      oprot.writeFieldEnd()
    if self.followed_num is not None:
      oprot.writeFieldBegin('followed_num', TType.I64, 3)
      oprot.writeI64(self.followed_num)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.unread_msg_num is None:
      raise TProtocol.TProtocolException(message='Required field unread_msg_num is unset!')
    if self.following_num is None:
      raise TProtocol.TProtocolException(message='Required field following_num is unset!')
    if self.followed_num is None:
      raise TProtocol.TProtocolException(message='Required field followed_num is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
