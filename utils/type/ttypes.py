#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class AuthLoginPartner:
  AUTH_PARTNER_DOUBAN = 1
  AUTH_PARTNER_SINA = 2
  AUTH_PARTNER_TENCENT = 3
  AUTH_PARTNER_RENREN = 4
  AUTH_PARTNER_KAIXIN = 5
  AUTH_PARTNER_163 = 6
  AUTH_PARTNER_FANFOU = 7

  _VALUES_TO_NAMES = {
    1: "AUTH_PARTNER_DOUBAN",
    2: "AUTH_PARTNER_SINA",
    3: "AUTH_PARTNER_TENCENT",
    4: "AUTH_PARTNER_RENREN",
    5: "AUTH_PARTNER_KAIXIN",
    6: "AUTH_PARTNER_163",
    7: "AUTH_PARTNER_FANFOU",
  }

  _NAMES_TO_VALUES = {
    "AUTH_PARTNER_DOUBAN": 1,
    "AUTH_PARTNER_SINA": 2,
    "AUTH_PARTNER_TENCENT": 3,
    "AUTH_PARTNER_RENREN": 4,
    "AUTH_PARTNER_KAIXIN": 5,
    "AUTH_PARTNER_163": 6,
    "AUTH_PARTNER_FANFOU": 7,
  }

class AuthResponseStatus:
  AUTH_SUCCESS = 0
  AUTH_FAIL_REASON_UNKNOWN = 1
  AUTH_FAIL_SERVER_ERROR = 2
  AUTH_FAIL_CLIENT_KEY_NOT_AUTHORIZED = 3
  AUTH_FAIL_CLIENT_SECRET_WRONG = 4
  AUTH_FAIL_ID_NOT_EXIST = 5
  AUTH_FAIL_ID_INVALID = 6
  AUTH_FAIL_PASSWORD_WRONG = 7

  _VALUES_TO_NAMES = {
    0: "AUTH_SUCCESS",
    1: "AUTH_FAIL_REASON_UNKNOWN",
    2: "AUTH_FAIL_SERVER_ERROR",
    3: "AUTH_FAIL_CLIENT_KEY_NOT_AUTHORIZED",
    4: "AUTH_FAIL_CLIENT_SECRET_WRONG",
    5: "AUTH_FAIL_ID_NOT_EXIST",
    6: "AUTH_FAIL_ID_INVALID",
    7: "AUTH_FAIL_PASSWORD_WRONG",
  }

  _NAMES_TO_VALUES = {
    "AUTH_SUCCESS": 0,
    "AUTH_FAIL_REASON_UNKNOWN": 1,
    "AUTH_FAIL_SERVER_ERROR": 2,
    "AUTH_FAIL_CLIENT_KEY_NOT_AUTHORIZED": 3,
    "AUTH_FAIL_CLIENT_SECRET_WRONG": 4,
    "AUTH_FAIL_ID_NOT_EXIST": 5,
    "AUTH_FAIL_ID_INVALID": 6,
    "AUTH_FAIL_PASSWORD_WRONG": 7,
  }

class UserLinkType:
  USER_LINK_TYPE_UNKNOWN = 0
  USER_LINK_TYPE_42QU = 1
  USER_LINK_TYPE_DOUBAN = 2
  USER_LINK_TYPE_WEIBO = 3

  _VALUES_TO_NAMES = {
    0: "USER_LINK_TYPE_UNKNOWN",
    1: "USER_LINK_TYPE_42QU",
    2: "USER_LINK_TYPE_DOUBAN",
    3: "USER_LINK_TYPE_WEIBO",
  }

  _NAMES_TO_VALUES = {
    "USER_LINK_TYPE_UNKNOWN": 0,
    "USER_LINK_TYPE_42QU": 1,
    "USER_LINK_TYPE_DOUBAN": 2,
    "USER_LINK_TYPE_WEIBO": 3,
  }

class UserPhoneType:
  USER_PHONE_TYPE_UNKNOWN = 0
  USER_PHONE_TYPE_PUBLIC = 1
  USER_PHONE_TYPE_CUSTOM = 2
  USER_PHONE_TYPE_MOBILE = 3
  USER_PHONE_TYPE_HOME = 4
  USER_PHONE_TYPE_BUSINESS = 5
  USER_PHONE_TYPE_FAX = 6

  _VALUES_TO_NAMES = {
    0: "USER_PHONE_TYPE_UNKNOWN",
    1: "USER_PHONE_TYPE_PUBLIC",
    2: "USER_PHONE_TYPE_CUSTOM",
    3: "USER_PHONE_TYPE_MOBILE",
    4: "USER_PHONE_TYPE_HOME",
    5: "USER_PHONE_TYPE_BUSINESS",
    6: "USER_PHONE_TYPE_FAX",
  }

  _NAMES_TO_VALUES = {
    "USER_PHONE_TYPE_UNKNOWN": 0,
    "USER_PHONE_TYPE_PUBLIC": 1,
    "USER_PHONE_TYPE_CUSTOM": 2,
    "USER_PHONE_TYPE_MOBILE": 3,
    "USER_PHONE_TYPE_HOME": 4,
    "USER_PHONE_TYPE_BUSINESS": 5,
    "USER_PHONE_TYPE_FAX": 6,
  }

class UserMailType:
  USER_MAIL_TYPE_UNKNOWN = 0
  USER_MAIL_TYPE_PUBLIC = 1
  USER_MAIL_TYPE_CUSTOM = 2
  USER_MAIL_TYPE_HOME = 3
  USER_MAIL_TYPE_BUSINESS = 4

  _VALUES_TO_NAMES = {
    0: "USER_MAIL_TYPE_UNKNOWN",
    1: "USER_MAIL_TYPE_PUBLIC",
    2: "USER_MAIL_TYPE_CUSTOM",
    3: "USER_MAIL_TYPE_HOME",
    4: "USER_MAIL_TYPE_BUSINESS",
  }

  _NAMES_TO_VALUES = {
    "USER_MAIL_TYPE_UNKNOWN": 0,
    "USER_MAIL_TYPE_PUBLIC": 1,
    "USER_MAIL_TYPE_CUSTOM": 2,
    "USER_MAIL_TYPE_HOME": 3,
    "USER_MAIL_TYPE_BUSINESS": 4,
  }

class TaskCid:
  TASK_CID_EVENT = 1

  _VALUES_TO_NAMES = {
    1: "TASK_CID_EVENT",
  }

  _NAMES_TO_VALUES = {
    "TASK_CID_EVENT": 1,
  }


class AuthRequestMail:
  """
  Attributes:
   - client_id
   - client_secret
   - mail
   - password
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'client_id', None, None, ), # 1
    (2, TType.STRING, 'client_secret', None, None, ), # 2
    (3, TType.STRING, 'mail', None, None, ), # 3
    (4, TType.STRING, 'password', None, None, ), # 4
  )

  def __init__(self, client_id=None, client_secret=None, mail=None, password=None,):
    self.client_id = client_id
    self.client_secret = client_secret
    self.mail = mail
    self.password = password

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.client_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.client_secret = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.mail = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.password = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AuthRequestMail')
    if self.client_id is not None:
      oprot.writeFieldBegin('client_id', TType.STRING, 1)
      oprot.writeString(self.client_id)
      oprot.writeFieldEnd()
    if self.client_secret is not None:
      oprot.writeFieldBegin('client_secret', TType.STRING, 2)
      oprot.writeString(self.client_secret)
      oprot.writeFieldEnd()
    if self.mail is not None:
      oprot.writeFieldBegin('mail', TType.STRING, 3)
      oprot.writeString(self.mail)
      oprot.writeFieldEnd()
    if self.password is not None:
      oprot.writeFieldBegin('password', TType.STRING, 4)
      oprot.writeString(self.password)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.client_id is None:
      raise TProtocol.TProtocolException(message='Required field client_id is unset!')
    if self.client_secret is None:
      raise TProtocol.TProtocolException(message='Required field client_secret is unset!')
    if self.mail is None:
      raise TProtocol.TProtocolException(message='Required field mail is unset!')
    if self.password is None:
      raise TProtocol.TProtocolException(message='Required field password is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AuthRequestPartner:
  """
  Attributes:
   - client_id
   - client_secret
   - partner
   - access_token
   - mail
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'client_id', None, None, ), # 1
    (2, TType.STRING, 'client_secret', None, None, ), # 2
    (3, TType.I32, 'partner', None, None, ), # 3
    (4, TType.STRING, 'access_token', None, None, ), # 4
    (5, TType.STRING, 'mail', None, None, ), # 5
  )

  def __init__(self, client_id=None, client_secret=None, partner=None, access_token=None, mail=None,):
    self.client_id = client_id
    self.client_secret = client_secret
    self.partner = partner
    self.access_token = access_token
    self.mail = mail

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.client_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.client_secret = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I32:
          self.partner = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.access_token = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.mail = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AuthRequestPartner')
    if self.client_id is not None:
      oprot.writeFieldBegin('client_id', TType.STRING, 1)
      oprot.writeString(self.client_id)
      oprot.writeFieldEnd()
    if self.client_secret is not None:
      oprot.writeFieldBegin('client_secret', TType.STRING, 2)
      oprot.writeString(self.client_secret)
      oprot.writeFieldEnd()
    if self.partner is not None:
      oprot.writeFieldBegin('partner', TType.I32, 3)
      oprot.writeI32(self.partner)
      oprot.writeFieldEnd()
    if self.access_token is not None:
      oprot.writeFieldBegin('access_token', TType.STRING, 4)
      oprot.writeString(self.access_token)
      oprot.writeFieldEnd()
    if self.mail is not None:
      oprot.writeFieldBegin('mail', TType.STRING, 5)
      oprot.writeString(self.mail)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.client_id is None:
      raise TProtocol.TProtocolException(message='Required field client_id is unset!')
    if self.client_secret is None:
      raise TProtocol.TProtocolException(message='Required field client_secret is unset!')
    if self.partner is None:
      raise TProtocol.TProtocolException(message='Required field partner is unset!')
    if self.access_token is None:
      raise TProtocol.TProtocolException(message='Required field access_token is unset!')
    if self.mail is None:
      raise TProtocol.TProtocolException(message='Required field mail is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AuthResponse:
  """
  Attributes:
   - id
   - name
   - access_token
   - refresh_token
   - expire_time
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'access_token', None, None, ), # 3
    (4, TType.STRING, 'refresh_token', None, None, ), # 4
    (5, TType.I64, 'expire_time', None, None, ), # 5
  )

  def __init__(self, id=None, name=None, access_token=None, refresh_token=None, expire_time=None,):
    self.id = id
    self.name = name
    self.access_token = access_token
    self.refresh_token = refresh_token
    self.expire_time = expire_time

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.access_token = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.refresh_token = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.expire_time = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AuthResponse')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.access_token is not None:
      oprot.writeFieldBegin('access_token', TType.STRING, 3)
      oprot.writeString(self.access_token)
      oprot.writeFieldEnd()
    if self.refresh_token is not None:
      oprot.writeFieldBegin('refresh_token', TType.STRING, 4)
      oprot.writeString(self.refresh_token)
      oprot.writeFieldEnd()
    if self.expire_time is not None:
      oprot.writeFieldBegin('expire_time', TType.I64, 5)
      oprot.writeI64(self.expire_time)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.id is None:
      raise TProtocol.TProtocolException(message='Required field id is unset!')
    if self.access_token is None:
      raise TProtocol.TProtocolException(message='Required field access_token is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserLink:
  """
  Attributes:
   - id
   - type
   - value
   - label
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.I32, 'type', None, None, ), # 2
    (3, TType.STRING, 'value', None, None, ), # 3
    (4, TType.STRING, 'label', None, None, ), # 4
  )

  def __init__(self, id=None, type=None, value=None, label=None,):
    self.id = id
    self.type = type
    self.value = value
    self.label = label

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.value = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.label = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserLink')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 2)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.STRING, 3)
      oprot.writeString(self.value)
      oprot.writeFieldEnd()
    if self.label is not None:
      oprot.writeFieldBegin('label', TType.STRING, 4)
      oprot.writeString(self.label)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.id is None:
      raise TProtocol.TProtocolException(message='Required field id is unset!')
    if self.type is None:
      raise TProtocol.TProtocolException(message='Required field type is unset!')
    if self.value is None:
      raise TProtocol.TProtocolException(message='Required field value is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserPhone:
  """
  Attributes:
   - id
   - type
   - value
   - label
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.I32, 'type', None, None, ), # 2
    (3, TType.STRING, 'value', None, None, ), # 3
    (4, TType.STRING, 'label', None, None, ), # 4
  )

  def __init__(self, id=None, type=None, value=None, label=None,):
    self.id = id
    self.type = type
    self.value = value
    self.label = label

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.value = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.label = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserPhone')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 2)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.STRING, 3)
      oprot.writeString(self.value)
      oprot.writeFieldEnd()
    if self.label is not None:
      oprot.writeFieldBegin('label', TType.STRING, 4)
      oprot.writeString(self.label)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.id is None:
      raise TProtocol.TProtocolException(message='Required field id is unset!')
    if self.type is None:
      raise TProtocol.TProtocolException(message='Required field type is unset!')
    if self.value is None:
      raise TProtocol.TProtocolException(message='Required field value is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserMail:
  """
  Attributes:
   - id
   - type
   - value
   - label
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.I32, 'type', None, None, ), # 2
    (3, TType.STRING, 'value', None, None, ), # 3
    (4, TType.STRING, 'label', None, None, ), # 4
  )

  def __init__(self, id=None, type=None, value=None, label=None,):
    self.id = id
    self.type = type
    self.value = value
    self.label = label

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.type = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.value = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.label = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserMail')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.type is not None:
      oprot.writeFieldBegin('type', TType.I32, 2)
      oprot.writeI32(self.type)
      oprot.writeFieldEnd()
    if self.value is not None:
      oprot.writeFieldBegin('value', TType.STRING, 3)
      oprot.writeString(self.value)
      oprot.writeFieldEnd()
    if self.label is not None:
      oprot.writeFieldBegin('label', TType.STRING, 4)
      oprot.writeString(self.label)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.id is None:
      raise TProtocol.TProtocolException(message='Required field id is unset!')
    if self.type is None:
      raise TProtocol.TProtocolException(message='Required field type is unset!')
    if self.value is None:
      raise TProtocol.TProtocolException(message='Required field value is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserInfo:
  """
  Attributes:
   - id
   - name
   - intro
   - picture
   - userLinkList
   - userPhoneList
   - userMailList
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'intro', None, None, ), # 3
    (4, TType.STRING, 'picture', None, None, ), # 4
    (5, TType.LIST, 'userLinkList', (TType.STRUCT,(UserLink, UserLink.thrift_spec)), None, ), # 5
    (6, TType.LIST, 'userPhoneList', (TType.STRUCT,(UserPhone, UserPhone.thrift_spec)), None, ), # 6
    (7, TType.LIST, 'userMailList', (TType.STRUCT,(UserMail, UserMail.thrift_spec)), None, ), # 7
  )

  def __init__(self, id=None, name=None, intro=None, picture=None, userLinkList=None, userPhoneList=None, userMailList=None,):
    self.id = id
    self.name = name
    self.intro = intro
    self.picture = picture
    self.userLinkList = userLinkList
    self.userPhoneList = userPhoneList
    self.userMailList = userMailList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.intro = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.picture = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.LIST:
          self.userLinkList = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = UserLink()
            _elem5.read(iprot)
            self.userLinkList.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.LIST:
          self.userPhoneList = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = UserPhone()
            _elem11.read(iprot)
            self.userPhoneList.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.userMailList = []
          (_etype15, _size12) = iprot.readListBegin()
          for _i16 in xrange(_size12):
            _elem17 = UserMail()
            _elem17.read(iprot)
            self.userMailList.append(_elem17)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserInfo')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.intro is not None:
      oprot.writeFieldBegin('intro', TType.STRING, 3)
      oprot.writeString(self.intro)
      oprot.writeFieldEnd()
    if self.picture is not None:
      oprot.writeFieldBegin('picture', TType.STRING, 4)
      oprot.writeString(self.picture)
      oprot.writeFieldEnd()
    if self.userLinkList is not None:
      oprot.writeFieldBegin('userLinkList', TType.LIST, 5)
      oprot.writeListBegin(TType.STRUCT, len(self.userLinkList))
      for iter18 in self.userLinkList:
        iter18.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.userPhoneList is not None:
      oprot.writeFieldBegin('userPhoneList', TType.LIST, 6)
      oprot.writeListBegin(TType.STRUCT, len(self.userPhoneList))
      for iter19 in self.userPhoneList:
        iter19.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.userMailList is not None:
      oprot.writeFieldBegin('userMailList', TType.LIST, 7)
      oprot.writeListBegin(TType.STRUCT, len(self.userMailList))
      for iter20 in self.userMailList:
        iter20.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.id is None:
      raise TProtocol.TProtocolException(message='Required field id is unset!')
    if self.name is None:
      raise TProtocol.TProtocolException(message='Required field name is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StatusPost:
  """
  Attributes:
   - content
   - tagList
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'content', None, None, ), # 1
    (2, TType.LIST, 'tagList', (TType.STRING,None), None, ), # 2
  )

  def __init__(self, content=None, tagList=None,):
    self.content = content
    self.tagList = tagList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.content = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.tagList = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = iprot.readString();
            self.tagList.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StatusPost')
    if self.content is not None:
      oprot.writeFieldBegin('content', TType.STRING, 1)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    if self.tagList is not None:
      oprot.writeFieldBegin('tagList', TType.LIST, 2)
      oprot.writeListBegin(TType.STRING, len(self.tagList))
      for iter27 in self.tagList:
        oprot.writeString(iter27)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.content is None:
      raise TProtocol.TProtocolException(message='Required field content is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StatusComment:
  """
  Attributes:
   - id
   - authorID
   - authorName
   - date
   - content
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.I64, 'authorID', None, None, ), # 2
    (3, TType.STRING, 'authorName', None, None, ), # 3
    (4, TType.I64, 'date', None, None, ), # 4
    (5, TType.STRING, 'content', None, None, ), # 5
  )

  def __init__(self, id=None, authorID=None, authorName=None, date=None, content=None,):
    self.id = id
    self.authorID = authorID
    self.authorName = authorName
    self.date = date
    self.content = content

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.authorID = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.authorName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.date = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.content = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StatusComment')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.authorID is not None:
      oprot.writeFieldBegin('authorID', TType.I64, 2)
      oprot.writeI64(self.authorID)
      oprot.writeFieldEnd()
    if self.authorName is not None:
      oprot.writeFieldBegin('authorName', TType.STRING, 3)
      oprot.writeString(self.authorName)
      oprot.writeFieldEnd()
    if self.date is not None:
      oprot.writeFieldBegin('date', TType.I64, 4)
      oprot.writeI64(self.date)
      oprot.writeFieldEnd()
    if self.content is not None:
      oprot.writeFieldBegin('content', TType.STRING, 5)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.id is None:
      raise TProtocol.TProtocolException(message='Required field id is unset!')
    if self.authorID is None:
      raise TProtocol.TProtocolException(message='Required field authorID is unset!')
    if self.authorName is None:
      raise TProtocol.TProtocolException(message='Required field authorName is unset!')
    if self.date is None:
      raise TProtocol.TProtocolException(message='Required field date is unset!')
    if self.content is None:
      raise TProtocol.TProtocolException(message='Required field content is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Status:
  """
  Attributes:
   - id
   - authorID
   - authorName
   - date
   - content
   - commentCount
   - commentList
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.I64, 'authorID', None, None, ), # 2
    (3, TType.STRING, 'authorName', None, None, ), # 3
    (4, TType.I64, 'date', None, None, ), # 4
    (5, TType.STRING, 'content', None, None, ), # 5
    (6, TType.I64, 'commentCount', None, None, ), # 6
    (7, TType.LIST, 'commentList', (TType.STRUCT,(StatusComment, StatusComment.thrift_spec)), None, ), # 7
  )

  def __init__(self, id=None, authorID=None, authorName=None, date=None, content=None, commentCount=None, commentList=None,):
    self.id = id
    self.authorID = authorID
    self.authorName = authorName
    self.date = date
    self.content = content
    self.commentCount = commentCount
    self.commentList = commentList

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I64:
          self.authorID = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.authorName = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.date = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.content = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.commentCount = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.commentList = []
          (_etype31, _size28) = iprot.readListBegin()
          for _i32 in xrange(_size28):
            _elem33 = StatusComment()
            _elem33.read(iprot)
            self.commentList.append(_elem33)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Status')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.authorID is not None:
      oprot.writeFieldBegin('authorID', TType.I64, 2)
      oprot.writeI64(self.authorID)
      oprot.writeFieldEnd()
    if self.authorName is not None:
      oprot.writeFieldBegin('authorName', TType.STRING, 3)
      oprot.writeString(self.authorName)
      oprot.writeFieldEnd()
    if self.date is not None:
      oprot.writeFieldBegin('date', TType.I64, 4)
      oprot.writeI64(self.date)
      oprot.writeFieldEnd()
    if self.content is not None:
      oprot.writeFieldBegin('content', TType.STRING, 5)
      oprot.writeString(self.content)
      oprot.writeFieldEnd()
    if self.commentCount is not None:
      oprot.writeFieldBegin('commentCount', TType.I64, 6)
      oprot.writeI64(self.commentCount)
      oprot.writeFieldEnd()
    if self.commentList is not None:
      oprot.writeFieldBegin('commentList', TType.LIST, 7)
      oprot.writeListBegin(TType.STRUCT, len(self.commentList))
      for iter34 in self.commentList:
        iter34.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.id is None:
      raise TProtocol.TProtocolException(message='Required field id is unset!')
    if self.authorID is None:
      raise TProtocol.TProtocolException(message='Required field authorID is unset!')
    if self.authorName is None:
      raise TProtocol.TProtocolException(message='Required field authorName is unset!')
    if self.date is None:
      raise TProtocol.TProtocolException(message='Required field date is unset!')
    if self.content is None:
      raise TProtocol.TProtocolException(message='Required field content is unset!')
    if self.commentCount is None:
      raise TProtocol.TProtocolException(message='Required field commentCount is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Task:
  """
  Attributes:
   - id
   - name
   - intro
   - cid
   - begin_time
   - end_time
   - owner
   - user_apply_list
   - user_accept_list
   - user_reject_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'id', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'intro', None, None, ), # 3
    (4, TType.I32, 'cid', None, None, ), # 4
    (5, TType.I64, 'begin_time', None, None, ), # 5
    (6, TType.I64, 'end_time', None, None, ), # 6
    (7, TType.STRUCT, 'owner', (UserInfo, UserInfo.thrift_spec), None, ), # 7
    (8, TType.LIST, 'user_apply_list', (TType.STRUCT,(UserInfo, UserInfo.thrift_spec)), None, ), # 8
    None, # 9
    None, # 10
    (11, TType.LIST, 'user_accept_list', (TType.STRUCT,(UserInfo, UserInfo.thrift_spec)), None, ), # 11
    (12, TType.LIST, 'user_reject_list', (TType.STRUCT,(UserInfo, UserInfo.thrift_spec)), None, ), # 12
  )

  def __init__(self, id=None, name=None, intro=None, cid=None, begin_time=None, end_time=None, owner=None, user_apply_list=None, user_accept_list=None, user_reject_list=None,):
    self.id = id
    self.name = name
    self.intro = intro
    self.cid = cid
    self.begin_time = begin_time
    self.end_time = end_time
    self.owner = owner
    self.user_apply_list = user_apply_list
    self.user_accept_list = user_accept_list
    self.user_reject_list = user_reject_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.id = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.intro = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I32:
          self.cid = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.begin_time = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.end_time = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRUCT:
          self.owner = UserInfo()
          self.owner.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.user_apply_list = []
          (_etype38, _size35) = iprot.readListBegin()
          for _i39 in xrange(_size35):
            _elem40 = UserInfo()
            _elem40.read(iprot)
            self.user_apply_list.append(_elem40)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 11:
        if ftype == TType.LIST:
          self.user_accept_list = []
          (_etype44, _size41) = iprot.readListBegin()
          for _i45 in xrange(_size41):
            _elem46 = UserInfo()
            _elem46.read(iprot)
            self.user_accept_list.append(_elem46)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 12:
        if ftype == TType.LIST:
          self.user_reject_list = []
          (_etype50, _size47) = iprot.readListBegin()
          for _i51 in xrange(_size47):
            _elem52 = UserInfo()
            _elem52.read(iprot)
            self.user_reject_list.append(_elem52)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Task')
    if self.id is not None:
      oprot.writeFieldBegin('id', TType.I64, 1)
      oprot.writeI64(self.id)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.intro is not None:
      oprot.writeFieldBegin('intro', TType.STRING, 3)
      oprot.writeString(self.intro)
      oprot.writeFieldEnd()
    if self.cid is not None:
      oprot.writeFieldBegin('cid', TType.I32, 4)
      oprot.writeI32(self.cid)
      oprot.writeFieldEnd()
    if self.begin_time is not None:
      oprot.writeFieldBegin('begin_time', TType.I64, 5)
      oprot.writeI64(self.begin_time)
      oprot.writeFieldEnd()
    if self.end_time is not None:
      oprot.writeFieldBegin('end_time', TType.I64, 6)
      oprot.writeI64(self.end_time)
      oprot.writeFieldEnd()
    if self.owner is not None:
      oprot.writeFieldBegin('owner', TType.STRUCT, 7)
      self.owner.write(oprot)
      oprot.writeFieldEnd()
    if self.user_apply_list is not None:
      oprot.writeFieldBegin('user_apply_list', TType.LIST, 8)
      oprot.writeListBegin(TType.STRUCT, len(self.user_apply_list))
      for iter53 in self.user_apply_list:
        iter53.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.user_accept_list is not None:
      oprot.writeFieldBegin('user_accept_list', TType.LIST, 11)
      oprot.writeListBegin(TType.STRUCT, len(self.user_accept_list))
      for iter54 in self.user_accept_list:
        iter54.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.user_reject_list is not None:
      oprot.writeFieldBegin('user_reject_list', TType.LIST, 12)
      oprot.writeListBegin(TType.STRUCT, len(self.user_reject_list))
      for iter55 in self.user_reject_list:
        iter55.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.name is None:
      raise TProtocol.TProtocolException(message='Required field name is unset!')
    if self.intro is None:
      raise TProtocol.TProtocolException(message='Required field intro is unset!')
    if self.cid is None:
      raise TProtocol.TProtocolException(message='Required field cid is unset!')
    if self.begin_time is None:
      raise TProtocol.TProtocolException(message='Required field begin_time is unset!')
    if self.end_time is None:
      raise TProtocol.TProtocolException(message='Required field end_time is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
