#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class TaskStat:
  NONE = 0
  ACCEPT = 1
  REJECT = 2

  _VALUES_TO_NAMES = {
    0: "NONE",
    1: "ACCEPT",
    2: "REJECT",
  }

  _NAMES_TO_VALUES = {
    "NONE": 0,
    "ACCEPT": 1,
    "REJECT": 2,
  }

class TasklistType:
  ALL = 0
  RECOMMEND = 1
  NEARBY = 2
  FOLLOW = 3
  FAVOURITES = 4

  _VALUES_TO_NAMES = {
    0: "ALL",
    1: "RECOMMEND",
    2: "NEARBY",
    3: "FOLLOW",
    4: "FAVOURITES",
  }

  _NAMES_TO_VALUES = {
    "ALL": 0,
    "RECOMMEND": 1,
    "NEARBY": 2,
    "FOLLOW": 3,
    "FAVOURITES": 4,
  }

class UserGender:
  Unknown = 0
  Male = 1
  Female = 2

  _VALUES_TO_NAMES = {
    0: "Unknown",
    1: "Male",
    2: "Female",
  }

  _NAMES_TO_VALUES = {
    "Unknown": 0,
    "Male": 1,
    "Female": 2,
  }


class AuthRequest:
  """
  Attributes:
   - client_id
   - client_serect
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'client_id', None, None, ), # 1
    (2, TType.STRING, 'client_serect', None, None, ), # 2
  )

  def __init__(self, client_id=None, client_serect=None,):
    self.client_id = client_id
    self.client_serect = client_serect

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.client_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.client_serect = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AuthRequest')
    if self.client_id is not None:
      oprot.writeFieldBegin('client_id', TType.STRING, 1)
      oprot.writeString(self.client_id)
      oprot.writeFieldEnd()
    if self.client_serect is not None:
      oprot.writeFieldBegin('client_serect', TType.STRING, 2)
      oprot.writeString(self.client_serect)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.client_id is None:
      raise TProtocol.TProtocolException(message='Required field client_id is unset!')
    if self.client_serect is None:
      raise TProtocol.TProtocolException(message='Required field client_serect is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AuthResponse:
  """
  Attributes:
   - uid
   - name
   - access_token
   - refresh_token
   - expire_time
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'uid', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'access_token', None, None, ), # 3
    (4, TType.STRING, 'refresh_token', None, None, ), # 4
    (5, TType.I64, 'expire_time', None, None, ), # 5
  )

  def __init__(self, uid=None, name=None, access_token=None, refresh_token=None, expire_time=None,):
    self.uid = uid
    self.name = name
    self.access_token = access_token
    self.refresh_token = refresh_token
    self.expire_time = expire_time

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.uid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.access_token = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.refresh_token = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.expire_time = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AuthResponse')
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 1)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.access_token is not None:
      oprot.writeFieldBegin('access_token', TType.STRING, 3)
      oprot.writeString(self.access_token)
      oprot.writeFieldEnd()
    if self.refresh_token is not None:
      oprot.writeFieldBegin('refresh_token', TType.STRING, 4)
      oprot.writeString(self.refresh_token)
      oprot.writeFieldEnd()
    if self.expire_time is not None:
      oprot.writeFieldBegin('expire_time', TType.I64, 5)
      oprot.writeI64(self.expire_time)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.uid is None:
      raise TProtocol.TProtocolException(message='Required field uid is unset!')
    if self.name is None:
      raise TProtocol.TProtocolException(message='Required field name is unset!')
    if self.access_token is None:
      raise TProtocol.TProtocolException(message='Required field access_token is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TaskBasic:
  """
  Attributes:
   - tid
   - name
   - owner
   - intro
   - plan_num
   - begin_time
   - end_time
   - apply_num
   - invite_num
   - accept_num
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'tid', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.I64, 'owner', None, None, ), # 3
    (4, TType.STRING, 'intro', None, None, ), # 4
    (5, TType.I64, 'plan_num', None, None, ), # 5
    (6, TType.I64, 'begin_time', None, None, ), # 6
    (7, TType.I64, 'end_time', None, None, ), # 7
    (8, TType.I64, 'apply_num', None, None, ), # 8
    (9, TType.I64, 'invite_num', None, None, ), # 9
    (10, TType.I64, 'accept_num', None, None, ), # 10
  )

  def __init__(self, tid=None, name=None, owner=None, intro=None, plan_num=None, begin_time=None, end_time=None, apply_num=None, invite_num=None, accept_num=None,):
    self.tid = tid
    self.name = name
    self.owner = owner
    self.intro = intro
    self.plan_num = plan_num
    self.begin_time = begin_time
    self.end_time = end_time
    self.apply_num = apply_num
    self.invite_num = invite_num
    self.accept_num = accept_num

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.tid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.I64:
          self.owner = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.intro = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.plan_num = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.begin_time = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.I64:
          self.end_time = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.I64:
          self.apply_num = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.I64:
          self.invite_num = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.accept_num = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TaskBasic')
    if self.tid is not None:
      oprot.writeFieldBegin('tid', TType.I64, 1)
      oprot.writeI64(self.tid)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.owner is not None:
      oprot.writeFieldBegin('owner', TType.I64, 3)
      oprot.writeI64(self.owner)
      oprot.writeFieldEnd()
    if self.intro is not None:
      oprot.writeFieldBegin('intro', TType.STRING, 4)
      oprot.writeString(self.intro)
      oprot.writeFieldEnd()
    if self.plan_num is not None:
      oprot.writeFieldBegin('plan_num', TType.I64, 5)
      oprot.writeI64(self.plan_num)
      oprot.writeFieldEnd()
    if self.begin_time is not None:
      oprot.writeFieldBegin('begin_time', TType.I64, 6)
      oprot.writeI64(self.begin_time)
      oprot.writeFieldEnd()
    if self.end_time is not None:
      oprot.writeFieldBegin('end_time', TType.I64, 7)
      oprot.writeI64(self.end_time)
      oprot.writeFieldEnd()
    if self.apply_num is not None:
      oprot.writeFieldBegin('apply_num', TType.I64, 8)
      oprot.writeI64(self.apply_num)
      oprot.writeFieldEnd()
    if self.invite_num is not None:
      oprot.writeFieldBegin('invite_num', TType.I64, 9)
      oprot.writeI64(self.invite_num)
      oprot.writeFieldEnd()
    if self.accept_num is not None:
      oprot.writeFieldBegin('accept_num', TType.I64, 10)
      oprot.writeI64(self.accept_num)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.tid is None:
      raise TProtocol.TProtocolException(message='Required field tid is unset!')
    if self.name is None:
      raise TProtocol.TProtocolException(message='Required field name is unset!')
    if self.owner is None:
      raise TProtocol.TProtocolException(message='Required field owner is unset!')
    if self.intro is None:
      raise TProtocol.TProtocolException(message='Required field intro is unset!')
    if self.plan_num is None:
      raise TProtocol.TProtocolException(message='Required field plan_num is unset!')
    if self.begin_time is None:
      raise TProtocol.TProtocolException(message='Required field begin_time is unset!')
    if self.end_time is None:
      raise TProtocol.TProtocolException(message='Required field end_time is unset!')
    if self.apply_num is None:
      raise TProtocol.TProtocolException(message='Required field apply_num is unset!')
    if self.invite_num is None:
      raise TProtocol.TProtocolException(message='Required field invite_num is unset!')
    if self.accept_num is None:
      raise TProtocol.TProtocolException(message='Required field accept_num is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TaskExt:
  """
  Attributes:
   - user_apply_list
   - user_invite_list
   - user_invite_stat
   - user_accept_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'user_apply_list', (TType.I64,None), None, ), # 1
    (2, TType.LIST, 'user_invite_list', (TType.I64,None), None, ), # 2
    (3, TType.LIST, 'user_invite_stat', (TType.I32,None), None, ), # 3
    (4, TType.LIST, 'user_accept_list', (TType.I64,None), None, ), # 4
  )

  def __init__(self, user_apply_list=None, user_invite_list=None, user_invite_stat=None, user_accept_list=None,):
    self.user_apply_list = user_apply_list
    self.user_invite_list = user_invite_list
    self.user_invite_stat = user_invite_stat
    self.user_accept_list = user_accept_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.user_apply_list = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readI64();
            self.user_apply_list.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.user_invite_list = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = iprot.readI64();
            self.user_invite_list.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.user_invite_stat = []
          (_etype15, _size12) = iprot.readListBegin()
          for _i16 in xrange(_size12):
            _elem17 = iprot.readI32();
            self.user_invite_stat.append(_elem17)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.LIST:
          self.user_accept_list = []
          (_etype21, _size18) = iprot.readListBegin()
          for _i22 in xrange(_size18):
            _elem23 = iprot.readI64();
            self.user_accept_list.append(_elem23)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TaskExt')
    if self.user_apply_list is not None:
      oprot.writeFieldBegin('user_apply_list', TType.LIST, 1)
      oprot.writeListBegin(TType.I64, len(self.user_apply_list))
      for iter24 in self.user_apply_list:
        oprot.writeI64(iter24)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.user_invite_list is not None:
      oprot.writeFieldBegin('user_invite_list', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.user_invite_list))
      for iter25 in self.user_invite_list:
        oprot.writeI64(iter25)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.user_invite_stat is not None:
      oprot.writeFieldBegin('user_invite_stat', TType.LIST, 3)
      oprot.writeListBegin(TType.I32, len(self.user_invite_stat))
      for iter26 in self.user_invite_stat:
        oprot.writeI32(iter26)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.user_accept_list is not None:
      oprot.writeFieldBegin('user_accept_list', TType.LIST, 4)
      oprot.writeListBegin(TType.I64, len(self.user_accept_list))
      for iter27 in self.user_accept_list:
        oprot.writeI64(iter27)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.user_apply_list is None:
      raise TProtocol.TProtocolException(message='Required field user_apply_list is unset!')
    if self.user_invite_list is None:
      raise TProtocol.TProtocolException(message='Required field user_invite_list is unset!')
    if self.user_invite_stat is None:
      raise TProtocol.TProtocolException(message='Required field user_invite_stat is unset!')
    if self.user_accept_list is None:
      raise TProtocol.TProtocolException(message='Required field user_accept_list is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TaskInfo:
  """
  Attributes:
   - basic
   - ext
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'basic', (TaskBasic, TaskBasic.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ext', (TaskExt, TaskExt.thrift_spec), None, ), # 2
  )

  def __init__(self, basic=None, ext=None,):
    self.basic = basic
    self.ext = ext

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.basic = TaskBasic()
          self.basic.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ext = TaskExt()
          self.ext.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TaskInfo')
    if self.basic is not None:
      oprot.writeFieldBegin('basic', TType.STRUCT, 1)
      self.basic.write(oprot)
      oprot.writeFieldEnd()
    if self.ext is not None:
      oprot.writeFieldBegin('ext', TType.STRUCT, 2)
      self.ext.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.ext is None:
      raise TProtocol.TProtocolException(message='Required field ext is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserBasic:
  """
  Attributes:
   - name
   - gender
   - org
   - job
   - avator
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
    (2, TType.I32, 'gender', None, None, ), # 2
    (3, TType.STRING, 'org', None, None, ), # 3
    (4, TType.STRING, 'job', None, None, ), # 4
    (5, TType.STRING, 'avator', None, None, ), # 5
  )

  def __init__(self, name=None, gender=None, org=None, job=None, avator=None,):
    self.name = name
    self.gender = gender
    self.org = org
    self.job = job
    self.avator = avator

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.gender = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.org = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.job = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.avator = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserBasic')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.gender is not None:
      oprot.writeFieldBegin('gender', TType.I32, 2)
      oprot.writeI32(self.gender)
      oprot.writeFieldEnd()
    if self.org is not None:
      oprot.writeFieldBegin('org', TType.STRING, 3)
      oprot.writeString(self.org)
      oprot.writeFieldEnd()
    if self.job is not None:
      oprot.writeFieldBegin('job', TType.STRING, 4)
      oprot.writeString(self.job)
      oprot.writeFieldEnd()
    if self.avator is not None:
      oprot.writeFieldBegin('avator', TType.STRING, 5)
      oprot.writeString(self.avator)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.name is None:
      raise TProtocol.TProtocolException(message='Required field name is unset!')
    if self.gender is None:
      raise TProtocol.TProtocolException(message='Required field gender is unset!')
    if self.org is None:
      raise TProtocol.TProtocolException(message='Required field org is unset!')
    if self.job is None:
      raise TProtocol.TProtocolException(message='Required field job is unset!')
    if self.avator is None:
      raise TProtocol.TProtocolException(message='Required field avator is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserExt:
  """
  Attributes:
   - intro
   - following
   - befollowed
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'intro', None, None, ), # 1
    (2, TType.LIST, 'following', (TType.I64,None), None, ), # 2
    (3, TType.LIST, 'befollowed', (TType.I64,None), None, ), # 3
  )

  def __init__(self, intro=None, following=None, befollowed=None,):
    self.intro = intro
    self.following = following
    self.befollowed = befollowed

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.intro = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.following = []
          (_etype31, _size28) = iprot.readListBegin()
          for _i32 in xrange(_size28):
            _elem33 = iprot.readI64();
            self.following.append(_elem33)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.befollowed = []
          (_etype37, _size34) = iprot.readListBegin()
          for _i38 in xrange(_size34):
            _elem39 = iprot.readI64();
            self.befollowed.append(_elem39)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserExt')
    if self.intro is not None:
      oprot.writeFieldBegin('intro', TType.STRING, 1)
      oprot.writeString(self.intro)
      oprot.writeFieldEnd()
    if self.following is not None:
      oprot.writeFieldBegin('following', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.following))
      for iter40 in self.following:
        oprot.writeI64(iter40)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.befollowed is not None:
      oprot.writeFieldBegin('befollowed', TType.LIST, 3)
      oprot.writeListBegin(TType.I64, len(self.befollowed))
      for iter41 in self.befollowed:
        oprot.writeI64(iter41)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.intro is None:
      raise TProtocol.TProtocolException(message='Required field intro is unset!')
    if self.following is None:
      raise TProtocol.TProtocolException(message='Required field following is unset!')
    if self.befollowed is None:
      raise TProtocol.TProtocolException(message='Required field befollowed is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserInfo:
  """
  Attributes:
   - baisc
   - ext
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRUCT, 'baisc', (UserBasic, UserBasic.thrift_spec), None, ), # 1
    (2, TType.STRUCT, 'ext', (UserExt, UserExt.thrift_spec), None, ), # 2
  )

  def __init__(self, baisc=None, ext=None,):
    self.baisc = baisc
    self.ext = ext

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRUCT:
          self.baisc = UserBasic()
          self.baisc.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRUCT:
          self.ext = UserExt()
          self.ext.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserInfo')
    if self.baisc is not None:
      oprot.writeFieldBegin('baisc', TType.STRUCT, 1)
      self.baisc.write(oprot)
      oprot.writeFieldEnd()
    if self.ext is not None:
      oprot.writeFieldBegin('ext', TType.STRUCT, 2)
      self.ext.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.ext is None:
      raise TProtocol.TProtocolException(message='Required field ext is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
