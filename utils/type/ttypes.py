#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

from thrift.Thrift import TType, TMessageType, TException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class enmSex:
  MALE = 0
  FEMALE = 1
  UNKNOW = 2

  _VALUES_TO_NAMES = {
    0: "MALE",
    1: "FEMALE",
    2: "UNKNOW",
  }

  _NAMES_TO_VALUES = {
    "MALE": 0,
    "FEMALE": 1,
    "UNKNOW": 2,
  }


class AuthRequest:
  """
  Attributes:
   - client_id
   - client_serect
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'client_id', None, None, ), # 1
    (2, TType.STRING, 'client_serect', None, None, ), # 2
  )

  def __init__(self, client_id=None, client_serect=None,):
    self.client_id = client_id
    self.client_serect = client_serect

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.client_id = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.client_serect = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AuthRequest')
    if self.client_id is not None:
      oprot.writeFieldBegin('client_id', TType.STRING, 1)
      oprot.writeString(self.client_id)
      oprot.writeFieldEnd()
    if self.client_serect is not None:
      oprot.writeFieldBegin('client_serect', TType.STRING, 2)
      oprot.writeString(self.client_serect)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.client_id is None:
      raise TProtocol.TProtocolException(message='Required field client_id is unset!')
    if self.client_serect is None:
      raise TProtocol.TProtocolException(message='Required field client_serect is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class AuthResponse:
  """
  Attributes:
   - uid
   - name
   - access_token
   - refresh_token
   - expire_time
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'uid', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'access_token', None, None, ), # 3
    (4, TType.STRING, 'refresh_token', None, None, ), # 4
    (5, TType.I64, 'expire_time', None, None, ), # 5
  )

  def __init__(self, uid=None, name=None, access_token=None, refresh_token=None, expire_time=None,):
    self.uid = uid
    self.name = name
    self.access_token = access_token
    self.refresh_token = refresh_token
    self.expire_time = expire_time

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.uid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.access_token = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.refresh_token = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.expire_time = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('AuthResponse')
    if self.uid is not None:
      oprot.writeFieldBegin('uid', TType.I64, 1)
      oprot.writeI64(self.uid)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.access_token is not None:
      oprot.writeFieldBegin('access_token', TType.STRING, 3)
      oprot.writeString(self.access_token)
      oprot.writeFieldEnd()
    if self.refresh_token is not None:
      oprot.writeFieldBegin('refresh_token', TType.STRING, 4)
      oprot.writeString(self.refresh_token)
      oprot.writeFieldEnd()
    if self.expire_time is not None:
      oprot.writeFieldBegin('expire_time', TType.I64, 5)
      oprot.writeI64(self.expire_time)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.uid is None:
      raise TProtocol.TProtocolException(message='Required field uid is unset!')
    if self.name is None:
      raise TProtocol.TProtocolException(message='Required field name is unset!')
    if self.access_token is None:
      raise TProtocol.TProtocolException(message='Required field access_token is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class UserInfo:
  """
  Attributes:
   - name
   - sex
   - org
   - job
   - small_avator
   - big_avator
   - intro
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'name', None, None, ), # 1
    (2, TType.I32, 'sex', None, None, ), # 2
    (3, TType.STRING, 'org', None, None, ), # 3
    (4, TType.STRING, 'job', None, None, ), # 4
    (5, TType.STRING, 'small_avator', None, None, ), # 5
    (6, TType.STRING, 'big_avator', None, None, ), # 6
    (7, TType.STRING, 'intro', None, None, ), # 7
  )

  def __init__(self, name=None, sex=None, org=None, job=None, small_avator=None, big_avator=None, intro=None,):
    self.name = name
    self.sex = sex
    self.org = org
    self.job = job
    self.small_avator = small_avator
    self.big_avator = big_avator
    self.intro = intro

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.I32:
          self.sex = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.org = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.STRING:
          self.job = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.STRING:
          self.small_avator = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.STRING:
          self.big_avator = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.STRING:
          self.intro = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('UserInfo')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 1)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.sex is not None:
      oprot.writeFieldBegin('sex', TType.I32, 2)
      oprot.writeI32(self.sex)
      oprot.writeFieldEnd()
    if self.org is not None:
      oprot.writeFieldBegin('org', TType.STRING, 3)
      oprot.writeString(self.org)
      oprot.writeFieldEnd()
    if self.job is not None:
      oprot.writeFieldBegin('job', TType.STRING, 4)
      oprot.writeString(self.job)
      oprot.writeFieldEnd()
    if self.small_avator is not None:
      oprot.writeFieldBegin('small_avator', TType.STRING, 5)
      oprot.writeString(self.small_avator)
      oprot.writeFieldEnd()
    if self.big_avator is not None:
      oprot.writeFieldBegin('big_avator', TType.STRING, 6)
      oprot.writeString(self.big_avator)
      oprot.writeFieldEnd()
    if self.intro is not None:
      oprot.writeFieldBegin('intro', TType.STRING, 7)
      oprot.writeString(self.intro)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.name is None:
      raise TProtocol.TProtocolException(message='Required field name is unset!')
    if self.sex is None:
      raise TProtocol.TProtocolException(message='Required field sex is unset!')
    if self.org is None:
      raise TProtocol.TProtocolException(message='Required field org is unset!')
    if self.job is None:
      raise TProtocol.TProtocolException(message='Required field job is unset!')
    if self.small_avator is None:
      raise TProtocol.TProtocolException(message='Required field small_avator is unset!')
    if self.big_avator is None:
      raise TProtocol.TProtocolException(message='Required field big_avator is unset!')
    if self.intro is None:
      raise TProtocol.TProtocolException(message='Required field intro is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TaskInfo:
  """
  Attributes:
   - tid
   - name
   - intro
   - begin_time
   - end_time
   - owner
   - user_apply_list
   - user_accept_list
   - user_reject_list
  """

  thrift_spec = (
    None, # 0
    (1, TType.I64, 'tid', None, None, ), # 1
    (2, TType.STRING, 'name', None, None, ), # 2
    (3, TType.STRING, 'intro', None, None, ), # 3
    (4, TType.I64, 'begin_time', None, None, ), # 4
    (5, TType.I64, 'end_time', None, None, ), # 5
    (6, TType.I64, 'owner', None, None, ), # 6
    (7, TType.LIST, 'user_apply_list', (TType.I64,None), None, ), # 7
    (8, TType.LIST, 'user_accept_list', (TType.I64,None), None, ), # 8
    (9, TType.LIST, 'user_reject_list', (TType.I64,None), None, ), # 9
  )

  def __init__(self, tid=None, name=None, intro=None, begin_time=None, end_time=None, owner=None, user_apply_list=None, user_accept_list=None, user_reject_list=None,):
    self.tid = tid
    self.name = name
    self.intro = intro
    self.begin_time = begin_time
    self.end_time = end_time
    self.owner = owner
    self.user_apply_list = user_apply_list
    self.user_accept_list = user_accept_list
    self.user_reject_list = user_reject_list

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.I64:
          self.tid = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.STRING:
          self.name = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.STRING:
          self.intro = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 4:
        if ftype == TType.I64:
          self.begin_time = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 5:
        if ftype == TType.I64:
          self.end_time = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 6:
        if ftype == TType.I64:
          self.owner = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 7:
        if ftype == TType.LIST:
          self.user_apply_list = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = iprot.readI64();
            self.user_apply_list.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 8:
        if ftype == TType.LIST:
          self.user_accept_list = []
          (_etype9, _size6) = iprot.readListBegin()
          for _i10 in xrange(_size6):
            _elem11 = iprot.readI64();
            self.user_accept_list.append(_elem11)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 9:
        if ftype == TType.LIST:
          self.user_reject_list = []
          (_etype15, _size12) = iprot.readListBegin()
          for _i16 in xrange(_size12):
            _elem17 = iprot.readI64();
            self.user_reject_list.append(_elem17)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TaskInfo')
    if self.tid is not None:
      oprot.writeFieldBegin('tid', TType.I64, 1)
      oprot.writeI64(self.tid)
      oprot.writeFieldEnd()
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 2)
      oprot.writeString(self.name)
      oprot.writeFieldEnd()
    if self.intro is not None:
      oprot.writeFieldBegin('intro', TType.STRING, 3)
      oprot.writeString(self.intro)
      oprot.writeFieldEnd()
    if self.begin_time is not None:
      oprot.writeFieldBegin('begin_time', TType.I64, 4)
      oprot.writeI64(self.begin_time)
      oprot.writeFieldEnd()
    if self.end_time is not None:
      oprot.writeFieldBegin('end_time', TType.I64, 5)
      oprot.writeI64(self.end_time)
      oprot.writeFieldEnd()
    if self.owner is not None:
      oprot.writeFieldBegin('owner', TType.I64, 6)
      oprot.writeI64(self.owner)
      oprot.writeFieldEnd()
    if self.user_apply_list is not None:
      oprot.writeFieldBegin('user_apply_list', TType.LIST, 7)
      oprot.writeListBegin(TType.I64, len(self.user_apply_list))
      for iter18 in self.user_apply_list:
        oprot.writeI64(iter18)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.user_accept_list is not None:
      oprot.writeFieldBegin('user_accept_list', TType.LIST, 8)
      oprot.writeListBegin(TType.I64, len(self.user_accept_list))
      for iter19 in self.user_accept_list:
        oprot.writeI64(iter19)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.user_reject_list is not None:
      oprot.writeFieldBegin('user_reject_list', TType.LIST, 9)
      oprot.writeListBegin(TType.I64, len(self.user_reject_list))
      for iter20 in self.user_reject_list:
        oprot.writeI64(iter20)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.tid is None:
      raise TProtocol.TProtocolException(message='Required field tid is unset!')
    if self.name is None:
      raise TProtocol.TProtocolException(message='Required field name is unset!')
    if self.intro is None:
      raise TProtocol.TProtocolException(message='Required field intro is unset!')
    if self.begin_time is None:
      raise TProtocol.TProtocolException(message='Required field begin_time is unset!')
    if self.end_time is None:
      raise TProtocol.TProtocolException(message='Required field end_time is unset!')
    if self.owner is None:
      raise TProtocol.TProtocolException(message='Required field owner is unset!')
    if self.user_apply_list is None:
      raise TProtocol.TProtocolException(message='Required field user_apply_list is unset!')
    if self.user_accept_list is None:
      raise TProtocol.TProtocolException(message='Required field user_accept_list is unset!')
    if self.user_reject_list is None:
      raise TProtocol.TProtocolException(message='Required field user_reject_list is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TaskSummary:
  """
  Attributes:
   - recommend
   - nearby
   - follow
  """

  thrift_spec = (
    None, # 0
    (1, TType.LIST, 'recommend', (TType.I64,None), None, ), # 1
    (2, TType.LIST, 'nearby', (TType.I64,None), None, ), # 2
    (3, TType.LIST, 'follow', (TType.I64,None), None, ), # 3
  )

  def __init__(self, recommend=None, nearby=None, follow=None,):
    self.recommend = recommend
    self.nearby = nearby
    self.follow = follow

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.LIST:
          self.recommend = []
          (_etype24, _size21) = iprot.readListBegin()
          for _i25 in xrange(_size21):
            _elem26 = iprot.readI64();
            self.recommend.append(_elem26)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 2:
        if ftype == TType.LIST:
          self.nearby = []
          (_etype30, _size27) = iprot.readListBegin()
          for _i31 in xrange(_size27):
            _elem32 = iprot.readI64();
            self.nearby.append(_elem32)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 3:
        if ftype == TType.LIST:
          self.follow = []
          (_etype36, _size33) = iprot.readListBegin()
          for _i37 in xrange(_size33):
            _elem38 = iprot.readI64();
            self.follow.append(_elem38)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TaskSummary')
    if self.recommend is not None:
      oprot.writeFieldBegin('recommend', TType.LIST, 1)
      oprot.writeListBegin(TType.I64, len(self.recommend))
      for iter39 in self.recommend:
        oprot.writeI64(iter39)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.nearby is not None:
      oprot.writeFieldBegin('nearby', TType.LIST, 2)
      oprot.writeListBegin(TType.I64, len(self.nearby))
      for iter40 in self.nearby:
        oprot.writeI64(iter40)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.follow is not None:
      oprot.writeFieldBegin('follow', TType.LIST, 3)
      oprot.writeListBegin(TType.I64, len(self.follow))
      for iter41 in self.follow:
        oprot.writeI64(iter41)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.recommend is None:
      raise TProtocol.TProtocolException(message='Required field recommend is unset!')
    if self.nearby is None:
      raise TProtocol.TProtocolException(message='Required field nearby is unset!')
    if self.follow is None:
      raise TProtocol.TProtocolException(message='Required field follow is unset!')
    return


  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
