#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.8.0)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

import Sns
from ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print ''
  print 'Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] function [arg1 [arg2...]]'
  print ''
  print 'Functions:'
  print '  AuthResponse login_by_mail(AuthRequestMail auth_request_mail)'
  print '  AuthResponse login_by_oauth(string client_key, string client_secret, string mail)'
  print '  AuthResponse login_by_oauth2(string client_key, string client_secret, string mail)'
  print '  void logout(string access_token)'
  print '  UserInfo user_info_get(string access_token, i64 id)'
  print '  UserInfo user_info_set(string access_token, UserInfo user_info)'
  print '  Task task_get(string access_token, i64 id)'
  print '  i64 task_new(string access_token, Task task)'
  print '  void task_apply(string access_token, i64 task_id)'
  print '  void task_reject(string access_token, i64 user_id)'
  print '  void task_accept(string access_token, i64 user_id)'
  print ''
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = Sns.Client(protocol)
transport.open()

if cmd == 'login_by_mail':
  if len(args) != 1:
    print 'login_by_mail requires 1 args'
    sys.exit(1)
  pp.pprint(client.login_by_mail(eval(args[0]),))

elif cmd == 'login_by_oauth':
  if len(args) != 3:
    print 'login_by_oauth requires 3 args'
    sys.exit(1)
  pp.pprint(client.login_by_oauth(args[0],args[1],args[2],))

elif cmd == 'login_by_oauth2':
  if len(args) != 3:
    print 'login_by_oauth2 requires 3 args'
    sys.exit(1)
  pp.pprint(client.login_by_oauth2(args[0],args[1],args[2],))

elif cmd == 'logout':
  if len(args) != 1:
    print 'logout requires 1 args'
    sys.exit(1)
  pp.pprint(client.logout(args[0],))

elif cmd == 'user_info_get':
  if len(args) != 2:
    print 'user_info_get requires 2 args'
    sys.exit(1)
  pp.pprint(client.user_info_get(args[0],eval(args[1]),))

elif cmd == 'user_info_set':
  if len(args) != 2:
    print 'user_info_set requires 2 args'
    sys.exit(1)
  pp.pprint(client.user_info_set(args[0],eval(args[1]),))

elif cmd == 'task_get':
  if len(args) != 2:
    print 'task_get requires 2 args'
    sys.exit(1)
  pp.pprint(client.task_get(args[0],eval(args[1]),))

elif cmd == 'task_new':
  if len(args) != 2:
    print 'task_new requires 2 args'
    sys.exit(1)
  pp.pprint(client.task_new(args[0],eval(args[1]),))

elif cmd == 'task_apply':
  if len(args) != 2:
    print 'task_apply requires 2 args'
    sys.exit(1)
  pp.pprint(client.task_apply(args[0],eval(args[1]),))

elif cmd == 'task_reject':
  if len(args) != 2:
    print 'task_reject requires 2 args'
    sys.exit(1)
  pp.pprint(client.task_reject(args[0],eval(args[1]),))

elif cmd == 'task_accept':
  if len(args) != 2:
    print 'task_accept requires 2 args'
    sys.exit(1)
  pp.pprint(client.task_accept(args[0],eval(args[1]),))

else:
  print 'Unrecognized method %s' % cmd
  sys.exit(1)

transport.close()
