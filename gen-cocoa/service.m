/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import <TProtocol.h>
#import <TApplicationException.h>
#import <TProtocolUtil.h>
#import <TProcessor.h>

#import "error.h"
#import "type.h"

#import "service.h"


@implementation serviceConstants
+ (void) initialize {
}
@end

@interface login_args : NSObject <NSCoding> {
  Auth * __auth;

  BOOL __auth_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=auth, setter=setAuth:) Auth * auth;
#endif

- (id) initWithAuth: (Auth *) auth;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (Auth *) auth;
- (void) setAuth: (Auth *) auth;
- (BOOL) authIsSet;

@end

@implementation login_args

- (id) initWithAuth: (Auth *) auth
{
  self = [super init];
  __auth = [auth retain];
  __auth_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"auth"])
  {
    __auth = [[decoder decodeObjectForKey: @"auth"] retain];
    __auth_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__auth_isset)
  {
    [encoder encodeObject: __auth forKey: @"auth"];
  }
}

- (void) dealloc
{
  [__auth release];
  [super dealloc];
}

- (Auth *) auth {
  return [[__auth retain] autorelease];
}

- (void) setAuth: (Auth *) auth {
  [auth retain];
  [__auth release];
  __auth = auth;
  __auth_isset = YES;
}

- (BOOL) authIsSet {
  return __auth_isset;
}

- (void) unsetAuth {
  [__auth release];
  __auth = nil;
  __auth_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          Auth *fieldValue = [[Auth alloc] init];
          [fieldValue read: inProtocol];
          [self setAuth: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"login_args"];
  if (__auth_isset) {
    if (__auth != nil) {
      [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
      [__auth write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"login_args("];
  [ms appendString: @"auth:"];
  [ms appendFormat: @"%@", __auth];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Login_result : NSObject <NSCoding> {
  AuthResponse * __success;
  UserException * __userException;
  SystemException * __systemException;

  BOOL __success_isset;
  BOOL __userException_isset;
  BOOL __systemException_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) AuthResponse * success;
@property (nonatomic, retain, getter=userException, setter=setUserException:) UserException * userException;
@property (nonatomic, retain, getter=systemException, setter=setSystemException:) SystemException * systemException;
#endif

- (id) initWithSuccess: (AuthResponse *) success userException: (UserException *) userException systemException: (SystemException *) systemException;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (AuthResponse *) success;
- (void) setSuccess: (AuthResponse *) success;
- (BOOL) successIsSet;

- (UserException *) userException;
- (void) setUserException: (UserException *) userException;
- (BOOL) userExceptionIsSet;

- (SystemException *) systemException;
- (void) setSystemException: (SystemException *) systemException;
- (BOOL) systemExceptionIsSet;

@end

@implementation Login_result

- (id) initWithSuccess: (AuthResponse *) success userException: (UserException *) userException systemException: (SystemException *) systemException
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  __userException = [userException retain];
  __userException_isset = YES;
  __systemException = [systemException retain];
  __systemException_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"userException"])
  {
    __userException = [[decoder decodeObjectForKey: @"userException"] retain];
    __userException_isset = YES;
  }
  if ([decoder containsValueForKey: @"systemException"])
  {
    __systemException = [[decoder decodeObjectForKey: @"systemException"] retain];
    __systemException_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__userException_isset)
  {
    [encoder encodeObject: __userException forKey: @"userException"];
  }
  if (__systemException_isset)
  {
    [encoder encodeObject: __systemException forKey: @"systemException"];
  }
}

- (void) dealloc
{
  [__success release];
  [__userException release];
  [__systemException release];
  [super dealloc];
}

- (AuthResponse *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (AuthResponse *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (UserException *) userException {
  return [[__userException retain] autorelease];
}

- (void) setUserException: (UserException *) userException {
  [userException retain];
  [__userException release];
  __userException = userException;
  __userException_isset = YES;
}

- (BOOL) userExceptionIsSet {
  return __userException_isset;
}

- (void) unsetUserException {
  [__userException release];
  __userException = nil;
  __userException_isset = NO;
}

- (SystemException *) systemException {
  return [[__systemException retain] autorelease];
}

- (void) setSystemException: (SystemException *) systemException {
  [systemException retain];
  [__systemException release];
  __systemException = systemException;
  __systemException_isset = YES;
}

- (BOOL) systemExceptionIsSet {
  return __systemException_isset;
}

- (void) unsetSystemException {
  [__systemException release];
  __systemException = nil;
  __systemException_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          AuthResponse *fieldValue = [[AuthResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          UserException *fieldValue = [[UserException alloc] init];
          [fieldValue read: inProtocol];
          [self setUserException: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          SystemException *fieldValue = [[SystemException alloc] init];
          [fieldValue read: inProtocol];
          [self setSystemException: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Login_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__userException_isset) {
    if (__userException != nil) {
      [outProtocol writeFieldBeginWithName: @"userException" type: TType_STRUCT fieldID: 1];
      [__userException write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__systemException_isset) {
    if (__systemException != nil) {
      [outProtocol writeFieldBeginWithName: @"systemException" type: TType_STRUCT fieldID: 2];
      [__systemException write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Login_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",userException:"];
  [ms appendFormat: @"%@", __userException];
  [ms appendString: @",systemException:"];
  [ms appendFormat: @"%@", __systemException];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface info_get_args : NSObject <NSCoding> {
  NSString * __accessToken;
  int64_t __id;

  BOOL __accessToken_isset;
  BOOL __id_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=accessToken, setter=setAccessToken:) NSString * accessToken;
@property (nonatomic, getter=id, setter=setId:) int64_t id;
#endif

- (id) initWithAccessToken: (NSString *) accessToken id: (int64_t) id;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSString *) accessToken;
- (void) setAccessToken: (NSString *) accessToken;
- (BOOL) accessTokenIsSet;

- (int64_t) id;
- (void) setId: (int64_t) id;
- (BOOL) idIsSet;

@end

@implementation info_get_args

- (id) initWithAccessToken: (NSString *) accessToken id: (int64_t) id
{
  self = [super init];
  __accessToken = [accessToken retain];
  __accessToken_isset = YES;
  __id = id;
  __id_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"accessToken"])
  {
    __accessToken = [[decoder decodeObjectForKey: @"accessToken"] retain];
    __accessToken_isset = YES;
  }
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt64ForKey: @"id"];
    __id_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__accessToken_isset)
  {
    [encoder encodeObject: __accessToken forKey: @"accessToken"];
  }
  if (__id_isset)
  {
    [encoder encodeInt64: __id forKey: @"id"];
  }
}

- (void) dealloc
{
  [__accessToken release];
  [super dealloc];
}

- (NSString *) accessToken {
  return [[__accessToken retain] autorelease];
}

- (void) setAccessToken: (NSString *) accessToken {
  [accessToken retain];
  [__accessToken release];
  __accessToken = accessToken;
  __accessToken_isset = YES;
}

- (BOOL) accessTokenIsSet {
  return __accessToken_isset;
}

- (void) unsetAccessToken {
  [__accessToken release];
  __accessToken = nil;
  __accessToken_isset = NO;
}

- (int64_t) id {
  return __id;
}

- (void) setId: (int64_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAccessToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"info_get_args"];
  if (__accessToken_isset) {
    if (__accessToken != nil) {
      [outProtocol writeFieldBeginWithName: @"accessToken" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __accessToken];
      [outProtocol writeFieldEnd];
    }
  }
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __id];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"info_get_args("];
  [ms appendString: @"accessToken:"];
  [ms appendFormat: @"\"%@\"", __accessToken];
  [ms appendString: @",id:"];
  [ms appendFormat: @"%qi", __id];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Info_get_result : NSObject <NSCoding> {
  UserInfo * __success;
  UserException * __userException;
  SystemException * __systemException;
  NotFoundException * __notFoundException;

  BOOL __success_isset;
  BOOL __userException_isset;
  BOOL __systemException_isset;
  BOOL __notFoundException_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) UserInfo * success;
@property (nonatomic, retain, getter=userException, setter=setUserException:) UserException * userException;
@property (nonatomic, retain, getter=systemException, setter=setSystemException:) SystemException * systemException;
@property (nonatomic, retain, getter=notFoundException, setter=setNotFoundException:) NotFoundException * notFoundException;
#endif

- (id) initWithSuccess: (UserInfo *) success userException: (UserException *) userException systemException: (SystemException *) systemException notFoundException: (NotFoundException *) notFoundException;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (UserInfo *) success;
- (void) setSuccess: (UserInfo *) success;
- (BOOL) successIsSet;

- (UserException *) userException;
- (void) setUserException: (UserException *) userException;
- (BOOL) userExceptionIsSet;

- (SystemException *) systemException;
- (void) setSystemException: (SystemException *) systemException;
- (BOOL) systemExceptionIsSet;

- (NotFoundException *) notFoundException;
- (void) setNotFoundException: (NotFoundException *) notFoundException;
- (BOOL) notFoundExceptionIsSet;

@end

@implementation Info_get_result

- (id) initWithSuccess: (UserInfo *) success userException: (UserException *) userException systemException: (SystemException *) systemException notFoundException: (NotFoundException *) notFoundException
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  __userException = [userException retain];
  __userException_isset = YES;
  __systemException = [systemException retain];
  __systemException_isset = YES;
  __notFoundException = [notFoundException retain];
  __notFoundException_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"userException"])
  {
    __userException = [[decoder decodeObjectForKey: @"userException"] retain];
    __userException_isset = YES;
  }
  if ([decoder containsValueForKey: @"systemException"])
  {
    __systemException = [[decoder decodeObjectForKey: @"systemException"] retain];
    __systemException_isset = YES;
  }
  if ([decoder containsValueForKey: @"notFoundException"])
  {
    __notFoundException = [[decoder decodeObjectForKey: @"notFoundException"] retain];
    __notFoundException_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__userException_isset)
  {
    [encoder encodeObject: __userException forKey: @"userException"];
  }
  if (__systemException_isset)
  {
    [encoder encodeObject: __systemException forKey: @"systemException"];
  }
  if (__notFoundException_isset)
  {
    [encoder encodeObject: __notFoundException forKey: @"notFoundException"];
  }
}

- (void) dealloc
{
  [__success release];
  [__userException release];
  [__systemException release];
  [__notFoundException release];
  [super dealloc];
}

- (UserInfo *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (UserInfo *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (UserException *) userException {
  return [[__userException retain] autorelease];
}

- (void) setUserException: (UserException *) userException {
  [userException retain];
  [__userException release];
  __userException = userException;
  __userException_isset = YES;
}

- (BOOL) userExceptionIsSet {
  return __userException_isset;
}

- (void) unsetUserException {
  [__userException release];
  __userException = nil;
  __userException_isset = NO;
}

- (SystemException *) systemException {
  return [[__systemException retain] autorelease];
}

- (void) setSystemException: (SystemException *) systemException {
  [systemException retain];
  [__systemException release];
  __systemException = systemException;
  __systemException_isset = YES;
}

- (BOOL) systemExceptionIsSet {
  return __systemException_isset;
}

- (void) unsetSystemException {
  [__systemException release];
  __systemException = nil;
  __systemException_isset = NO;
}

- (NotFoundException *) notFoundException {
  return [[__notFoundException retain] autorelease];
}

- (void) setNotFoundException: (NotFoundException *) notFoundException {
  [notFoundException retain];
  [__notFoundException release];
  __notFoundException = notFoundException;
  __notFoundException_isset = YES;
}

- (BOOL) notFoundExceptionIsSet {
  return __notFoundException_isset;
}

- (void) unsetNotFoundException {
  [__notFoundException release];
  __notFoundException = nil;
  __notFoundException_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          UserInfo *fieldValue = [[UserInfo alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          UserException *fieldValue = [[UserException alloc] init];
          [fieldValue read: inProtocol];
          [self setUserException: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          SystemException *fieldValue = [[SystemException alloc] init];
          [fieldValue read: inProtocol];
          [self setSystemException: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          NotFoundException *fieldValue = [[NotFoundException alloc] init];
          [fieldValue read: inProtocol];
          [self setNotFoundException: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Info_get_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__userException_isset) {
    if (__userException != nil) {
      [outProtocol writeFieldBeginWithName: @"userException" type: TType_STRUCT fieldID: 1];
      [__userException write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__systemException_isset) {
    if (__systemException != nil) {
      [outProtocol writeFieldBeginWithName: @"systemException" type: TType_STRUCT fieldID: 2];
      [__systemException write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__notFoundException_isset) {
    if (__notFoundException != nil) {
      [outProtocol writeFieldBeginWithName: @"notFoundException" type: TType_STRUCT fieldID: 3];
      [__notFoundException write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Info_get_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",userException:"];
  [ms appendFormat: @"%@", __userException];
  [ms appendString: @",systemException:"];
  [ms appendFormat: @"%@", __systemException];
  [ms appendString: @",notFoundException:"];
  [ms appendFormat: @"%@", __notFoundException];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface info_set_args : NSObject <NSCoding> {
  NSString * __accessToken;
  UserInfo * __userInfo;

  BOOL __accessToken_isset;
  BOOL __userInfo_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=accessToken, setter=setAccessToken:) NSString * accessToken;
@property (nonatomic, retain, getter=userInfo, setter=setUserInfo:) UserInfo * userInfo;
#endif

- (id) initWithAccessToken: (NSString *) accessToken userInfo: (UserInfo *) userInfo;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSString *) accessToken;
- (void) setAccessToken: (NSString *) accessToken;
- (BOOL) accessTokenIsSet;

- (UserInfo *) userInfo;
- (void) setUserInfo: (UserInfo *) userInfo;
- (BOOL) userInfoIsSet;

@end

@implementation info_set_args

- (id) initWithAccessToken: (NSString *) accessToken userInfo: (UserInfo *) userInfo
{
  self = [super init];
  __accessToken = [accessToken retain];
  __accessToken_isset = YES;
  __userInfo = [userInfo retain];
  __userInfo_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"accessToken"])
  {
    __accessToken = [[decoder decodeObjectForKey: @"accessToken"] retain];
    __accessToken_isset = YES;
  }
  if ([decoder containsValueForKey: @"userInfo"])
  {
    __userInfo = [[decoder decodeObjectForKey: @"userInfo"] retain];
    __userInfo_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__accessToken_isset)
  {
    [encoder encodeObject: __accessToken forKey: @"accessToken"];
  }
  if (__userInfo_isset)
  {
    [encoder encodeObject: __userInfo forKey: @"userInfo"];
  }
}

- (void) dealloc
{
  [__accessToken release];
  [__userInfo release];
  [super dealloc];
}

- (NSString *) accessToken {
  return [[__accessToken retain] autorelease];
}

- (void) setAccessToken: (NSString *) accessToken {
  [accessToken retain];
  [__accessToken release];
  __accessToken = accessToken;
  __accessToken_isset = YES;
}

- (BOOL) accessTokenIsSet {
  return __accessToken_isset;
}

- (void) unsetAccessToken {
  [__accessToken release];
  __accessToken = nil;
  __accessToken_isset = NO;
}

- (UserInfo *) userInfo {
  return [[__userInfo retain] autorelease];
}

- (void) setUserInfo: (UserInfo *) userInfo {
  [userInfo retain];
  [__userInfo release];
  __userInfo = userInfo;
  __userInfo_isset = YES;
}

- (BOOL) userInfoIsSet {
  return __userInfo_isset;
}

- (void) unsetUserInfo {
  [__userInfo release];
  __userInfo = nil;
  __userInfo_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAccessToken: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          UserInfo *fieldValue = [[UserInfo alloc] init];
          [fieldValue read: inProtocol];
          [self setUserInfo: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"info_set_args"];
  if (__accessToken_isset) {
    if (__accessToken != nil) {
      [outProtocol writeFieldBeginWithName: @"accessToken" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __accessToken];
      [outProtocol writeFieldEnd];
    }
  }
  if (__userInfo_isset) {
    if (__userInfo != nil) {
      [outProtocol writeFieldBeginWithName: @"userInfo" type: TType_STRUCT fieldID: 2];
      [__userInfo write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"info_set_args("];
  [ms appendString: @"accessToken:"];
  [ms appendFormat: @"\"%@\"", __accessToken];
  [ms appendString: @",userInfo:"];
  [ms appendFormat: @"%@", __userInfo];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Info_set_result : NSObject <NSCoding> {
  UserInfo * __success;
  UserException * __userException;
  SystemException * __systemException;

  BOOL __success_isset;
  BOOL __userException_isset;
  BOOL __systemException_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) UserInfo * success;
@property (nonatomic, retain, getter=userException, setter=setUserException:) UserException * userException;
@property (nonatomic, retain, getter=systemException, setter=setSystemException:) SystemException * systemException;
#endif

- (id) initWithSuccess: (UserInfo *) success userException: (UserException *) userException systemException: (SystemException *) systemException;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (UserInfo *) success;
- (void) setSuccess: (UserInfo *) success;
- (BOOL) successIsSet;

- (UserException *) userException;
- (void) setUserException: (UserException *) userException;
- (BOOL) userExceptionIsSet;

- (SystemException *) systemException;
- (void) setSystemException: (SystemException *) systemException;
- (BOOL) systemExceptionIsSet;

@end

@implementation Info_set_result

- (id) initWithSuccess: (UserInfo *) success userException: (UserException *) userException systemException: (SystemException *) systemException
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  __userException = [userException retain];
  __userException_isset = YES;
  __systemException = [systemException retain];
  __systemException_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  if ([decoder containsValueForKey: @"userException"])
  {
    __userException = [[decoder decodeObjectForKey: @"userException"] retain];
    __userException_isset = YES;
  }
  if ([decoder containsValueForKey: @"systemException"])
  {
    __systemException = [[decoder decodeObjectForKey: @"systemException"] retain];
    __systemException_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
  if (__userException_isset)
  {
    [encoder encodeObject: __userException forKey: @"userException"];
  }
  if (__systemException_isset)
  {
    [encoder encodeObject: __systemException forKey: @"systemException"];
  }
}

- (void) dealloc
{
  [__success release];
  [__userException release];
  [__systemException release];
  [super dealloc];
}

- (UserInfo *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (UserInfo *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (UserException *) userException {
  return [[__userException retain] autorelease];
}

- (void) setUserException: (UserException *) userException {
  [userException retain];
  [__userException release];
  __userException = userException;
  __userException_isset = YES;
}

- (BOOL) userExceptionIsSet {
  return __userException_isset;
}

- (void) unsetUserException {
  [__userException release];
  __userException = nil;
  __userException_isset = NO;
}

- (SystemException *) systemException {
  return [[__systemException retain] autorelease];
}

- (void) setSystemException: (SystemException *) systemException {
  [systemException retain];
  [__systemException release];
  __systemException = systemException;
  __systemException_isset = YES;
}

- (BOOL) systemExceptionIsSet {
  return __systemException_isset;
}

- (void) unsetSystemException {
  [__systemException release];
  __systemException = nil;
  __systemException_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          UserInfo *fieldValue = [[UserInfo alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 1:
        if (fieldType == TType_STRUCT) {
          UserException *fieldValue = [[UserException alloc] init];
          [fieldValue read: inProtocol];
          [self setUserException: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          SystemException *fieldValue = [[SystemException alloc] init];
          [fieldValue read: inProtocol];
          [self setSystemException: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Info_set_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__userException_isset) {
    if (__userException != nil) {
      [outProtocol writeFieldBeginWithName: @"userException" type: TType_STRUCT fieldID: 1];
      [__userException write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  } else if (__systemException_isset) {
    if (__systemException != nil) {
      [outProtocol writeFieldBeginWithName: @"systemException" type: TType_STRUCT fieldID: 2];
      [__systemException write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Info_set_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @",userException:"];
  [ms appendFormat: @"%@", __userException];
  [ms appendString: @",systemException:"];
  [ms appendFormat: @"%@", __systemException];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation SnsClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  [super init];
  inProtocol = [anInProtocol retain];
  outProtocol = [anOutProtocol retain];
  return self;
}

- (void) dealloc
{
  [inProtocol release];
  [outProtocol release];
  [super dealloc];
}

- (void) send_login: (Auth *) auth
{
  [outProtocol writeMessageBeginWithName: @"login" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"login_args"];
  if (auth != nil)  {
    [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
    [auth write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (AuthResponse *) recv_login
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Login_result * result = [[[Login_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result userExceptionIsSet]) {
    @throw [result userException];
  }
  if ([result systemExceptionIsSet]) {
    @throw [result systemException];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"login failed: unknown result"];
}

- (AuthResponse *) login: (Auth *) auth
{
  [self send_login: auth];
  return [self recv_login];
}

- (void) send_info_get: (NSString *) accessToken : (int64_t) id
{
  [outProtocol writeMessageBeginWithName: @"info_get" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"info_get_args"];
  if (accessToken != nil)  {
    [outProtocol writeFieldBeginWithName: @"accessToken" type: TType_STRING fieldID: 1];
    [outProtocol writeString: accessToken];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"id" type: TType_I64 fieldID: 2];
  [outProtocol writeI64: id];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (UserInfo *) recv_info_get
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Info_get_result * result = [[[Info_get_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result userExceptionIsSet]) {
    @throw [result userException];
  }
  if ([result systemExceptionIsSet]) {
    @throw [result systemException];
  }
  if ([result notFoundExceptionIsSet]) {
    @throw [result notFoundException];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"info_get failed: unknown result"];
}

- (UserInfo *) info_get: (NSString *) accessToken : (int64_t) id
{
  [self send_info_get: accessToken : id];
  return [self recv_info_get];
}

- (void) send_info_set: (NSString *) accessToken : (UserInfo *) userInfo
{
  [outProtocol writeMessageBeginWithName: @"info_set" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"info_set_args"];
  if (accessToken != nil)  {
    [outProtocol writeFieldBeginWithName: @"accessToken" type: TType_STRING fieldID: 1];
    [outProtocol writeString: accessToken];
    [outProtocol writeFieldEnd];
  }
  if (userInfo != nil)  {
    [outProtocol writeFieldBeginWithName: @"userInfo" type: TType_STRUCT fieldID: 2];
    [userInfo write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (UserInfo *) recv_info_set
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Info_set_result * result = [[[Info_set_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  if ([result userExceptionIsSet]) {
    @throw [result userException];
  }
  if ([result systemExceptionIsSet]) {
    @throw [result systemException];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"info_set failed: unknown result"];
}

- (UserInfo *) info_set: (NSString *) accessToken : (UserInfo *) userInfo
{
  [self send_info_set: accessToken : userInfo];
  return [self recv_info_set];
}

@end

@implementation SnsProcessor

- (id) initWithSns: (id <Sns>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain];
  mMethodMap = [[NSMutableDictionary dictionary] retain];
  {
    SEL s = @selector(process_login_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"login"];
  }
  {
    SEL s = @selector(process_info_get_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"info_get"];
  }
  {
    SEL s = @selector(process_info_set_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"info_set"];
  }
  return self;
}

- (id<Sns>) service
{
  return [[mService retain] autorelease];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_login_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  login_args * args = [[login_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Login_result * result = [[Login_result alloc] init];
  [result setSuccess: [mService login: [args auth]]];
  [outProtocol writeMessageBeginWithName: @"login"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_info_get_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  info_get_args * args = [[info_get_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Info_get_result * result = [[Info_get_result alloc] init];
  [result setSuccess: [mService info_get: [args accessToken]: [args id]]];
  [outProtocol writeMessageBeginWithName: @"info_get"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_info_set_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  info_set_args * args = [[info_set_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Info_set_result * result = [[Info_set_result alloc] init];
  [result setSuccess: [mService info_set: [args accessToken]: [args userInfo]]];
  [outProtocol writeMessageBeginWithName: @"info_set"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) dealloc
{
  [mService release];
  [mMethodMap release];
  [super dealloc];
}

@end

