/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import <TProtocol.h>
#import <TApplicationException.h>
#import <TProtocolUtil.h>
#import <TProcessor.h>

#import "type.h"

#import "service.h"


@implementation serviceConstants
+ (void) initialize {
}
@end

@interface login_args : NSObject <NSCoding> {
  AuthRequest * __auth;

  BOOL __auth_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=auth, setter=setAuth:) AuthRequest * auth;
#endif

- (id) initWithAuth: (AuthRequest *) auth;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (AuthRequest *) auth;
- (void) setAuth: (AuthRequest *) auth;
- (BOOL) authIsSet;

@end

@implementation login_args

- (id) initWithAuth: (AuthRequest *) auth
{
  self = [super init];
  __auth = [auth retain];
  __auth_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"auth"])
  {
    __auth = [[decoder decodeObjectForKey: @"auth"] retain];
    __auth_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__auth_isset)
  {
    [encoder encodeObject: __auth forKey: @"auth"];
  }
}

- (void) dealloc
{
  [__auth release];
  [super dealloc];
}

- (AuthRequest *) auth {
  return [[__auth retain] autorelease];
}

- (void) setAuth: (AuthRequest *) auth {
  [auth retain];
  [__auth release];
  __auth = auth;
  __auth_isset = YES;
}

- (BOOL) authIsSet {
  return __auth_isset;
}

- (void) unsetAuth {
  [__auth release];
  __auth = nil;
  __auth_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AuthRequest *fieldValue = [[AuthRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setAuth: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"login_args"];
  if (__auth_isset) {
    if (__auth != nil) {
      [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
      [__auth write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"login_args("];
  [ms appendString: @"auth:"];
  [ms appendFormat: @"%@", __auth];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Login_result : NSObject <NSCoding> {
  AuthResponse * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) AuthResponse * success;
#endif

- (id) initWithSuccess: (AuthResponse *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (AuthResponse *) success;
- (void) setSuccess: (AuthResponse *) success;
- (BOOL) successIsSet;

@end

@implementation Login_result

- (id) initWithSuccess: (AuthResponse *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (AuthResponse *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (AuthResponse *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          AuthResponse *fieldValue = [[AuthResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Login_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Login_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface logout_args : NSObject <NSCoding> {
  NSString * __access_token;

  BOOL __access_token_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=access_token, setter=setAccess_token:) NSString * access_token;
#endif

- (id) initWithAccess_token: (NSString *) access_token;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSString *) access_token;
- (void) setAccess_token: (NSString *) access_token;
- (BOOL) access_tokenIsSet;

@end

@implementation logout_args

- (id) initWithAccess_token: (NSString *) access_token
{
  self = [super init];
  __access_token = [access_token retain];
  __access_token_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"access_token"])
  {
    __access_token = [[decoder decodeObjectForKey: @"access_token"] retain];
    __access_token_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__access_token_isset)
  {
    [encoder encodeObject: __access_token forKey: @"access_token"];
  }
}

- (void) dealloc
{
  [__access_token release];
  [super dealloc];
}

- (NSString *) access_token {
  return [[__access_token retain] autorelease];
}

- (void) setAccess_token: (NSString *) access_token {
  [access_token retain];
  [__access_token release];
  __access_token = access_token;
  __access_token_isset = YES;
}

- (BOOL) access_tokenIsSet {
  return __access_token_isset;
}

- (void) unsetAccess_token {
  [__access_token release];
  __access_token = nil;
  __access_token_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAccess_token: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"logout_args"];
  if (__access_token_isset) {
    if (__access_token != nil) {
      [outProtocol writeFieldBeginWithName: @"access_token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __access_token];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"logout_args("];
  [ms appendString: @"access_token:"];
  [ms appendFormat: @"\"%@\"", __access_token];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Logout_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (BOOL) success;
- (void) setSuccess: (BOOL) success;
- (BOOL) successIsSet;

@end

@implementation Logout_result

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Logout_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Logout_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface user_get_args : NSObject <NSCoding> {
  NSString * __access_token;
  int64_t __user_id;

  BOOL __access_token_isset;
  BOOL __user_id_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=access_token, setter=setAccess_token:) NSString * access_token;
@property (nonatomic, getter=user_id, setter=setUser_id:) int64_t user_id;
#endif

- (id) initWithAccess_token: (NSString *) access_token user_id: (int64_t) user_id;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSString *) access_token;
- (void) setAccess_token: (NSString *) access_token;
- (BOOL) access_tokenIsSet;

- (int64_t) user_id;
- (void) setUser_id: (int64_t) user_id;
- (BOOL) user_idIsSet;

@end

@implementation user_get_args

- (id) initWithAccess_token: (NSString *) access_token user_id: (int64_t) user_id
{
  self = [super init];
  __access_token = [access_token retain];
  __access_token_isset = YES;
  __user_id = user_id;
  __user_id_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"access_token"])
  {
    __access_token = [[decoder decodeObjectForKey: @"access_token"] retain];
    __access_token_isset = YES;
  }
  if ([decoder containsValueForKey: @"user_id"])
  {
    __user_id = [decoder decodeInt64ForKey: @"user_id"];
    __user_id_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__access_token_isset)
  {
    [encoder encodeObject: __access_token forKey: @"access_token"];
  }
  if (__user_id_isset)
  {
    [encoder encodeInt64: __user_id forKey: @"user_id"];
  }
}

- (void) dealloc
{
  [__access_token release];
  [super dealloc];
}

- (NSString *) access_token {
  return [[__access_token retain] autorelease];
}

- (void) setAccess_token: (NSString *) access_token {
  [access_token retain];
  [__access_token release];
  __access_token = access_token;
  __access_token_isset = YES;
}

- (BOOL) access_tokenIsSet {
  return __access_token_isset;
}

- (void) unsetAccess_token {
  [__access_token release];
  __access_token = nil;
  __access_token_isset = NO;
}

- (int64_t) user_id {
  return __user_id;
}

- (void) setUser_id: (int64_t) user_id {
  __user_id = user_id;
  __user_id_isset = YES;
}

- (BOOL) user_idIsSet {
  return __user_id_isset;
}

- (void) unsetUser_id {
  __user_id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAccess_token: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setUser_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"user_get_args"];
  if (__access_token_isset) {
    if (__access_token != nil) {
      [outProtocol writeFieldBeginWithName: @"access_token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __access_token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__user_id_isset) {
    [outProtocol writeFieldBeginWithName: @"user_id" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __user_id];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"user_get_args("];
  [ms appendString: @"access_token:"];
  [ms appendFormat: @"\"%@\"", __access_token];
  [ms appendString: @",user_id:"];
  [ms appendFormat: @"%qi", __user_id];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface User_get_result : NSObject <NSCoding> {
  User * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) User * success;
#endif

- (id) initWithSuccess: (User *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (User *) success;
- (void) setSuccess: (User *) success;
- (BOOL) successIsSet;

@end

@implementation User_get_result

- (id) initWithSuccess: (User *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (User *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (User *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          User *fieldValue = [[User alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"User_get_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"User_get_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface user_set_args : NSObject <NSCoding> {
  NSString * __access_token;
  User * __user;

  BOOL __access_token_isset;
  BOOL __user_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=access_token, setter=setAccess_token:) NSString * access_token;
@property (nonatomic, retain, getter=user, setter=setUser:) User * user;
#endif

- (id) initWithAccess_token: (NSString *) access_token user: (User *) user;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSString *) access_token;
- (void) setAccess_token: (NSString *) access_token;
- (BOOL) access_tokenIsSet;

- (User *) user;
- (void) setUser: (User *) user;
- (BOOL) userIsSet;

@end

@implementation user_set_args

- (id) initWithAccess_token: (NSString *) access_token user: (User *) user
{
  self = [super init];
  __access_token = [access_token retain];
  __access_token_isset = YES;
  __user = [user retain];
  __user_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"access_token"])
  {
    __access_token = [[decoder decodeObjectForKey: @"access_token"] retain];
    __access_token_isset = YES;
  }
  if ([decoder containsValueForKey: @"user"])
  {
    __user = [[decoder decodeObjectForKey: @"user"] retain];
    __user_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__access_token_isset)
  {
    [encoder encodeObject: __access_token forKey: @"access_token"];
  }
  if (__user_isset)
  {
    [encoder encodeObject: __user forKey: @"user"];
  }
}

- (void) dealloc
{
  [__access_token release];
  [__user release];
  [super dealloc];
}

- (NSString *) access_token {
  return [[__access_token retain] autorelease];
}

- (void) setAccess_token: (NSString *) access_token {
  [access_token retain];
  [__access_token release];
  __access_token = access_token;
  __access_token_isset = YES;
}

- (BOOL) access_tokenIsSet {
  return __access_token_isset;
}

- (void) unsetAccess_token {
  [__access_token release];
  __access_token = nil;
  __access_token_isset = NO;
}

- (User *) user {
  return [[__user retain] autorelease];
}

- (void) setUser: (User *) user {
  [user retain];
  [__user release];
  __user = user;
  __user_isset = YES;
}

- (BOOL) userIsSet {
  return __user_isset;
}

- (void) unsetUser {
  [__user release];
  __user = nil;
  __user_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAccess_token: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          User *fieldValue = [[User alloc] init];
          [fieldValue read: inProtocol];
          [self setUser: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"user_set_args"];
  if (__access_token_isset) {
    if (__access_token != nil) {
      [outProtocol writeFieldBeginWithName: @"access_token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __access_token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__user_isset) {
    if (__user != nil) {
      [outProtocol writeFieldBeginWithName: @"user" type: TType_STRUCT fieldID: 2];
      [__user write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"user_set_args("];
  [ms appendString: @"access_token:"];
  [ms appendFormat: @"\"%@\"", __access_token];
  [ms appendString: @",user:"];
  [ms appendFormat: @"%@", __user];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface User_set_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (BOOL) success;
- (void) setSuccess: (BOOL) success;
- (BOOL) successIsSet;

@end

@implementation User_set_result

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"User_set_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"User_set_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface user_list_args : NSObject <NSCoding> {
  NSString * __access_token;
  NSArray * __id_list;

  BOOL __access_token_isset;
  BOOL __id_list_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=access_token, setter=setAccess_token:) NSString * access_token;
@property (nonatomic, retain, getter=id_list, setter=setId_list:) NSArray * id_list;
#endif

- (id) initWithAccess_token: (NSString *) access_token id_list: (NSArray *) id_list;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSString *) access_token;
- (void) setAccess_token: (NSString *) access_token;
- (BOOL) access_tokenIsSet;

- (NSArray *) id_list;
- (void) setId_list: (NSArray *) id_list;
- (BOOL) id_listIsSet;

@end

@implementation user_list_args

- (id) initWithAccess_token: (NSString *) access_token id_list: (NSArray *) id_list
{
  self = [super init];
  __access_token = [access_token retain];
  __access_token_isset = YES;
  __id_list = [id_list retain];
  __id_list_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"access_token"])
  {
    __access_token = [[decoder decodeObjectForKey: @"access_token"] retain];
    __access_token_isset = YES;
  }
  if ([decoder containsValueForKey: @"id_list"])
  {
    __id_list = [[decoder decodeObjectForKey: @"id_list"] retain];
    __id_list_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__access_token_isset)
  {
    [encoder encodeObject: __access_token forKey: @"access_token"];
  }
  if (__id_list_isset)
  {
    [encoder encodeObject: __id_list forKey: @"id_list"];
  }
}

- (void) dealloc
{
  [__access_token release];
  [__id_list release];
  [super dealloc];
}

- (NSString *) access_token {
  return [[__access_token retain] autorelease];
}

- (void) setAccess_token: (NSString *) access_token {
  [access_token retain];
  [__access_token release];
  __access_token = access_token;
  __access_token_isset = YES;
}

- (BOOL) access_tokenIsSet {
  return __access_token_isset;
}

- (void) unsetAccess_token {
  [__access_token release];
  __access_token = nil;
  __access_token_isset = NO;
}

- (NSArray *) id_list {
  return [[__id_list retain] autorelease];
}

- (void) setId_list: (NSArray *) id_list {
  [id_list retain];
  [__id_list release];
  __id_list = id_list;
  __id_list_isset = YES;
}

- (BOOL) id_listIsSet {
  return __id_list_isset;
}

- (void) unsetId_list {
  [__id_list release];
  __id_list = nil;
  __id_list_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAccess_token: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            int64_t _elem2 = [inProtocol readI64];
            [fieldValue addObject: [NSNumber numberWithLongLong: _elem2]];
          }
          [inProtocol readListEnd];
          [self setId_list: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"user_list_args"];
  if (__access_token_isset) {
    if (__access_token != nil) {
      [outProtocol writeFieldBeginWithName: @"access_token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __access_token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__id_list_isset) {
    if (__id_list != nil) {
      [outProtocol writeFieldBeginWithName: @"id_list" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_I64 size: [__id_list count]];
        int i4;
        for (i4 = 0; i4 < [__id_list count]; i4++)
        {
          [outProtocol writeI64: [[__id_list objectAtIndex: i4] longLongValue]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"user_list_args("];
  [ms appendString: @"access_token:"];
  [ms appendFormat: @"\"%@\"", __access_token];
  [ms appendString: @",id_list:"];
  [ms appendFormat: @"%@", __id_list];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface User_list_result : NSObject <NSCoding> {
  NSArray * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSArray * success;
#endif

- (id) initWithSuccess: (NSArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSArray *) success;
- (void) setSuccess: (NSArray *) success;
- (BOOL) successIsSet;

@end

@implementation User_list_result

- (id) initWithSuccess: (NSArray *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (NSArray *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (NSArray *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size5;
          [inProtocol readListBeginReturningElementType: NULL size: &_size5];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size5];
          int _i6;
          for (_i6 = 0; _i6 < _size5; ++_i6)
          {
            UserBasic *_elem7 = [[UserBasic alloc] init];
            [_elem7 read: inProtocol];
            [fieldValue addObject: _elem7];
            [_elem7 release];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"User_list_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i9;
        for (i9 = 0; i9 < [__success count]; i9++)
        {
          [[__success objectAtIndex: i9] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"User_list_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface task_get_args : NSObject <NSCoding> {
  NSString * __access_token;
  int64_t __task_id;

  BOOL __access_token_isset;
  BOOL __task_id_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=access_token, setter=setAccess_token:) NSString * access_token;
@property (nonatomic, getter=task_id, setter=setTask_id:) int64_t task_id;
#endif

- (id) initWithAccess_token: (NSString *) access_token task_id: (int64_t) task_id;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSString *) access_token;
- (void) setAccess_token: (NSString *) access_token;
- (BOOL) access_tokenIsSet;

- (int64_t) task_id;
- (void) setTask_id: (int64_t) task_id;
- (BOOL) task_idIsSet;

@end

@implementation task_get_args

- (id) initWithAccess_token: (NSString *) access_token task_id: (int64_t) task_id
{
  self = [super init];
  __access_token = [access_token retain];
  __access_token_isset = YES;
  __task_id = task_id;
  __task_id_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"access_token"])
  {
    __access_token = [[decoder decodeObjectForKey: @"access_token"] retain];
    __access_token_isset = YES;
  }
  if ([decoder containsValueForKey: @"task_id"])
  {
    __task_id = [decoder decodeInt64ForKey: @"task_id"];
    __task_id_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__access_token_isset)
  {
    [encoder encodeObject: __access_token forKey: @"access_token"];
  }
  if (__task_id_isset)
  {
    [encoder encodeInt64: __task_id forKey: @"task_id"];
  }
}

- (void) dealloc
{
  [__access_token release];
  [super dealloc];
}

- (NSString *) access_token {
  return [[__access_token retain] autorelease];
}

- (void) setAccess_token: (NSString *) access_token {
  [access_token retain];
  [__access_token release];
  __access_token = access_token;
  __access_token_isset = YES;
}

- (BOOL) access_tokenIsSet {
  return __access_token_isset;
}

- (void) unsetAccess_token {
  [__access_token release];
  __access_token = nil;
  __access_token_isset = NO;
}

- (int64_t) task_id {
  return __task_id;
}

- (void) setTask_id: (int64_t) task_id {
  __task_id = task_id;
  __task_id_isset = YES;
}

- (BOOL) task_idIsSet {
  return __task_id_isset;
}

- (void) unsetTask_id {
  __task_id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAccess_token: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setTask_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"task_get_args"];
  if (__access_token_isset) {
    if (__access_token != nil) {
      [outProtocol writeFieldBeginWithName: @"access_token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __access_token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__task_id_isset) {
    [outProtocol writeFieldBeginWithName: @"task_id" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __task_id];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"task_get_args("];
  [ms appendString: @"access_token:"];
  [ms appendFormat: @"\"%@\"", __access_token];
  [ms appendString: @",task_id:"];
  [ms appendFormat: @"%qi", __task_id];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Task_get_result : NSObject <NSCoding> {
  Task * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) Task * success;
#endif

- (id) initWithSuccess: (Task *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (Task *) success;
- (void) setSuccess: (Task *) success;
- (BOOL) successIsSet;

@end

@implementation Task_get_result

- (id) initWithSuccess: (Task *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (Task *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (Task *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          Task *fieldValue = [[Task alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Task_get_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Task_get_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface task_set_args : NSObject <NSCoding> {
  NSString * __access_token;
  Task * __task;

  BOOL __access_token_isset;
  BOOL __task_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=access_token, setter=setAccess_token:) NSString * access_token;
@property (nonatomic, retain, getter=task, setter=setTask:) Task * task;
#endif

- (id) initWithAccess_token: (NSString *) access_token task: (Task *) task;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSString *) access_token;
- (void) setAccess_token: (NSString *) access_token;
- (BOOL) access_tokenIsSet;

- (Task *) task;
- (void) setTask: (Task *) task;
- (BOOL) taskIsSet;

@end

@implementation task_set_args

- (id) initWithAccess_token: (NSString *) access_token task: (Task *) task
{
  self = [super init];
  __access_token = [access_token retain];
  __access_token_isset = YES;
  __task = [task retain];
  __task_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"access_token"])
  {
    __access_token = [[decoder decodeObjectForKey: @"access_token"] retain];
    __access_token_isset = YES;
  }
  if ([decoder containsValueForKey: @"task"])
  {
    __task = [[decoder decodeObjectForKey: @"task"] retain];
    __task_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__access_token_isset)
  {
    [encoder encodeObject: __access_token forKey: @"access_token"];
  }
  if (__task_isset)
  {
    [encoder encodeObject: __task forKey: @"task"];
  }
}

- (void) dealloc
{
  [__access_token release];
  [__task release];
  [super dealloc];
}

- (NSString *) access_token {
  return [[__access_token retain] autorelease];
}

- (void) setAccess_token: (NSString *) access_token {
  [access_token retain];
  [__access_token release];
  __access_token = access_token;
  __access_token_isset = YES;
}

- (BOOL) access_tokenIsSet {
  return __access_token_isset;
}

- (void) unsetAccess_token {
  [__access_token release];
  __access_token = nil;
  __access_token_isset = NO;
}

- (Task *) task {
  return [[__task retain] autorelease];
}

- (void) setTask: (Task *) task {
  [task retain];
  [__task release];
  __task = task;
  __task_isset = YES;
}

- (BOOL) taskIsSet {
  return __task_isset;
}

- (void) unsetTask {
  [__task release];
  __task = nil;
  __task_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAccess_token: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          Task *fieldValue = [[Task alloc] init];
          [fieldValue read: inProtocol];
          [self setTask: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"task_set_args"];
  if (__access_token_isset) {
    if (__access_token != nil) {
      [outProtocol writeFieldBeginWithName: @"access_token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __access_token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__task_isset) {
    if (__task != nil) {
      [outProtocol writeFieldBeginWithName: @"task" type: TType_STRUCT fieldID: 2];
      [__task write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"task_set_args("];
  [ms appendString: @"access_token:"];
  [ms appendFormat: @"\"%@\"", __access_token];
  [ms appendString: @",task:"];
  [ms appendFormat: @"%@", __task];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Task_set_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (BOOL) success;
- (void) setSuccess: (BOOL) success;
- (BOOL) successIsSet;

@end

@implementation Task_set_result

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Task_set_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Task_set_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface task_new_args : NSObject <NSCoding> {
  NSString * __access_token;
  Task * __task;

  BOOL __access_token_isset;
  BOOL __task_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=access_token, setter=setAccess_token:) NSString * access_token;
@property (nonatomic, retain, getter=task, setter=setTask:) Task * task;
#endif

- (id) initWithAccess_token: (NSString *) access_token task: (Task *) task;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSString *) access_token;
- (void) setAccess_token: (NSString *) access_token;
- (BOOL) access_tokenIsSet;

- (Task *) task;
- (void) setTask: (Task *) task;
- (BOOL) taskIsSet;

@end

@implementation task_new_args

- (id) initWithAccess_token: (NSString *) access_token task: (Task *) task
{
  self = [super init];
  __access_token = [access_token retain];
  __access_token_isset = YES;
  __task = [task retain];
  __task_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"access_token"])
  {
    __access_token = [[decoder decodeObjectForKey: @"access_token"] retain];
    __access_token_isset = YES;
  }
  if ([decoder containsValueForKey: @"task"])
  {
    __task = [[decoder decodeObjectForKey: @"task"] retain];
    __task_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__access_token_isset)
  {
    [encoder encodeObject: __access_token forKey: @"access_token"];
  }
  if (__task_isset)
  {
    [encoder encodeObject: __task forKey: @"task"];
  }
}

- (void) dealloc
{
  [__access_token release];
  [__task release];
  [super dealloc];
}

- (NSString *) access_token {
  return [[__access_token retain] autorelease];
}

- (void) setAccess_token: (NSString *) access_token {
  [access_token retain];
  [__access_token release];
  __access_token = access_token;
  __access_token_isset = YES;
}

- (BOOL) access_tokenIsSet {
  return __access_token_isset;
}

- (void) unsetAccess_token {
  [__access_token release];
  __access_token = nil;
  __access_token_isset = NO;
}

- (Task *) task {
  return [[__task retain] autorelease];
}

- (void) setTask: (Task *) task {
  [task retain];
  [__task release];
  __task = task;
  __task_isset = YES;
}

- (BOOL) taskIsSet {
  return __task_isset;
}

- (void) unsetTask {
  [__task release];
  __task = nil;
  __task_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAccess_token: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          Task *fieldValue = [[Task alloc] init];
          [fieldValue read: inProtocol];
          [self setTask: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"task_new_args"];
  if (__access_token_isset) {
    if (__access_token != nil) {
      [outProtocol writeFieldBeginWithName: @"access_token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __access_token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__task_isset) {
    if (__task != nil) {
      [outProtocol writeFieldBeginWithName: @"task" type: TType_STRUCT fieldID: 2];
      [__task write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"task_new_args("];
  [ms appendString: @"access_token:"];
  [ms appendFormat: @"\"%@\"", __access_token];
  [ms appendString: @",task:"];
  [ms appendFormat: @"%@", __task];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Task_new_result : NSObject <NSCoding> {
  int64_t __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) int64_t success;
#endif

- (id) initWithSuccess: (int64_t) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (int64_t) success;
- (void) setSuccess: (int64_t) success;
- (BOOL) successIsSet;

@end

@implementation Task_new_result

- (id) initWithSuccess: (int64_t) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeInt64ForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeInt64: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc];
}

- (int64_t) success {
  return __success;
}

- (void) setSuccess: (int64_t) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Task_new_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_I64 fieldID: 0];
    [outProtocol writeI64: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Task_new_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%qi", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface task_apply_args : NSObject <NSCoding> {
  NSString * __access_token;
  int64_t __task_id;
  NSString * __postscript;

  BOOL __access_token_isset;
  BOOL __task_id_isset;
  BOOL __postscript_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=access_token, setter=setAccess_token:) NSString * access_token;
@property (nonatomic, getter=task_id, setter=setTask_id:) int64_t task_id;
@property (nonatomic, retain, getter=postscript, setter=setPostscript:) NSString * postscript;
#endif

- (id) initWithAccess_token: (NSString *) access_token task_id: (int64_t) task_id postscript: (NSString *) postscript;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSString *) access_token;
- (void) setAccess_token: (NSString *) access_token;
- (BOOL) access_tokenIsSet;

- (int64_t) task_id;
- (void) setTask_id: (int64_t) task_id;
- (BOOL) task_idIsSet;

- (NSString *) postscript;
- (void) setPostscript: (NSString *) postscript;
- (BOOL) postscriptIsSet;

@end

@implementation task_apply_args

- (id) initWithAccess_token: (NSString *) access_token task_id: (int64_t) task_id postscript: (NSString *) postscript
{
  self = [super init];
  __access_token = [access_token retain];
  __access_token_isset = YES;
  __task_id = task_id;
  __task_id_isset = YES;
  __postscript = [postscript retain];
  __postscript_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"access_token"])
  {
    __access_token = [[decoder decodeObjectForKey: @"access_token"] retain];
    __access_token_isset = YES;
  }
  if ([decoder containsValueForKey: @"task_id"])
  {
    __task_id = [decoder decodeInt64ForKey: @"task_id"];
    __task_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"postscript"])
  {
    __postscript = [[decoder decodeObjectForKey: @"postscript"] retain];
    __postscript_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__access_token_isset)
  {
    [encoder encodeObject: __access_token forKey: @"access_token"];
  }
  if (__task_id_isset)
  {
    [encoder encodeInt64: __task_id forKey: @"task_id"];
  }
  if (__postscript_isset)
  {
    [encoder encodeObject: __postscript forKey: @"postscript"];
  }
}

- (void) dealloc
{
  [__access_token release];
  [__postscript release];
  [super dealloc];
}

- (NSString *) access_token {
  return [[__access_token retain] autorelease];
}

- (void) setAccess_token: (NSString *) access_token {
  [access_token retain];
  [__access_token release];
  __access_token = access_token;
  __access_token_isset = YES;
}

- (BOOL) access_tokenIsSet {
  return __access_token_isset;
}

- (void) unsetAccess_token {
  [__access_token release];
  __access_token = nil;
  __access_token_isset = NO;
}

- (int64_t) task_id {
  return __task_id;
}

- (void) setTask_id: (int64_t) task_id {
  __task_id = task_id;
  __task_id_isset = YES;
}

- (BOOL) task_idIsSet {
  return __task_id_isset;
}

- (void) unsetTask_id {
  __task_id_isset = NO;
}

- (NSString *) postscript {
  return [[__postscript retain] autorelease];
}

- (void) setPostscript: (NSString *) postscript {
  [postscript retain];
  [__postscript release];
  __postscript = postscript;
  __postscript_isset = YES;
}

- (BOOL) postscriptIsSet {
  return __postscript_isset;
}

- (void) unsetPostscript {
  [__postscript release];
  __postscript = nil;
  __postscript_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAccess_token: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setTask_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPostscript: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"task_apply_args"];
  if (__access_token_isset) {
    if (__access_token != nil) {
      [outProtocol writeFieldBeginWithName: @"access_token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __access_token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__task_id_isset) {
    [outProtocol writeFieldBeginWithName: @"task_id" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __task_id];
    [outProtocol writeFieldEnd];
  }
  if (__postscript_isset) {
    if (__postscript != nil) {
      [outProtocol writeFieldBeginWithName: @"postscript" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __postscript];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"task_apply_args("];
  [ms appendString: @"access_token:"];
  [ms appendFormat: @"\"%@\"", __access_token];
  [ms appendString: @",task_id:"];
  [ms appendFormat: @"%qi", __task_id];
  [ms appendString: @",postscript:"];
  [ms appendFormat: @"\"%@\"", __postscript];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Task_apply_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (BOOL) success;
- (void) setSuccess: (BOOL) success;
- (BOOL) successIsSet;

@end

@implementation Task_apply_result

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Task_apply_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Task_apply_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface task_reject_invitation_args : NSObject <NSCoding> {
  NSString * __access_token;
  int64_t __task_id;

  BOOL __access_token_isset;
  BOOL __task_id_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=access_token, setter=setAccess_token:) NSString * access_token;
@property (nonatomic, getter=task_id, setter=setTask_id:) int64_t task_id;
#endif

- (id) initWithAccess_token: (NSString *) access_token task_id: (int64_t) task_id;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSString *) access_token;
- (void) setAccess_token: (NSString *) access_token;
- (BOOL) access_tokenIsSet;

- (int64_t) task_id;
- (void) setTask_id: (int64_t) task_id;
- (BOOL) task_idIsSet;

@end

@implementation task_reject_invitation_args

- (id) initWithAccess_token: (NSString *) access_token task_id: (int64_t) task_id
{
  self = [super init];
  __access_token = [access_token retain];
  __access_token_isset = YES;
  __task_id = task_id;
  __task_id_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"access_token"])
  {
    __access_token = [[decoder decodeObjectForKey: @"access_token"] retain];
    __access_token_isset = YES;
  }
  if ([decoder containsValueForKey: @"task_id"])
  {
    __task_id = [decoder decodeInt64ForKey: @"task_id"];
    __task_id_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__access_token_isset)
  {
    [encoder encodeObject: __access_token forKey: @"access_token"];
  }
  if (__task_id_isset)
  {
    [encoder encodeInt64: __task_id forKey: @"task_id"];
  }
}

- (void) dealloc
{
  [__access_token release];
  [super dealloc];
}

- (NSString *) access_token {
  return [[__access_token retain] autorelease];
}

- (void) setAccess_token: (NSString *) access_token {
  [access_token retain];
  [__access_token release];
  __access_token = access_token;
  __access_token_isset = YES;
}

- (BOOL) access_tokenIsSet {
  return __access_token_isset;
}

- (void) unsetAccess_token {
  [__access_token release];
  __access_token = nil;
  __access_token_isset = NO;
}

- (int64_t) task_id {
  return __task_id;
}

- (void) setTask_id: (int64_t) task_id {
  __task_id = task_id;
  __task_id_isset = YES;
}

- (BOOL) task_idIsSet {
  return __task_id_isset;
}

- (void) unsetTask_id {
  __task_id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAccess_token: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setTask_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"task_reject_invitation_args"];
  if (__access_token_isset) {
    if (__access_token != nil) {
      [outProtocol writeFieldBeginWithName: @"access_token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __access_token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__task_id_isset) {
    [outProtocol writeFieldBeginWithName: @"task_id" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __task_id];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"task_reject_invitation_args("];
  [ms appendString: @"access_token:"];
  [ms appendFormat: @"\"%@\"", __access_token];
  [ms appendString: @",task_id:"];
  [ms appendFormat: @"%qi", __task_id];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Task_reject_invitation_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (BOOL) success;
- (void) setSuccess: (BOOL) success;
- (BOOL) successIsSet;

@end

@implementation Task_reject_invitation_result

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Task_reject_invitation_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Task_reject_invitation_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface task_accept_invitation_args : NSObject <NSCoding> {
  NSString * __access_token;
  int64_t __id;

  BOOL __access_token_isset;
  BOOL __id_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=access_token, setter=setAccess_token:) NSString * access_token;
@property (nonatomic, getter=id, setter=setId:) int64_t id;
#endif

- (id) initWithAccess_token: (NSString *) access_token id: (int64_t) id;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSString *) access_token;
- (void) setAccess_token: (NSString *) access_token;
- (BOOL) access_tokenIsSet;

- (int64_t) id;
- (void) setId: (int64_t) id;
- (BOOL) idIsSet;

@end

@implementation task_accept_invitation_args

- (id) initWithAccess_token: (NSString *) access_token id: (int64_t) id
{
  self = [super init];
  __access_token = [access_token retain];
  __access_token_isset = YES;
  __id = id;
  __id_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"access_token"])
  {
    __access_token = [[decoder decodeObjectForKey: @"access_token"] retain];
    __access_token_isset = YES;
  }
  if ([decoder containsValueForKey: @"id"])
  {
    __id = [decoder decodeInt64ForKey: @"id"];
    __id_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__access_token_isset)
  {
    [encoder encodeObject: __access_token forKey: @"access_token"];
  }
  if (__id_isset)
  {
    [encoder encodeInt64: __id forKey: @"id"];
  }
}

- (void) dealloc
{
  [__access_token release];
  [super dealloc];
}

- (NSString *) access_token {
  return [[__access_token retain] autorelease];
}

- (void) setAccess_token: (NSString *) access_token {
  [access_token retain];
  [__access_token release];
  __access_token = access_token;
  __access_token_isset = YES;
}

- (BOOL) access_tokenIsSet {
  return __access_token_isset;
}

- (void) unsetAccess_token {
  [__access_token release];
  __access_token = nil;
  __access_token_isset = NO;
}

- (int64_t) id {
  return __id;
}

- (void) setId: (int64_t) id {
  __id = id;
  __id_isset = YES;
}

- (BOOL) idIsSet {
  return __id_isset;
}

- (void) unsetId {
  __id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAccess_token: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setId: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"task_accept_invitation_args"];
  if (__access_token_isset) {
    if (__access_token != nil) {
      [outProtocol writeFieldBeginWithName: @"access_token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __access_token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__id_isset) {
    [outProtocol writeFieldBeginWithName: @"id" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __id];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"task_accept_invitation_args("];
  [ms appendString: @"access_token:"];
  [ms appendFormat: @"\"%@\"", __access_token];
  [ms appendString: @",id:"];
  [ms appendFormat: @"%qi", __id];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Task_accept_invitation_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (BOOL) success;
- (void) setSuccess: (BOOL) success;
- (BOOL) successIsSet;

@end

@implementation Task_accept_invitation_result

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Task_accept_invitation_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Task_accept_invitation_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface task_accept_user_args : NSObject <NSCoding> {
  NSString * __access_token;
  int64_t __task_id;
  int64_t __user_id;

  BOOL __access_token_isset;
  BOOL __task_id_isset;
  BOOL __user_id_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=access_token, setter=setAccess_token:) NSString * access_token;
@property (nonatomic, getter=task_id, setter=setTask_id:) int64_t task_id;
@property (nonatomic, getter=user_id, setter=setUser_id:) int64_t user_id;
#endif

- (id) initWithAccess_token: (NSString *) access_token task_id: (int64_t) task_id user_id: (int64_t) user_id;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSString *) access_token;
- (void) setAccess_token: (NSString *) access_token;
- (BOOL) access_tokenIsSet;

- (int64_t) task_id;
- (void) setTask_id: (int64_t) task_id;
- (BOOL) task_idIsSet;

- (int64_t) user_id;
- (void) setUser_id: (int64_t) user_id;
- (BOOL) user_idIsSet;

@end

@implementation task_accept_user_args

- (id) initWithAccess_token: (NSString *) access_token task_id: (int64_t) task_id user_id: (int64_t) user_id
{
  self = [super init];
  __access_token = [access_token retain];
  __access_token_isset = YES;
  __task_id = task_id;
  __task_id_isset = YES;
  __user_id = user_id;
  __user_id_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"access_token"])
  {
    __access_token = [[decoder decodeObjectForKey: @"access_token"] retain];
    __access_token_isset = YES;
  }
  if ([decoder containsValueForKey: @"task_id"])
  {
    __task_id = [decoder decodeInt64ForKey: @"task_id"];
    __task_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"user_id"])
  {
    __user_id = [decoder decodeInt64ForKey: @"user_id"];
    __user_id_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__access_token_isset)
  {
    [encoder encodeObject: __access_token forKey: @"access_token"];
  }
  if (__task_id_isset)
  {
    [encoder encodeInt64: __task_id forKey: @"task_id"];
  }
  if (__user_id_isset)
  {
    [encoder encodeInt64: __user_id forKey: @"user_id"];
  }
}

- (void) dealloc
{
  [__access_token release];
  [super dealloc];
}

- (NSString *) access_token {
  return [[__access_token retain] autorelease];
}

- (void) setAccess_token: (NSString *) access_token {
  [access_token retain];
  [__access_token release];
  __access_token = access_token;
  __access_token_isset = YES;
}

- (BOOL) access_tokenIsSet {
  return __access_token_isset;
}

- (void) unsetAccess_token {
  [__access_token release];
  __access_token = nil;
  __access_token_isset = NO;
}

- (int64_t) task_id {
  return __task_id;
}

- (void) setTask_id: (int64_t) task_id {
  __task_id = task_id;
  __task_id_isset = YES;
}

- (BOOL) task_idIsSet {
  return __task_id_isset;
}

- (void) unsetTask_id {
  __task_id_isset = NO;
}

- (int64_t) user_id {
  return __user_id;
}

- (void) setUser_id: (int64_t) user_id {
  __user_id = user_id;
  __user_id_isset = YES;
}

- (BOOL) user_idIsSet {
  return __user_id_isset;
}

- (void) unsetUser_id {
  __user_id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAccess_token: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setTask_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setUser_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"task_accept_user_args"];
  if (__access_token_isset) {
    if (__access_token != nil) {
      [outProtocol writeFieldBeginWithName: @"access_token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __access_token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__task_id_isset) {
    [outProtocol writeFieldBeginWithName: @"task_id" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __task_id];
    [outProtocol writeFieldEnd];
  }
  if (__user_id_isset) {
    [outProtocol writeFieldBeginWithName: @"user_id" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __user_id];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"task_accept_user_args("];
  [ms appendString: @"access_token:"];
  [ms appendFormat: @"\"%@\"", __access_token];
  [ms appendString: @",task_id:"];
  [ms appendFormat: @"%qi", __task_id];
  [ms appendString: @",user_id:"];
  [ms appendFormat: @"%qi", __user_id];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Task_accept_user_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (BOOL) success;
- (void) setSuccess: (BOOL) success;
- (BOOL) successIsSet;

@end

@implementation Task_accept_user_result

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Task_accept_user_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Task_accept_user_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface task_reject_user_args : NSObject <NSCoding> {
  NSString * __access_token;
  int64_t __task_id;
  int64_t __user_id;
  NSString * __postscript;

  BOOL __access_token_isset;
  BOOL __task_id_isset;
  BOOL __user_id_isset;
  BOOL __postscript_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=access_token, setter=setAccess_token:) NSString * access_token;
@property (nonatomic, getter=task_id, setter=setTask_id:) int64_t task_id;
@property (nonatomic, getter=user_id, setter=setUser_id:) int64_t user_id;
@property (nonatomic, retain, getter=postscript, setter=setPostscript:) NSString * postscript;
#endif

- (id) initWithAccess_token: (NSString *) access_token task_id: (int64_t) task_id user_id: (int64_t) user_id postscript: (NSString *) postscript;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSString *) access_token;
- (void) setAccess_token: (NSString *) access_token;
- (BOOL) access_tokenIsSet;

- (int64_t) task_id;
- (void) setTask_id: (int64_t) task_id;
- (BOOL) task_idIsSet;

- (int64_t) user_id;
- (void) setUser_id: (int64_t) user_id;
- (BOOL) user_idIsSet;

- (NSString *) postscript;
- (void) setPostscript: (NSString *) postscript;
- (BOOL) postscriptIsSet;

@end

@implementation task_reject_user_args

- (id) initWithAccess_token: (NSString *) access_token task_id: (int64_t) task_id user_id: (int64_t) user_id postscript: (NSString *) postscript
{
  self = [super init];
  __access_token = [access_token retain];
  __access_token_isset = YES;
  __task_id = task_id;
  __task_id_isset = YES;
  __user_id = user_id;
  __user_id_isset = YES;
  __postscript = [postscript retain];
  __postscript_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"access_token"])
  {
    __access_token = [[decoder decodeObjectForKey: @"access_token"] retain];
    __access_token_isset = YES;
  }
  if ([decoder containsValueForKey: @"task_id"])
  {
    __task_id = [decoder decodeInt64ForKey: @"task_id"];
    __task_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"user_id"])
  {
    __user_id = [decoder decodeInt64ForKey: @"user_id"];
    __user_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"postscript"])
  {
    __postscript = [[decoder decodeObjectForKey: @"postscript"] retain];
    __postscript_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__access_token_isset)
  {
    [encoder encodeObject: __access_token forKey: @"access_token"];
  }
  if (__task_id_isset)
  {
    [encoder encodeInt64: __task_id forKey: @"task_id"];
  }
  if (__user_id_isset)
  {
    [encoder encodeInt64: __user_id forKey: @"user_id"];
  }
  if (__postscript_isset)
  {
    [encoder encodeObject: __postscript forKey: @"postscript"];
  }
}

- (void) dealloc
{
  [__access_token release];
  [__postscript release];
  [super dealloc];
}

- (NSString *) access_token {
  return [[__access_token retain] autorelease];
}

- (void) setAccess_token: (NSString *) access_token {
  [access_token retain];
  [__access_token release];
  __access_token = access_token;
  __access_token_isset = YES;
}

- (BOOL) access_tokenIsSet {
  return __access_token_isset;
}

- (void) unsetAccess_token {
  [__access_token release];
  __access_token = nil;
  __access_token_isset = NO;
}

- (int64_t) task_id {
  return __task_id;
}

- (void) setTask_id: (int64_t) task_id {
  __task_id = task_id;
  __task_id_isset = YES;
}

- (BOOL) task_idIsSet {
  return __task_id_isset;
}

- (void) unsetTask_id {
  __task_id_isset = NO;
}

- (int64_t) user_id {
  return __user_id;
}

- (void) setUser_id: (int64_t) user_id {
  __user_id = user_id;
  __user_id_isset = YES;
}

- (BOOL) user_idIsSet {
  return __user_id_isset;
}

- (void) unsetUser_id {
  __user_id_isset = NO;
}

- (NSString *) postscript {
  return [[__postscript retain] autorelease];
}

- (void) setPostscript: (NSString *) postscript {
  [postscript retain];
  [__postscript release];
  __postscript = postscript;
  __postscript_isset = YES;
}

- (BOOL) postscriptIsSet {
  return __postscript_isset;
}

- (void) unsetPostscript {
  [__postscript release];
  __postscript = nil;
  __postscript_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAccess_token: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setTask_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setUser_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPostscript: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"task_reject_user_args"];
  if (__access_token_isset) {
    if (__access_token != nil) {
      [outProtocol writeFieldBeginWithName: @"access_token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __access_token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__task_id_isset) {
    [outProtocol writeFieldBeginWithName: @"task_id" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __task_id];
    [outProtocol writeFieldEnd];
  }
  if (__user_id_isset) {
    [outProtocol writeFieldBeginWithName: @"user_id" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __user_id];
    [outProtocol writeFieldEnd];
  }
  if (__postscript_isset) {
    if (__postscript != nil) {
      [outProtocol writeFieldBeginWithName: @"postscript" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __postscript];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"task_reject_user_args("];
  [ms appendString: @"access_token:"];
  [ms appendFormat: @"\"%@\"", __access_token];
  [ms appendString: @",task_id:"];
  [ms appendFormat: @"%qi", __task_id];
  [ms appendString: @",user_id:"];
  [ms appendFormat: @"%qi", __user_id];
  [ms appendString: @",postscript:"];
  [ms appendFormat: @"\"%@\"", __postscript];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Task_reject_user_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (BOOL) success;
- (void) setSuccess: (BOOL) success;
- (BOOL) successIsSet;

@end

@implementation Task_reject_user_result

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Task_reject_user_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Task_reject_user_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface msg_list_args : NSObject <NSCoding> {
  NSString * __access_token;
  int __type;
  int64_t __last_id;
  int64_t __num;

  BOOL __access_token_isset;
  BOOL __type_isset;
  BOOL __last_id_isset;
  BOOL __num_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=access_token, setter=setAccess_token:) NSString * access_token;
@property (nonatomic, getter=type, setter=setType:) int type;
@property (nonatomic, getter=last_id, setter=setLast_id:) int64_t last_id;
@property (nonatomic, getter=num, setter=setNum:) int64_t num;
#endif

- (id) initWithAccess_token: (NSString *) access_token type: (int) type last_id: (int64_t) last_id num: (int64_t) num;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSString *) access_token;
- (void) setAccess_token: (NSString *) access_token;
- (BOOL) access_tokenIsSet;

- (int) type;
- (void) setType: (int) type;
- (BOOL) typeIsSet;

- (int64_t) last_id;
- (void) setLast_id: (int64_t) last_id;
- (BOOL) last_idIsSet;

- (int64_t) num;
- (void) setNum: (int64_t) num;
- (BOOL) numIsSet;

@end

@implementation msg_list_args

- (id) initWithAccess_token: (NSString *) access_token type: (int) type last_id: (int64_t) last_id num: (int64_t) num
{
  self = [super init];
  __access_token = [access_token retain];
  __access_token_isset = YES;
  __type = type;
  __type_isset = YES;
  __last_id = last_id;
  __last_id_isset = YES;
  __num = num;
  __num_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"access_token"])
  {
    __access_token = [[decoder decodeObjectForKey: @"access_token"] retain];
    __access_token_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [decoder decodeIntForKey: @"type"];
    __type_isset = YES;
  }
  if ([decoder containsValueForKey: @"last_id"])
  {
    __last_id = [decoder decodeInt64ForKey: @"last_id"];
    __last_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"num"])
  {
    __num = [decoder decodeInt64ForKey: @"num"];
    __num_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__access_token_isset)
  {
    [encoder encodeObject: __access_token forKey: @"access_token"];
  }
  if (__type_isset)
  {
    [encoder encodeInt: __type forKey: @"type"];
  }
  if (__last_id_isset)
  {
    [encoder encodeInt64: __last_id forKey: @"last_id"];
  }
  if (__num_isset)
  {
    [encoder encodeInt64: __num forKey: @"num"];
  }
}

- (void) dealloc
{
  [__access_token release];
  [super dealloc];
}

- (NSString *) access_token {
  return [[__access_token retain] autorelease];
}

- (void) setAccess_token: (NSString *) access_token {
  [access_token retain];
  [__access_token release];
  __access_token = access_token;
  __access_token_isset = YES;
}

- (BOOL) access_tokenIsSet {
  return __access_token_isset;
}

- (void) unsetAccess_token {
  [__access_token release];
  __access_token = nil;
  __access_token_isset = NO;
}

- (int) type {
  return __type;
}

- (void) setType: (int) type {
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  __type_isset = NO;
}

- (int64_t) last_id {
  return __last_id;
}

- (void) setLast_id: (int64_t) last_id {
  __last_id = last_id;
  __last_id_isset = YES;
}

- (BOOL) last_idIsSet {
  return __last_id_isset;
}

- (void) unsetLast_id {
  __last_id_isset = NO;
}

- (int64_t) num {
  return __num;
}

- (void) setNum: (int64_t) num {
  __num = num;
  __num_isset = YES;
}

- (BOOL) numIsSet {
  return __num_isset;
}

- (void) unsetNum {
  __num_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAccess_token: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setLast_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setNum: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"msg_list_args"];
  if (__access_token_isset) {
    if (__access_token != nil) {
      [outProtocol writeFieldBeginWithName: @"access_token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __access_token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__type_isset) {
    [outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __type];
    [outProtocol writeFieldEnd];
  }
  if (__last_id_isset) {
    [outProtocol writeFieldBeginWithName: @"last_id" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __last_id];
    [outProtocol writeFieldEnd];
  }
  if (__num_isset) {
    [outProtocol writeFieldBeginWithName: @"num" type: TType_I64 fieldID: 4];
    [outProtocol writeI64: __num];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"msg_list_args("];
  [ms appendString: @"access_token:"];
  [ms appendFormat: @"\"%@\"", __access_token];
  [ms appendString: @",type:"];
  [ms appendFormat: @"%i", __type];
  [ms appendString: @",last_id:"];
  [ms appendFormat: @"%qi", __last_id];
  [ms appendString: @",num:"];
  [ms appendFormat: @"%qi", __num];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Msg_list_result : NSObject <NSCoding> {
  NSArray * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSArray * success;
#endif

- (id) initWithSuccess: (NSArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSArray *) success;
- (void) setSuccess: (NSArray *) success;
- (BOOL) successIsSet;

@end

@implementation Msg_list_result

- (id) initWithSuccess: (NSArray *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (NSArray *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (NSArray *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size10;
          [inProtocol readListBeginReturningElementType: NULL size: &_size10];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size10];
          int _i11;
          for (_i11 = 0; _i11 < _size10; ++_i11)
          {
            Msg *_elem12 = [[Msg alloc] init];
            [_elem12 read: inProtocol];
            [fieldValue addObject: _elem12];
            [_elem12 release];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Msg_list_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i14;
        for (i14 = 0; i14 < [__success count]; i14++)
        {
          [[__success objectAtIndex: i14] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Msg_list_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface msg_send_args : NSObject <NSCoding> {
  NSString * __access_token;
  int64_t __send_to;
  Msg * __msg;

  BOOL __access_token_isset;
  BOOL __send_to_isset;
  BOOL __msg_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=access_token, setter=setAccess_token:) NSString * access_token;
@property (nonatomic, getter=send_to, setter=setSend_to:) int64_t send_to;
@property (nonatomic, retain, getter=msg, setter=setMsg:) Msg * msg;
#endif

- (id) initWithAccess_token: (NSString *) access_token send_to: (int64_t) send_to msg: (Msg *) msg;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSString *) access_token;
- (void) setAccess_token: (NSString *) access_token;
- (BOOL) access_tokenIsSet;

- (int64_t) send_to;
- (void) setSend_to: (int64_t) send_to;
- (BOOL) send_toIsSet;

- (Msg *) msg;
- (void) setMsg: (Msg *) msg;
- (BOOL) msgIsSet;

@end

@implementation msg_send_args

- (id) initWithAccess_token: (NSString *) access_token send_to: (int64_t) send_to msg: (Msg *) msg
{
  self = [super init];
  __access_token = [access_token retain];
  __access_token_isset = YES;
  __send_to = send_to;
  __send_to_isset = YES;
  __msg = [msg retain];
  __msg_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"access_token"])
  {
    __access_token = [[decoder decodeObjectForKey: @"access_token"] retain];
    __access_token_isset = YES;
  }
  if ([decoder containsValueForKey: @"send_to"])
  {
    __send_to = [decoder decodeInt64ForKey: @"send_to"];
    __send_to_isset = YES;
  }
  if ([decoder containsValueForKey: @"msg"])
  {
    __msg = [[decoder decodeObjectForKey: @"msg"] retain];
    __msg_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__access_token_isset)
  {
    [encoder encodeObject: __access_token forKey: @"access_token"];
  }
  if (__send_to_isset)
  {
    [encoder encodeInt64: __send_to forKey: @"send_to"];
  }
  if (__msg_isset)
  {
    [encoder encodeObject: __msg forKey: @"msg"];
  }
}

- (void) dealloc
{
  [__access_token release];
  [__msg release];
  [super dealloc];
}

- (NSString *) access_token {
  return [[__access_token retain] autorelease];
}

- (void) setAccess_token: (NSString *) access_token {
  [access_token retain];
  [__access_token release];
  __access_token = access_token;
  __access_token_isset = YES;
}

- (BOOL) access_tokenIsSet {
  return __access_token_isset;
}

- (void) unsetAccess_token {
  [__access_token release];
  __access_token = nil;
  __access_token_isset = NO;
}

- (int64_t) send_to {
  return __send_to;
}

- (void) setSend_to: (int64_t) send_to {
  __send_to = send_to;
  __send_to_isset = YES;
}

- (BOOL) send_toIsSet {
  return __send_to_isset;
}

- (void) unsetSend_to {
  __send_to_isset = NO;
}

- (Msg *) msg {
  return [[__msg retain] autorelease];
}

- (void) setMsg: (Msg *) msg {
  [msg retain];
  [__msg release];
  __msg = msg;
  __msg_isset = YES;
}

- (BOOL) msgIsSet {
  return __msg_isset;
}

- (void) unsetMsg {
  [__msg release];
  __msg = nil;
  __msg_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAccess_token: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setSend_to: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRUCT) {
          Msg *fieldValue = [[Msg alloc] init];
          [fieldValue read: inProtocol];
          [self setMsg: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"msg_send_args"];
  if (__access_token_isset) {
    if (__access_token != nil) {
      [outProtocol writeFieldBeginWithName: @"access_token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __access_token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__send_to_isset) {
    [outProtocol writeFieldBeginWithName: @"send_to" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __send_to];
    [outProtocol writeFieldEnd];
  }
  if (__msg_isset) {
    if (__msg != nil) {
      [outProtocol writeFieldBeginWithName: @"msg" type: TType_STRUCT fieldID: 3];
      [__msg write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"msg_send_args("];
  [ms appendString: @"access_token:"];
  [ms appendFormat: @"\"%@\"", __access_token];
  [ms appendString: @",send_to:"];
  [ms appendFormat: @"%qi", __send_to];
  [ms appendString: @",msg:"];
  [ms appendFormat: @"%@", __msg];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Msg_send_result : NSObject <NSCoding> {
}


- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation Msg_send_result

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Msg_send_result"];

  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Msg_send_result("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface feed_args : NSObject <NSCoding> {
  NSString * __access_token;
  int64_t __last_id;
  int64_t __num;

  BOOL __access_token_isset;
  BOOL __last_id_isset;
  BOOL __num_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=access_token, setter=setAccess_token:) NSString * access_token;
@property (nonatomic, getter=last_id, setter=setLast_id:) int64_t last_id;
@property (nonatomic, getter=num, setter=setNum:) int64_t num;
#endif

- (id) initWithAccess_token: (NSString *) access_token last_id: (int64_t) last_id num: (int64_t) num;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSString *) access_token;
- (void) setAccess_token: (NSString *) access_token;
- (BOOL) access_tokenIsSet;

- (int64_t) last_id;
- (void) setLast_id: (int64_t) last_id;
- (BOOL) last_idIsSet;

- (int64_t) num;
- (void) setNum: (int64_t) num;
- (BOOL) numIsSet;

@end

@implementation feed_args

- (id) initWithAccess_token: (NSString *) access_token last_id: (int64_t) last_id num: (int64_t) num
{
  self = [super init];
  __access_token = [access_token retain];
  __access_token_isset = YES;
  __last_id = last_id;
  __last_id_isset = YES;
  __num = num;
  __num_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"access_token"])
  {
    __access_token = [[decoder decodeObjectForKey: @"access_token"] retain];
    __access_token_isset = YES;
  }
  if ([decoder containsValueForKey: @"last_id"])
  {
    __last_id = [decoder decodeInt64ForKey: @"last_id"];
    __last_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"num"])
  {
    __num = [decoder decodeInt64ForKey: @"num"];
    __num_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__access_token_isset)
  {
    [encoder encodeObject: __access_token forKey: @"access_token"];
  }
  if (__last_id_isset)
  {
    [encoder encodeInt64: __last_id forKey: @"last_id"];
  }
  if (__num_isset)
  {
    [encoder encodeInt64: __num forKey: @"num"];
  }
}

- (void) dealloc
{
  [__access_token release];
  [super dealloc];
}

- (NSString *) access_token {
  return [[__access_token retain] autorelease];
}

- (void) setAccess_token: (NSString *) access_token {
  [access_token retain];
  [__access_token release];
  __access_token = access_token;
  __access_token_isset = YES;
}

- (BOOL) access_tokenIsSet {
  return __access_token_isset;
}

- (void) unsetAccess_token {
  [__access_token release];
  __access_token = nil;
  __access_token_isset = NO;
}

- (int64_t) last_id {
  return __last_id;
}

- (void) setLast_id: (int64_t) last_id {
  __last_id = last_id;
  __last_id_isset = YES;
}

- (BOOL) last_idIsSet {
  return __last_id_isset;
}

- (void) unsetLast_id {
  __last_id_isset = NO;
}

- (int64_t) num {
  return __num;
}

- (void) setNum: (int64_t) num {
  __num = num;
  __num_isset = YES;
}

- (BOOL) numIsSet {
  return __num_isset;
}

- (void) unsetNum {
  __num_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAccess_token: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setLast_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setNum: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"feed_args"];
  if (__access_token_isset) {
    if (__access_token != nil) {
      [outProtocol writeFieldBeginWithName: @"access_token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __access_token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__last_id_isset) {
    [outProtocol writeFieldBeginWithName: @"last_id" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __last_id];
    [outProtocol writeFieldEnd];
  }
  if (__num_isset) {
    [outProtocol writeFieldBeginWithName: @"num" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __num];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"feed_args("];
  [ms appendString: @"access_token:"];
  [ms appendFormat: @"\"%@\"", __access_token];
  [ms appendString: @",last_id:"];
  [ms appendFormat: @"%qi", __last_id];
  [ms appendString: @",num:"];
  [ms appendFormat: @"%qi", __num];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Feed_result : NSObject <NSCoding> {
  NSArray * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSArray * success;
#endif

- (id) initWithSuccess: (NSArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSArray *) success;
- (void) setSuccess: (NSArray *) success;
- (BOOL) successIsSet;

@end

@implementation Feed_result

- (id) initWithSuccess: (NSArray *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (NSArray *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (NSArray *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size15;
          [inProtocol readListBeginReturningElementType: NULL size: &_size15];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size15];
          int _i16;
          for (_i16 = 0; _i16 < _size15; ++_i16)
          {
            FeedMsg *_elem17 = [[FeedMsg alloc] init];
            [_elem17 read: inProtocol];
            [fieldValue addObject: _elem17];
            [_elem17 release];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Feed_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i19;
        for (i19 = 0; i19 < [__success count]; i19++)
        {
          [[__success objectAtIndex: i19] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Feed_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface summary_args : NSObject <NSCoding> {
  NSString * __access_token;

  BOOL __access_token_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=access_token, setter=setAccess_token:) NSString * access_token;
#endif

- (id) initWithAccess_token: (NSString *) access_token;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSString *) access_token;
- (void) setAccess_token: (NSString *) access_token;
- (BOOL) access_tokenIsSet;

@end

@implementation summary_args

- (id) initWithAccess_token: (NSString *) access_token
{
  self = [super init];
  __access_token = [access_token retain];
  __access_token_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"access_token"])
  {
    __access_token = [[decoder decodeObjectForKey: @"access_token"] retain];
    __access_token_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__access_token_isset)
  {
    [encoder encodeObject: __access_token forKey: @"access_token"];
  }
}

- (void) dealloc
{
  [__access_token release];
  [super dealloc];
}

- (NSString *) access_token {
  return [[__access_token retain] autorelease];
}

- (void) setAccess_token: (NSString *) access_token {
  [access_token retain];
  [__access_token release];
  __access_token = access_token;
  __access_token_isset = YES;
}

- (BOOL) access_tokenIsSet {
  return __access_token_isset;
}

- (void) unsetAccess_token {
  [__access_token release];
  __access_token = nil;
  __access_token_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAccess_token: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"summary_args"];
  if (__access_token_isset) {
    if (__access_token != nil) {
      [outProtocol writeFieldBeginWithName: @"access_token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __access_token];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"summary_args("];
  [ms appendString: @"access_token:"];
  [ms appendFormat: @"\"%@\"", __access_token];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Summary_result : NSObject <NSCoding> {
  Summary * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) Summary * success;
#endif

- (id) initWithSuccess: (Summary *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (Summary *) success;
- (void) setSuccess: (Summary *) success;
- (BOOL) successIsSet;

@end

@implementation Summary_result

- (id) initWithSuccess: (Summary *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (Summary *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (Summary *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          Summary *fieldValue = [[Summary alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Summary_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Summary_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation SnsClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  [super init];
  inProtocol = [anInProtocol retain];
  outProtocol = [anOutProtocol retain];
  return self;
}

- (void) dealloc
{
  [inProtocol release];
  [outProtocol release];
  [super dealloc];
}

- (void) send_login: (AuthRequest *) auth
{
  [outProtocol writeMessageBeginWithName: @"login" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"login_args"];
  if (auth != nil)  {
    [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
    [auth write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (AuthResponse *) recv_login
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Login_result * result = [[[Login_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"login failed: unknown result"];
}

- (AuthResponse *) login: (AuthRequest *) auth
{
  [self send_login: auth];
  return [self recv_login];
}

- (void) send_logout: (NSString *) access_token
{
  [outProtocol writeMessageBeginWithName: @"logout" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"logout_args"];
  if (access_token != nil)  {
    [outProtocol writeFieldBeginWithName: @"access_token" type: TType_STRING fieldID: 1];
    [outProtocol writeString: access_token];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_logout
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Logout_result * result = [[[Logout_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"logout failed: unknown result"];
}

- (BOOL) logout: (NSString *) access_token
{
  [self send_logout: access_token];
  return [self recv_logout];
}

- (void) send_user_get: (NSString *) access_token : (int64_t) user_id
{
  [outProtocol writeMessageBeginWithName: @"user_get" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"user_get_args"];
  if (access_token != nil)  {
    [outProtocol writeFieldBeginWithName: @"access_token" type: TType_STRING fieldID: 1];
    [outProtocol writeString: access_token];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"user_id" type: TType_I64 fieldID: 2];
  [outProtocol writeI64: user_id];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (User *) recv_user_get
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  User_get_result * result = [[[User_get_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"user_get failed: unknown result"];
}

- (User *) user_get: (NSString *) access_token : (int64_t) user_id
{
  [self send_user_get: access_token : user_id];
  return [self recv_user_get];
}

- (void) send_user_set: (NSString *) access_token : (User *) user
{
  [outProtocol writeMessageBeginWithName: @"user_set" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"user_set_args"];
  if (access_token != nil)  {
    [outProtocol writeFieldBeginWithName: @"access_token" type: TType_STRING fieldID: 1];
    [outProtocol writeString: access_token];
    [outProtocol writeFieldEnd];
  }
  if (user != nil)  {
    [outProtocol writeFieldBeginWithName: @"user" type: TType_STRUCT fieldID: 2];
    [user write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_user_set
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  User_set_result * result = [[[User_set_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"user_set failed: unknown result"];
}

- (BOOL) user_set: (NSString *) access_token : (User *) user
{
  [self send_user_set: access_token : user];
  return [self recv_user_set];
}

- (void) send_user_list: (NSString *) access_token : (NSArray *) id_list
{
  [outProtocol writeMessageBeginWithName: @"user_list" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"user_list_args"];
  if (access_token != nil)  {
    [outProtocol writeFieldBeginWithName: @"access_token" type: TType_STRING fieldID: 1];
    [outProtocol writeString: access_token];
    [outProtocol writeFieldEnd];
  }
  if (id_list != nil)  {
    [outProtocol writeFieldBeginWithName: @"id_list" type: TType_LIST fieldID: 2];
    {
      [outProtocol writeListBeginWithElementType: TType_I64 size: [id_list count]];
      int i21;
      for (i21 = 0; i21 < [id_list count]; i21++)
      {
        [outProtocol writeI64: [[id_list objectAtIndex: i21] longLongValue]];
      }
      [outProtocol writeListEnd];
    }
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSArray *) recv_user_list
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  User_list_result * result = [[[User_list_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"user_list failed: unknown result"];
}

- (NSArray *) user_list: (NSString *) access_token : (NSArray *) id_list
{
  [self send_user_list: access_token : id_list];
  return [self recv_user_list];
}

- (void) send_task_get: (NSString *) access_token : (int64_t) task_id
{
  [outProtocol writeMessageBeginWithName: @"task_get" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"task_get_args"];
  if (access_token != nil)  {
    [outProtocol writeFieldBeginWithName: @"access_token" type: TType_STRING fieldID: 1];
    [outProtocol writeString: access_token];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"task_id" type: TType_I64 fieldID: 2];
  [outProtocol writeI64: task_id];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (Task *) recv_task_get
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Task_get_result * result = [[[Task_get_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"task_get failed: unknown result"];
}

- (Task *) task_get: (NSString *) access_token : (int64_t) task_id
{
  [self send_task_get: access_token : task_id];
  return [self recv_task_get];
}

- (void) send_task_set: (NSString *) access_token : (Task *) task
{
  [outProtocol writeMessageBeginWithName: @"task_set" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"task_set_args"];
  if (access_token != nil)  {
    [outProtocol writeFieldBeginWithName: @"access_token" type: TType_STRING fieldID: 1];
    [outProtocol writeString: access_token];
    [outProtocol writeFieldEnd];
  }
  if (task != nil)  {
    [outProtocol writeFieldBeginWithName: @"task" type: TType_STRUCT fieldID: 2];
    [task write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_task_set
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Task_set_result * result = [[[Task_set_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"task_set failed: unknown result"];
}

- (BOOL) task_set: (NSString *) access_token : (Task *) task
{
  [self send_task_set: access_token : task];
  return [self recv_task_set];
}

- (void) send_task_new: (NSString *) access_token : (Task *) task
{
  [outProtocol writeMessageBeginWithName: @"task_new" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"task_new_args"];
  if (access_token != nil)  {
    [outProtocol writeFieldBeginWithName: @"access_token" type: TType_STRING fieldID: 1];
    [outProtocol writeString: access_token];
    [outProtocol writeFieldEnd];
  }
  if (task != nil)  {
    [outProtocol writeFieldBeginWithName: @"task" type: TType_STRUCT fieldID: 2];
    [task write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (int64_t) recv_task_new
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Task_new_result * result = [[[Task_new_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"task_new failed: unknown result"];
}

- (int64_t) task_new: (NSString *) access_token : (Task *) task
{
  [self send_task_new: access_token : task];
  return [self recv_task_new];
}

- (void) send_task_apply: (NSString *) access_token : (int64_t) task_id : (NSString *) postscript
{
  [outProtocol writeMessageBeginWithName: @"task_apply" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"task_apply_args"];
  if (access_token != nil)  {
    [outProtocol writeFieldBeginWithName: @"access_token" type: TType_STRING fieldID: 1];
    [outProtocol writeString: access_token];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"task_id" type: TType_I64 fieldID: 2];
  [outProtocol writeI64: task_id];
  [outProtocol writeFieldEnd];
  if (postscript != nil)  {
    [outProtocol writeFieldBeginWithName: @"postscript" type: TType_STRING fieldID: 3];
    [outProtocol writeString: postscript];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_task_apply
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Task_apply_result * result = [[[Task_apply_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"task_apply failed: unknown result"];
}

- (BOOL) task_apply: (NSString *) access_token : (int64_t) task_id : (NSString *) postscript
{
  [self send_task_apply: access_token : task_id : postscript];
  return [self recv_task_apply];
}

- (void) send_task_reject_invitation: (NSString *) access_token : (int64_t) task_id
{
  [outProtocol writeMessageBeginWithName: @"task_reject_invitation" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"task_reject_invitation_args"];
  if (access_token != nil)  {
    [outProtocol writeFieldBeginWithName: @"access_token" type: TType_STRING fieldID: 1];
    [outProtocol writeString: access_token];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"task_id" type: TType_I64 fieldID: 2];
  [outProtocol writeI64: task_id];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_task_reject_invitation
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Task_reject_invitation_result * result = [[[Task_reject_invitation_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"task_reject_invitation failed: unknown result"];
}

- (BOOL) task_reject_invitation: (NSString *) access_token : (int64_t) task_id
{
  [self send_task_reject_invitation: access_token : task_id];
  return [self recv_task_reject_invitation];
}

- (void) send_task_accept_invitation: (NSString *) access_token : (int64_t) id
{
  [outProtocol writeMessageBeginWithName: @"task_accept_invitation" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"task_accept_invitation_args"];
  if (access_token != nil)  {
    [outProtocol writeFieldBeginWithName: @"access_token" type: TType_STRING fieldID: 1];
    [outProtocol writeString: access_token];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"id" type: TType_I64 fieldID: 2];
  [outProtocol writeI64: id];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_task_accept_invitation
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Task_accept_invitation_result * result = [[[Task_accept_invitation_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"task_accept_invitation failed: unknown result"];
}

- (BOOL) task_accept_invitation: (NSString *) access_token : (int64_t) id
{
  [self send_task_accept_invitation: access_token : id];
  return [self recv_task_accept_invitation];
}

- (void) send_task_accept_user: (NSString *) access_token : (int64_t) task_id : (int64_t) user_id
{
  [outProtocol writeMessageBeginWithName: @"task_accept_user" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"task_accept_user_args"];
  if (access_token != nil)  {
    [outProtocol writeFieldBeginWithName: @"access_token" type: TType_STRING fieldID: 1];
    [outProtocol writeString: access_token];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"task_id" type: TType_I64 fieldID: 2];
  [outProtocol writeI64: task_id];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"user_id" type: TType_I64 fieldID: 3];
  [outProtocol writeI64: user_id];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_task_accept_user
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Task_accept_user_result * result = [[[Task_accept_user_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"task_accept_user failed: unknown result"];
}

- (BOOL) task_accept_user: (NSString *) access_token : (int64_t) task_id : (int64_t) user_id
{
  [self send_task_accept_user: access_token : task_id : user_id];
  return [self recv_task_accept_user];
}

- (void) send_task_reject_user: (NSString *) access_token : (int64_t) task_id : (int64_t) user_id : (NSString *) postscript
{
  [outProtocol writeMessageBeginWithName: @"task_reject_user" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"task_reject_user_args"];
  if (access_token != nil)  {
    [outProtocol writeFieldBeginWithName: @"access_token" type: TType_STRING fieldID: 1];
    [outProtocol writeString: access_token];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"task_id" type: TType_I64 fieldID: 2];
  [outProtocol writeI64: task_id];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"user_id" type: TType_I64 fieldID: 3];
  [outProtocol writeI64: user_id];
  [outProtocol writeFieldEnd];
  if (postscript != nil)  {
    [outProtocol writeFieldBeginWithName: @"postscript" type: TType_STRING fieldID: 4];
    [outProtocol writeString: postscript];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_task_reject_user
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Task_reject_user_result * result = [[[Task_reject_user_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"task_reject_user failed: unknown result"];
}

- (BOOL) task_reject_user: (NSString *) access_token : (int64_t) task_id : (int64_t) user_id : (NSString *) postscript
{
  [self send_task_reject_user: access_token : task_id : user_id : postscript];
  return [self recv_task_reject_user];
}

- (void) send_msg_list: (NSString *) access_token : (int) type : (int64_t) last_id : (int64_t) num
{
  [outProtocol writeMessageBeginWithName: @"msg_list" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"msg_list_args"];
  if (access_token != nil)  {
    [outProtocol writeFieldBeginWithName: @"access_token" type: TType_STRING fieldID: 1];
    [outProtocol writeString: access_token];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 2];
  [outProtocol writeI32: type];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"last_id" type: TType_I64 fieldID: 3];
  [outProtocol writeI64: last_id];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"num" type: TType_I64 fieldID: 4];
  [outProtocol writeI64: num];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSArray *) recv_msg_list
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Msg_list_result * result = [[[Msg_list_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"msg_list failed: unknown result"];
}

- (NSArray *) msg_list: (NSString *) access_token : (int) type : (int64_t) last_id : (int64_t) num
{
  [self send_msg_list: access_token : type : last_id : num];
  return [self recv_msg_list];
}

- (void) send_msg_send: (NSString *) access_token : (int64_t) send_to : (Msg *) msg
{
  [outProtocol writeMessageBeginWithName: @"msg_send" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"msg_send_args"];
  if (access_token != nil)  {
    [outProtocol writeFieldBeginWithName: @"access_token" type: TType_STRING fieldID: 1];
    [outProtocol writeString: access_token];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"send_to" type: TType_I64 fieldID: 2];
  [outProtocol writeI64: send_to];
  [outProtocol writeFieldEnd];
  if (msg != nil)  {
    [outProtocol writeFieldBeginWithName: @"msg" type: TType_STRUCT fieldID: 3];
    [msg write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_msg_send
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Msg_send_result * result = [[[Msg_send_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  return;
}

- (void) msg_send: (NSString *) access_token : (int64_t) send_to : (Msg *) msg
{
  [self send_msg_send: access_token : send_to : msg];
  [self recv_msg_send];
}

- (void) send_feed: (NSString *) access_token : (int64_t) last_id : (int64_t) num
{
  [outProtocol writeMessageBeginWithName: @"feed" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"feed_args"];
  if (access_token != nil)  {
    [outProtocol writeFieldBeginWithName: @"access_token" type: TType_STRING fieldID: 1];
    [outProtocol writeString: access_token];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"last_id" type: TType_I64 fieldID: 2];
  [outProtocol writeI64: last_id];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"num" type: TType_I64 fieldID: 3];
  [outProtocol writeI64: num];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSArray *) recv_feed
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Feed_result * result = [[[Feed_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"feed failed: unknown result"];
}

- (NSArray *) feed: (NSString *) access_token : (int64_t) last_id : (int64_t) num
{
  [self send_feed: access_token : last_id : num];
  return [self recv_feed];
}

- (void) send_summary: (NSString *) access_token
{
  [outProtocol writeMessageBeginWithName: @"summary" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"summary_args"];
  if (access_token != nil)  {
    [outProtocol writeFieldBeginWithName: @"access_token" type: TType_STRING fieldID: 1];
    [outProtocol writeString: access_token];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (Summary *) recv_summary
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Summary_result * result = [[[Summary_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"summary failed: unknown result"];
}

- (Summary *) summary: (NSString *) access_token
{
  [self send_summary: access_token];
  return [self recv_summary];
}

@end

@implementation SnsProcessor

- (id) initWithSns: (id <Sns>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain];
  mMethodMap = [[NSMutableDictionary dictionary] retain];
  {
    SEL s = @selector(process_login_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"login"];
  }
  {
    SEL s = @selector(process_logout_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"logout"];
  }
  {
    SEL s = @selector(process_user_get_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"user_get"];
  }
  {
    SEL s = @selector(process_user_set_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"user_set"];
  }
  {
    SEL s = @selector(process_user_list_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"user_list"];
  }
  {
    SEL s = @selector(process_task_get_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"task_get"];
  }
  {
    SEL s = @selector(process_task_set_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"task_set"];
  }
  {
    SEL s = @selector(process_task_new_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"task_new"];
  }
  {
    SEL s = @selector(process_task_apply_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"task_apply"];
  }
  {
    SEL s = @selector(process_task_reject_invitation_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"task_reject_invitation"];
  }
  {
    SEL s = @selector(process_task_accept_invitation_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"task_accept_invitation"];
  }
  {
    SEL s = @selector(process_task_accept_user_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"task_accept_user"];
  }
  {
    SEL s = @selector(process_task_reject_user_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"task_reject_user"];
  }
  {
    SEL s = @selector(process_msg_list_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"msg_list"];
  }
  {
    SEL s = @selector(process_msg_send_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"msg_send"];
  }
  {
    SEL s = @selector(process_feed_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"feed"];
  }
  {
    SEL s = @selector(process_summary_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"summary"];
  }
  return self;
}

- (id<Sns>) service
{
  return [[mService retain] autorelease];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_login_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  login_args * args = [[login_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Login_result * result = [[Login_result alloc] init];
  [result setSuccess: [mService login: [args auth]]];
  [outProtocol writeMessageBeginWithName: @"login"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_logout_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  logout_args * args = [[logout_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Logout_result * result = [[Logout_result alloc] init];
  [result setSuccess: [mService logout: [args access_token]]];
  [outProtocol writeMessageBeginWithName: @"logout"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_user_get_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  user_get_args * args = [[user_get_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  User_get_result * result = [[User_get_result alloc] init];
  [result setSuccess: [mService user_get: [args access_token]: [args user_id]]];
  [outProtocol writeMessageBeginWithName: @"user_get"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_user_set_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  user_set_args * args = [[user_set_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  User_set_result * result = [[User_set_result alloc] init];
  [result setSuccess: [mService user_set: [args access_token]: [args user]]];
  [outProtocol writeMessageBeginWithName: @"user_set"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_user_list_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  user_list_args * args = [[user_list_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  User_list_result * result = [[User_list_result alloc] init];
  [result setSuccess: [mService user_list: [args access_token]: [args id_list]]];
  [outProtocol writeMessageBeginWithName: @"user_list"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_task_get_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  task_get_args * args = [[task_get_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Task_get_result * result = [[Task_get_result alloc] init];
  [result setSuccess: [mService task_get: [args access_token]: [args task_id]]];
  [outProtocol writeMessageBeginWithName: @"task_get"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_task_set_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  task_set_args * args = [[task_set_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Task_set_result * result = [[Task_set_result alloc] init];
  [result setSuccess: [mService task_set: [args access_token]: [args task]]];
  [outProtocol writeMessageBeginWithName: @"task_set"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_task_new_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  task_new_args * args = [[task_new_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Task_new_result * result = [[Task_new_result alloc] init];
  [result setSuccess: [mService task_new: [args access_token]: [args task]]];
  [outProtocol writeMessageBeginWithName: @"task_new"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_task_apply_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  task_apply_args * args = [[task_apply_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Task_apply_result * result = [[Task_apply_result alloc] init];
  [result setSuccess: [mService task_apply: [args access_token]: [args task_id]: [args postscript]]];
  [outProtocol writeMessageBeginWithName: @"task_apply"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_task_reject_invitation_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  task_reject_invitation_args * args = [[task_reject_invitation_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Task_reject_invitation_result * result = [[Task_reject_invitation_result alloc] init];
  [result setSuccess: [mService task_reject_invitation: [args access_token]: [args task_id]]];
  [outProtocol writeMessageBeginWithName: @"task_reject_invitation"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_task_accept_invitation_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  task_accept_invitation_args * args = [[task_accept_invitation_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Task_accept_invitation_result * result = [[Task_accept_invitation_result alloc] init];
  [result setSuccess: [mService task_accept_invitation: [args access_token]: [args id]]];
  [outProtocol writeMessageBeginWithName: @"task_accept_invitation"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_task_accept_user_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  task_accept_user_args * args = [[task_accept_user_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Task_accept_user_result * result = [[Task_accept_user_result alloc] init];
  [result setSuccess: [mService task_accept_user: [args access_token]: [args task_id]: [args user_id]]];
  [outProtocol writeMessageBeginWithName: @"task_accept_user"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_task_reject_user_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  task_reject_user_args * args = [[task_reject_user_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Task_reject_user_result * result = [[Task_reject_user_result alloc] init];
  [result setSuccess: [mService task_reject_user: [args access_token]: [args task_id]: [args user_id]: [args postscript]]];
  [outProtocol writeMessageBeginWithName: @"task_reject_user"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_msg_list_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  msg_list_args * args = [[msg_list_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Msg_list_result * result = [[Msg_list_result alloc] init];
  [result setSuccess: [mService msg_list: [args access_token]: [args type]: [args last_id]: [args num]]];
  [outProtocol writeMessageBeginWithName: @"msg_list"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_msg_send_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  msg_send_args * args = [[msg_send_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Msg_send_result * result = [[Msg_send_result alloc] init];
  [mService msg_send: [args access_token]: [args send_to]: [args msg]];
  [outProtocol writeMessageBeginWithName: @"msg_send"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_feed_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  feed_args * args = [[feed_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Feed_result * result = [[Feed_result alloc] init];
  [result setSuccess: [mService feed: [args access_token]: [args last_id]: [args num]]];
  [outProtocol writeMessageBeginWithName: @"feed"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_summary_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  summary_args * args = [[summary_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Summary_result * result = [[Summary_result alloc] init];
  [result setSuccess: [mService summary: [args access_token]]];
  [outProtocol writeMessageBeginWithName: @"summary"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) dealloc
{
  [mService release];
  [mMethodMap release];
  [super dealloc];
}

@end

