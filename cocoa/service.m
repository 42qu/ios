/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import <TProtocol.h>
#import <TApplicationException.h>
#import <TProtocolUtil.h>
#import <TProcessor.h>

#import "exception.h"
#import "type.h"

#import "service.h"


@implementation serviceConstants
+ (void) initialize {
}
@end

@interface login_by_mail_args : NSObject <NSCoding> {
  AuthRequest * __auth;
  NSString * __mail;
  NSString * __password;

  BOOL __auth_isset;
  BOOL __mail_isset;
  BOOL __password_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=auth, setter=setAuth:) AuthRequest * auth;
@property (nonatomic, retain, getter=mail, setter=setMail:) NSString * mail;
@property (nonatomic, retain, getter=password, setter=setPassword:) NSString * password;
#endif

- (id) initWithAuth: (AuthRequest *) auth mail: (NSString *) mail password: (NSString *) password;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (AuthRequest *) auth;
- (void) setAuth: (AuthRequest *) auth;
- (BOOL) authIsSet;

- (NSString *) mail;
- (void) setMail: (NSString *) mail;
- (BOOL) mailIsSet;

- (NSString *) password;
- (void) setPassword: (NSString *) password;
- (BOOL) passwordIsSet;

@end

@implementation login_by_mail_args

- (id) initWithAuth: (AuthRequest *) auth mail: (NSString *) mail password: (NSString *) password
{
  self = [super init];
  __auth = [auth retain];
  __auth_isset = YES;
  __mail = [mail retain];
  __mail_isset = YES;
  __password = [password retain];
  __password_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"auth"])
  {
    __auth = [[decoder decodeObjectForKey: @"auth"] retain];
    __auth_isset = YES;
  }
  if ([decoder containsValueForKey: @"mail"])
  {
    __mail = [[decoder decodeObjectForKey: @"mail"] retain];
    __mail_isset = YES;
  }
  if ([decoder containsValueForKey: @"password"])
  {
    __password = [[decoder decodeObjectForKey: @"password"] retain];
    __password_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__auth_isset)
  {
    [encoder encodeObject: __auth forKey: @"auth"];
  }
  if (__mail_isset)
  {
    [encoder encodeObject: __mail forKey: @"mail"];
  }
  if (__password_isset)
  {
    [encoder encodeObject: __password forKey: @"password"];
  }
}

- (void) dealloc
{
  [__auth release];
  [__mail release];
  [__password release];
  [super dealloc];
}

- (AuthRequest *) auth {
  return [[__auth retain] autorelease];
}

- (void) setAuth: (AuthRequest *) auth {
  [auth retain];
  [__auth release];
  __auth = auth;
  __auth_isset = YES;
}

- (BOOL) authIsSet {
  return __auth_isset;
}

- (void) unsetAuth {
  [__auth release];
  __auth = nil;
  __auth_isset = NO;
}

- (NSString *) mail {
  return [[__mail retain] autorelease];
}

- (void) setMail: (NSString *) mail {
  [mail retain];
  [__mail release];
  __mail = mail;
  __mail_isset = YES;
}

- (BOOL) mailIsSet {
  return __mail_isset;
}

- (void) unsetMail {
  [__mail release];
  __mail = nil;
  __mail_isset = NO;
}

- (NSString *) password {
  return [[__password retain] autorelease];
}

- (void) setPassword: (NSString *) password {
  [password retain];
  [__password release];
  __password = password;
  __password_isset = YES;
}

- (BOOL) passwordIsSet {
  return __password_isset;
}

- (void) unsetPassword {
  [__password release];
  __password = nil;
  __password_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          AuthRequest *fieldValue = [[AuthRequest alloc] init];
          [fieldValue read: inProtocol];
          [self setAuth: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMail: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPassword: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"login_by_mail_args"];
  if (__auth_isset) {
    if (__auth != nil) {
      [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
      [__auth write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__mail_isset) {
    if (__mail != nil) {
      [outProtocol writeFieldBeginWithName: @"mail" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __mail];
      [outProtocol writeFieldEnd];
    }
  }
  if (__password_isset) {
    if (__password != nil) {
      [outProtocol writeFieldBeginWithName: @"password" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __password];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"login_by_mail_args("];
  [ms appendString: @"auth:"];
  [ms appendFormat: @"%@", __auth];
  [ms appendString: @",mail:"];
  [ms appendFormat: @"\"%@\"", __mail];
  [ms appendString: @",password:"];
  [ms appendFormat: @"\"%@\"", __password];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Login_by_mail_result : NSObject <NSCoding> {
  AuthResponse * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) AuthResponse * success;
#endif

- (id) initWithSuccess: (AuthResponse *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (AuthResponse *) success;
- (void) setSuccess: (AuthResponse *) success;
- (BOOL) successIsSet;

@end

@implementation Login_by_mail_result

- (id) initWithSuccess: (AuthResponse *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (AuthResponse *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (AuthResponse *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          AuthResponse *fieldValue = [[AuthResponse alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Login_by_mail_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Login_by_mail_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface logout_args : NSObject <NSCoding> {
  NSString * __access_token;

  BOOL __access_token_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=access_token, setter=setAccess_token:) NSString * access_token;
#endif

- (id) initWithAccess_token: (NSString *) access_token;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSString *) access_token;
- (void) setAccess_token: (NSString *) access_token;
- (BOOL) access_tokenIsSet;

@end

@implementation logout_args

- (id) initWithAccess_token: (NSString *) access_token
{
  self = [super init];
  __access_token = [access_token retain];
  __access_token_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"access_token"])
  {
    __access_token = [[decoder decodeObjectForKey: @"access_token"] retain];
    __access_token_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__access_token_isset)
  {
    [encoder encodeObject: __access_token forKey: @"access_token"];
  }
}

- (void) dealloc
{
  [__access_token release];
  [super dealloc];
}

- (NSString *) access_token {
  return [[__access_token retain] autorelease];
}

- (void) setAccess_token: (NSString *) access_token {
  [access_token retain];
  [__access_token release];
  __access_token = access_token;
  __access_token_isset = YES;
}

- (BOOL) access_tokenIsSet {
  return __access_token_isset;
}

- (void) unsetAccess_token {
  [__access_token release];
  __access_token = nil;
  __access_token_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAccess_token: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"logout_args"];
  if (__access_token_isset) {
    if (__access_token != nil) {
      [outProtocol writeFieldBeginWithName: @"access_token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __access_token];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"logout_args("];
  [ms appendString: @"access_token:"];
  [ms appendFormat: @"\"%@\"", __access_token];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Logout_result : NSObject <NSCoding> {
}


- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

@end

@implementation Logout_result

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Logout_result"];

  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Logout_result("];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface user_info_get_args : NSObject <NSCoding> {
  NSString * __access_token;
  int64_t __uid;
  BOOL __ext_only;

  BOOL __access_token_isset;
  BOOL __uid_isset;
  BOOL __ext_only_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=access_token, setter=setAccess_token:) NSString * access_token;
@property (nonatomic, getter=uid, setter=setUid:) int64_t uid;
@property (nonatomic, getter=ext_only, setter=setExt_only:) BOOL ext_only;
#endif

- (id) initWithAccess_token: (NSString *) access_token uid: (int64_t) uid ext_only: (BOOL) ext_only;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSString *) access_token;
- (void) setAccess_token: (NSString *) access_token;
- (BOOL) access_tokenIsSet;

- (int64_t) uid;
- (void) setUid: (int64_t) uid;
- (BOOL) uidIsSet;

- (BOOL) ext_only;
- (void) setExt_only: (BOOL) ext_only;
- (BOOL) ext_onlyIsSet;

@end

@implementation user_info_get_args

- (id) initWithAccess_token: (NSString *) access_token uid: (int64_t) uid ext_only: (BOOL) ext_only
{
  self = [super init];
  __access_token = [access_token retain];
  __access_token_isset = YES;
  __uid = uid;
  __uid_isset = YES;
  __ext_only = ext_only;
  __ext_only_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"access_token"])
  {
    __access_token = [[decoder decodeObjectForKey: @"access_token"] retain];
    __access_token_isset = YES;
  }
  if ([decoder containsValueForKey: @"uid"])
  {
    __uid = [decoder decodeInt64ForKey: @"uid"];
    __uid_isset = YES;
  }
  if ([decoder containsValueForKey: @"ext_only"])
  {
    __ext_only = [decoder decodeBoolForKey: @"ext_only"];
    __ext_only_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__access_token_isset)
  {
    [encoder encodeObject: __access_token forKey: @"access_token"];
  }
  if (__uid_isset)
  {
    [encoder encodeInt64: __uid forKey: @"uid"];
  }
  if (__ext_only_isset)
  {
    [encoder encodeBool: __ext_only forKey: @"ext_only"];
  }
}

- (void) dealloc
{
  [__access_token release];
  [super dealloc];
}

- (NSString *) access_token {
  return [[__access_token retain] autorelease];
}

- (void) setAccess_token: (NSString *) access_token {
  [access_token retain];
  [__access_token release];
  __access_token = access_token;
  __access_token_isset = YES;
}

- (BOOL) access_tokenIsSet {
  return __access_token_isset;
}

- (void) unsetAccess_token {
  [__access_token release];
  __access_token = nil;
  __access_token_isset = NO;
}

- (int64_t) uid {
  return __uid;
}

- (void) setUid: (int64_t) uid {
  __uid = uid;
  __uid_isset = YES;
}

- (BOOL) uidIsSet {
  return __uid_isset;
}

- (void) unsetUid {
  __uid_isset = NO;
}

- (BOOL) ext_only {
  return __ext_only;
}

- (void) setExt_only: (BOOL) ext_only {
  __ext_only = ext_only;
  __ext_only_isset = YES;
}

- (BOOL) ext_onlyIsSet {
  return __ext_only_isset;
}

- (void) unsetExt_only {
  __ext_only_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAccess_token: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setUid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setExt_only: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"user_info_get_args"];
  if (__access_token_isset) {
    if (__access_token != nil) {
      [outProtocol writeFieldBeginWithName: @"access_token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __access_token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__uid_isset) {
    [outProtocol writeFieldBeginWithName: @"uid" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __uid];
    [outProtocol writeFieldEnd];
  }
  if (__ext_only_isset) {
    [outProtocol writeFieldBeginWithName: @"ext_only" type: TType_BOOL fieldID: 3];
    [outProtocol writeBool: __ext_only];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"user_info_get_args("];
  [ms appendString: @"access_token:"];
  [ms appendFormat: @"\"%@\"", __access_token];
  [ms appendString: @",uid:"];
  [ms appendFormat: @"%qi", __uid];
  [ms appendString: @",ext_only:"];
  [ms appendFormat: @"%i", __ext_only];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface User_info_get_result : NSObject <NSCoding> {
  UserInfo * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) UserInfo * success;
#endif

- (id) initWithSuccess: (UserInfo *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (UserInfo *) success;
- (void) setSuccess: (UserInfo *) success;
- (BOOL) successIsSet;

@end

@implementation User_info_get_result

- (id) initWithSuccess: (UserInfo *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (UserInfo *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (UserInfo *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          UserInfo *fieldValue = [[UserInfo alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"User_info_get_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"User_info_get_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface task_list_args : NSObject <NSCoding> {
  NSString * __access_token;
  int __type;
  int64_t __last_id;
  int64_t __num;

  BOOL __access_token_isset;
  BOOL __type_isset;
  BOOL __last_id_isset;
  BOOL __num_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=access_token, setter=setAccess_token:) NSString * access_token;
@property (nonatomic, getter=type, setter=setType:) int type;
@property (nonatomic, getter=last_id, setter=setLast_id:) int64_t last_id;
@property (nonatomic, getter=num, setter=setNum:) int64_t num;
#endif

- (id) initWithAccess_token: (NSString *) access_token type: (int) type last_id: (int64_t) last_id num: (int64_t) num;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSString *) access_token;
- (void) setAccess_token: (NSString *) access_token;
- (BOOL) access_tokenIsSet;

- (int) type;
- (void) setType: (int) type;
- (BOOL) typeIsSet;

- (int64_t) last_id;
- (void) setLast_id: (int64_t) last_id;
- (BOOL) last_idIsSet;

- (int64_t) num;
- (void) setNum: (int64_t) num;
- (BOOL) numIsSet;

@end

@implementation task_list_args

- (id) initWithAccess_token: (NSString *) access_token type: (int) type last_id: (int64_t) last_id num: (int64_t) num
{
  self = [super init];
  __access_token = [access_token retain];
  __access_token_isset = YES;
  __type = type;
  __type_isset = YES;
  __last_id = last_id;
  __last_id_isset = YES;
  __num = num;
  __num_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"access_token"])
  {
    __access_token = [[decoder decodeObjectForKey: @"access_token"] retain];
    __access_token_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [decoder decodeIntForKey: @"type"];
    __type_isset = YES;
  }
  if ([decoder containsValueForKey: @"last_id"])
  {
    __last_id = [decoder decodeInt64ForKey: @"last_id"];
    __last_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"num"])
  {
    __num = [decoder decodeInt64ForKey: @"num"];
    __num_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__access_token_isset)
  {
    [encoder encodeObject: __access_token forKey: @"access_token"];
  }
  if (__type_isset)
  {
    [encoder encodeInt: __type forKey: @"type"];
  }
  if (__last_id_isset)
  {
    [encoder encodeInt64: __last_id forKey: @"last_id"];
  }
  if (__num_isset)
  {
    [encoder encodeInt64: __num forKey: @"num"];
  }
}

- (void) dealloc
{
  [__access_token release];
  [super dealloc];
}

- (NSString *) access_token {
  return [[__access_token retain] autorelease];
}

- (void) setAccess_token: (NSString *) access_token {
  [access_token retain];
  [__access_token release];
  __access_token = access_token;
  __access_token_isset = YES;
}

- (BOOL) access_tokenIsSet {
  return __access_token_isset;
}

- (void) unsetAccess_token {
  [__access_token release];
  __access_token = nil;
  __access_token_isset = NO;
}

- (int) type {
  return __type;
}

- (void) setType: (int) type {
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  __type_isset = NO;
}

- (int64_t) last_id {
  return __last_id;
}

- (void) setLast_id: (int64_t) last_id {
  __last_id = last_id;
  __last_id_isset = YES;
}

- (BOOL) last_idIsSet {
  return __last_id_isset;
}

- (void) unsetLast_id {
  __last_id_isset = NO;
}

- (int64_t) num {
  return __num;
}

- (void) setNum: (int64_t) num {
  __num = num;
  __num_isset = YES;
}

- (BOOL) numIsSet {
  return __num_isset;
}

- (void) unsetNum {
  __num_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAccess_token: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setLast_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setNum: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"task_list_args"];
  if (__access_token_isset) {
    if (__access_token != nil) {
      [outProtocol writeFieldBeginWithName: @"access_token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __access_token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__type_isset) {
    [outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __type];
    [outProtocol writeFieldEnd];
  }
  if (__last_id_isset) {
    [outProtocol writeFieldBeginWithName: @"last_id" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __last_id];
    [outProtocol writeFieldEnd];
  }
  if (__num_isset) {
    [outProtocol writeFieldBeginWithName: @"num" type: TType_I64 fieldID: 4];
    [outProtocol writeI64: __num];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"task_list_args("];
  [ms appendString: @"access_token:"];
  [ms appendFormat: @"\"%@\"", __access_token];
  [ms appendString: @",type:"];
  [ms appendFormat: @"%i", __type];
  [ms appendString: @",last_id:"];
  [ms appendFormat: @"%qi", __last_id];
  [ms appendString: @",num:"];
  [ms appendFormat: @"%qi", __num];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Task_list_result : NSObject <NSCoding> {
  NSArray * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) NSArray * success;
#endif

- (id) initWithSuccess: (NSArray *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSArray *) success;
- (void) setSuccess: (NSArray *) success;
- (BOOL) successIsSet;

@end

@implementation Task_list_result

- (id) initWithSuccess: (NSArray *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (NSArray *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (NSArray *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            TaskBasic *_elem2 = [[TaskBasic alloc] init];
            [_elem2 read: inProtocol];
            [fieldValue addObject: _elem2];
            [_elem2 release];
          }
          [inProtocol readListEnd];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Task_list_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_LIST fieldID: 0];
      {
        [outProtocol writeListBeginWithElementType: TType_STRUCT size: [__success count]];
        int i4;
        for (i4 = 0; i4 < [__success count]; i4++)
        {
          [[__success objectAtIndex: i4] write: outProtocol];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Task_list_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface task_get_args : NSObject <NSCoding> {
  int64_t __access_token;
  int64_t __tid;
  BOOL __ext_only;

  BOOL __access_token_isset;
  BOOL __tid_isset;
  BOOL __ext_only_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=access_token, setter=setAccess_token:) int64_t access_token;
@property (nonatomic, getter=tid, setter=setTid:) int64_t tid;
@property (nonatomic, getter=ext_only, setter=setExt_only:) BOOL ext_only;
#endif

- (id) initWithAccess_token: (int64_t) access_token tid: (int64_t) tid ext_only: (BOOL) ext_only;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (int64_t) access_token;
- (void) setAccess_token: (int64_t) access_token;
- (BOOL) access_tokenIsSet;

- (int64_t) tid;
- (void) setTid: (int64_t) tid;
- (BOOL) tidIsSet;

- (BOOL) ext_only;
- (void) setExt_only: (BOOL) ext_only;
- (BOOL) ext_onlyIsSet;

@end

@implementation task_get_args

- (id) initWithAccess_token: (int64_t) access_token tid: (int64_t) tid ext_only: (BOOL) ext_only
{
  self = [super init];
  __access_token = access_token;
  __access_token_isset = YES;
  __tid = tid;
  __tid_isset = YES;
  __ext_only = ext_only;
  __ext_only_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"access_token"])
  {
    __access_token = [decoder decodeInt64ForKey: @"access_token"];
    __access_token_isset = YES;
  }
  if ([decoder containsValueForKey: @"tid"])
  {
    __tid = [decoder decodeInt64ForKey: @"tid"];
    __tid_isset = YES;
  }
  if ([decoder containsValueForKey: @"ext_only"])
  {
    __ext_only = [decoder decodeBoolForKey: @"ext_only"];
    __ext_only_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__access_token_isset)
  {
    [encoder encodeInt64: __access_token forKey: @"access_token"];
  }
  if (__tid_isset)
  {
    [encoder encodeInt64: __tid forKey: @"tid"];
  }
  if (__ext_only_isset)
  {
    [encoder encodeBool: __ext_only forKey: @"ext_only"];
  }
}

- (void) dealloc
{
  [super dealloc];
}

- (int64_t) access_token {
  return __access_token;
}

- (void) setAccess_token: (int64_t) access_token {
  __access_token = access_token;
  __access_token_isset = YES;
}

- (BOOL) access_tokenIsSet {
  return __access_token_isset;
}

- (void) unsetAccess_token {
  __access_token_isset = NO;
}

- (int64_t) tid {
  return __tid;
}

- (void) setTid: (int64_t) tid {
  __tid = tid;
  __tid_isset = YES;
}

- (BOOL) tidIsSet {
  return __tid_isset;
}

- (void) unsetTid {
  __tid_isset = NO;
}

- (BOOL) ext_only {
  return __ext_only;
}

- (void) setExt_only: (BOOL) ext_only {
  __ext_only = ext_only;
  __ext_only_isset = YES;
}

- (BOOL) ext_onlyIsSet {
  return __ext_only_isset;
}

- (void) unsetExt_only {
  __ext_only_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setAccess_token: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setTid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setExt_only: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"task_get_args"];
  if (__access_token_isset) {
    [outProtocol writeFieldBeginWithName: @"access_token" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __access_token];
    [outProtocol writeFieldEnd];
  }
  if (__tid_isset) {
    [outProtocol writeFieldBeginWithName: @"tid" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __tid];
    [outProtocol writeFieldEnd];
  }
  if (__ext_only_isset) {
    [outProtocol writeFieldBeginWithName: @"ext_only" type: TType_BOOL fieldID: 3];
    [outProtocol writeBool: __ext_only];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"task_get_args("];
  [ms appendString: @"access_token:"];
  [ms appendFormat: @"%qi", __access_token];
  [ms appendString: @",tid:"];
  [ms appendFormat: @"%qi", __tid];
  [ms appendString: @",ext_only:"];
  [ms appendFormat: @"%i", __ext_only];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Task_get_result : NSObject <NSCoding> {
  TaskInfo * __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=success, setter=setSuccess:) TaskInfo * success;
#endif

- (id) initWithSuccess: (TaskInfo *) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (TaskInfo *) success;
- (void) setSuccess: (TaskInfo *) success;
- (BOOL) successIsSet;

@end

@implementation Task_get_result

- (id) initWithSuccess: (TaskInfo *) success
{
  self = [super init];
  __success = [success retain];
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [[decoder decodeObjectForKey: @"success"] retain];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeObject: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [__success release];
  [super dealloc];
}

- (TaskInfo *) success {
  return [[__success retain] autorelease];
}

- (void) setSuccess: (TaskInfo *) success {
  [success retain];
  [__success release];
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  [__success release];
  __success = nil;
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_STRUCT) {
          TaskInfo *fieldValue = [[TaskInfo alloc] init];
          [fieldValue read: inProtocol];
          [self setSuccess: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Task_get_result"];

  if (__success_isset) {
    if (__success != nil) {
      [outProtocol writeFieldBeginWithName: @"success" type: TType_STRUCT fieldID: 0];
      [__success write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Task_get_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%@", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface task_new_args : NSObject <NSCoding> {
  NSString * __access_token;
  TaskInfo * __task;

  BOOL __access_token_isset;
  BOOL __task_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=access_token, setter=setAccess_token:) NSString * access_token;
@property (nonatomic, retain, getter=task, setter=setTask:) TaskInfo * task;
#endif

- (id) initWithAccess_token: (NSString *) access_token task: (TaskInfo *) task;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSString *) access_token;
- (void) setAccess_token: (NSString *) access_token;
- (BOOL) access_tokenIsSet;

- (TaskInfo *) task;
- (void) setTask: (TaskInfo *) task;
- (BOOL) taskIsSet;

@end

@implementation task_new_args

- (id) initWithAccess_token: (NSString *) access_token task: (TaskInfo *) task
{
  self = [super init];
  __access_token = [access_token retain];
  __access_token_isset = YES;
  __task = [task retain];
  __task_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"access_token"])
  {
    __access_token = [[decoder decodeObjectForKey: @"access_token"] retain];
    __access_token_isset = YES;
  }
  if ([decoder containsValueForKey: @"task"])
  {
    __task = [[decoder decodeObjectForKey: @"task"] retain];
    __task_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__access_token_isset)
  {
    [encoder encodeObject: __access_token forKey: @"access_token"];
  }
  if (__task_isset)
  {
    [encoder encodeObject: __task forKey: @"task"];
  }
}

- (void) dealloc
{
  [__access_token release];
  [__task release];
  [super dealloc];
}

- (NSString *) access_token {
  return [[__access_token retain] autorelease];
}

- (void) setAccess_token: (NSString *) access_token {
  [access_token retain];
  [__access_token release];
  __access_token = access_token;
  __access_token_isset = YES;
}

- (BOOL) access_tokenIsSet {
  return __access_token_isset;
}

- (void) unsetAccess_token {
  [__access_token release];
  __access_token = nil;
  __access_token_isset = NO;
}

- (TaskInfo *) task {
  return [[__task retain] autorelease];
}

- (void) setTask: (TaskInfo *) task {
  [task retain];
  [__task release];
  __task = task;
  __task_isset = YES;
}

- (BOOL) taskIsSet {
  return __task_isset;
}

- (void) unsetTask {
  [__task release];
  __task = nil;
  __task_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAccess_token: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          TaskInfo *fieldValue = [[TaskInfo alloc] init];
          [fieldValue read: inProtocol];
          [self setTask: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"task_new_args"];
  if (__access_token_isset) {
    if (__access_token != nil) {
      [outProtocol writeFieldBeginWithName: @"access_token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __access_token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__task_isset) {
    if (__task != nil) {
      [outProtocol writeFieldBeginWithName: @"task" type: TType_STRUCT fieldID: 2];
      [__task write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"task_new_args("];
  [ms appendString: @"access_token:"];
  [ms appendFormat: @"\"%@\"", __access_token];
  [ms appendString: @",task:"];
  [ms appendFormat: @"%@", __task];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Task_new_result : NSObject <NSCoding> {
  int64_t __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) int64_t success;
#endif

- (id) initWithSuccess: (int64_t) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (int64_t) success;
- (void) setSuccess: (int64_t) success;
- (BOOL) successIsSet;

@end

@implementation Task_new_result

- (id) initWithSuccess: (int64_t) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeInt64ForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeInt64: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc];
}

- (int64_t) success {
  return __success;
}

- (void) setSuccess: (int64_t) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Task_new_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_I64 fieldID: 0];
    [outProtocol writeI64: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Task_new_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%qi", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface task_apply_args : NSObject <NSCoding> {
  NSString * __access_token;
  int64_t __tid;

  BOOL __access_token_isset;
  BOOL __tid_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=access_token, setter=setAccess_token:) NSString * access_token;
@property (nonatomic, getter=tid, setter=setTid:) int64_t tid;
#endif

- (id) initWithAccess_token: (NSString *) access_token tid: (int64_t) tid;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSString *) access_token;
- (void) setAccess_token: (NSString *) access_token;
- (BOOL) access_tokenIsSet;

- (int64_t) tid;
- (void) setTid: (int64_t) tid;
- (BOOL) tidIsSet;

@end

@implementation task_apply_args

- (id) initWithAccess_token: (NSString *) access_token tid: (int64_t) tid
{
  self = [super init];
  __access_token = [access_token retain];
  __access_token_isset = YES;
  __tid = tid;
  __tid_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"access_token"])
  {
    __access_token = [[decoder decodeObjectForKey: @"access_token"] retain];
    __access_token_isset = YES;
  }
  if ([decoder containsValueForKey: @"tid"])
  {
    __tid = [decoder decodeInt64ForKey: @"tid"];
    __tid_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__access_token_isset)
  {
    [encoder encodeObject: __access_token forKey: @"access_token"];
  }
  if (__tid_isset)
  {
    [encoder encodeInt64: __tid forKey: @"tid"];
  }
}

- (void) dealloc
{
  [__access_token release];
  [super dealloc];
}

- (NSString *) access_token {
  return [[__access_token retain] autorelease];
}

- (void) setAccess_token: (NSString *) access_token {
  [access_token retain];
  [__access_token release];
  __access_token = access_token;
  __access_token_isset = YES;
}

- (BOOL) access_tokenIsSet {
  return __access_token_isset;
}

- (void) unsetAccess_token {
  [__access_token release];
  __access_token = nil;
  __access_token_isset = NO;
}

- (int64_t) tid {
  return __tid;
}

- (void) setTid: (int64_t) tid {
  __tid = tid;
  __tid_isset = YES;
}

- (BOOL) tidIsSet {
  return __tid_isset;
}

- (void) unsetTid {
  __tid_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAccess_token: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setTid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"task_apply_args"];
  if (__access_token_isset) {
    if (__access_token != nil) {
      [outProtocol writeFieldBeginWithName: @"access_token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __access_token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__tid_isset) {
    [outProtocol writeFieldBeginWithName: @"tid" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __tid];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"task_apply_args("];
  [ms appendString: @"access_token:"];
  [ms appendFormat: @"\"%@\"", __access_token];
  [ms appendString: @",tid:"];
  [ms appendFormat: @"%qi", __tid];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Task_apply_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (BOOL) success;
- (void) setSuccess: (BOOL) success;
- (BOOL) successIsSet;

@end

@implementation Task_apply_result

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Task_apply_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Task_apply_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface task_reject_args : NSObject <NSCoding> {
  NSString * __access_token;
  int64_t __user_id;

  BOOL __access_token_isset;
  BOOL __user_id_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=access_token, setter=setAccess_token:) NSString * access_token;
@property (nonatomic, getter=user_id, setter=setUser_id:) int64_t user_id;
#endif

- (id) initWithAccess_token: (NSString *) access_token user_id: (int64_t) user_id;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSString *) access_token;
- (void) setAccess_token: (NSString *) access_token;
- (BOOL) access_tokenIsSet;

- (int64_t) user_id;
- (void) setUser_id: (int64_t) user_id;
- (BOOL) user_idIsSet;

@end

@implementation task_reject_args

- (id) initWithAccess_token: (NSString *) access_token user_id: (int64_t) user_id
{
  self = [super init];
  __access_token = [access_token retain];
  __access_token_isset = YES;
  __user_id = user_id;
  __user_id_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"access_token"])
  {
    __access_token = [[decoder decodeObjectForKey: @"access_token"] retain];
    __access_token_isset = YES;
  }
  if ([decoder containsValueForKey: @"user_id"])
  {
    __user_id = [decoder decodeInt64ForKey: @"user_id"];
    __user_id_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__access_token_isset)
  {
    [encoder encodeObject: __access_token forKey: @"access_token"];
  }
  if (__user_id_isset)
  {
    [encoder encodeInt64: __user_id forKey: @"user_id"];
  }
}

- (void) dealloc
{
  [__access_token release];
  [super dealloc];
}

- (NSString *) access_token {
  return [[__access_token retain] autorelease];
}

- (void) setAccess_token: (NSString *) access_token {
  [access_token retain];
  [__access_token release];
  __access_token = access_token;
  __access_token_isset = YES;
}

- (BOOL) access_tokenIsSet {
  return __access_token_isset;
}

- (void) unsetAccess_token {
  [__access_token release];
  __access_token = nil;
  __access_token_isset = NO;
}

- (int64_t) user_id {
  return __user_id;
}

- (void) setUser_id: (int64_t) user_id {
  __user_id = user_id;
  __user_id_isset = YES;
}

- (BOOL) user_idIsSet {
  return __user_id_isset;
}

- (void) unsetUser_id {
  __user_id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAccess_token: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setUser_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"task_reject_args"];
  if (__access_token_isset) {
    if (__access_token != nil) {
      [outProtocol writeFieldBeginWithName: @"access_token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __access_token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__user_id_isset) {
    [outProtocol writeFieldBeginWithName: @"user_id" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __user_id];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"task_reject_args("];
  [ms appendString: @"access_token:"];
  [ms appendFormat: @"\"%@\"", __access_token];
  [ms appendString: @",user_id:"];
  [ms appendFormat: @"%qi", __user_id];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Task_reject_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (BOOL) success;
- (void) setSuccess: (BOOL) success;
- (BOOL) successIsSet;

@end

@implementation Task_reject_result

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Task_reject_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Task_reject_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface task_accept_args : NSObject <NSCoding> {
  NSString * __access_token;
  int64_t __user_id;

  BOOL __access_token_isset;
  BOOL __user_id_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, retain, getter=access_token, setter=setAccess_token:) NSString * access_token;
@property (nonatomic, getter=user_id, setter=setUser_id:) int64_t user_id;
#endif

- (id) initWithAccess_token: (NSString *) access_token user_id: (int64_t) user_id;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (NSString *) access_token;
- (void) setAccess_token: (NSString *) access_token;
- (BOOL) access_tokenIsSet;

- (int64_t) user_id;
- (void) setUser_id: (int64_t) user_id;
- (BOOL) user_idIsSet;

@end

@implementation task_accept_args

- (id) initWithAccess_token: (NSString *) access_token user_id: (int64_t) user_id
{
  self = [super init];
  __access_token = [access_token retain];
  __access_token_isset = YES;
  __user_id = user_id;
  __user_id_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"access_token"])
  {
    __access_token = [[decoder decodeObjectForKey: @"access_token"] retain];
    __access_token_isset = YES;
  }
  if ([decoder containsValueForKey: @"user_id"])
  {
    __user_id = [decoder decodeInt64ForKey: @"user_id"];
    __user_id_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__access_token_isset)
  {
    [encoder encodeObject: __access_token forKey: @"access_token"];
  }
  if (__user_id_isset)
  {
    [encoder encodeInt64: __user_id forKey: @"user_id"];
  }
}

- (void) dealloc
{
  [__access_token release];
  [super dealloc];
}

- (NSString *) access_token {
  return [[__access_token retain] autorelease];
}

- (void) setAccess_token: (NSString *) access_token {
  [access_token retain];
  [__access_token release];
  __access_token = access_token;
  __access_token_isset = YES;
}

- (BOOL) access_tokenIsSet {
  return __access_token_isset;
}

- (void) unsetAccess_token {
  [__access_token release];
  __access_token = nil;
  __access_token_isset = NO;
}

- (int64_t) user_id {
  return __user_id;
}

- (void) setUser_id: (int64_t) user_id {
  __user_id = user_id;
  __user_id_isset = YES;
}

- (BOOL) user_idIsSet {
  return __user_id_isset;
}

- (void) unsetUser_id {
  __user_id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAccess_token: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setUser_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"task_accept_args"];
  if (__access_token_isset) {
    if (__access_token != nil) {
      [outProtocol writeFieldBeginWithName: @"access_token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __access_token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__user_id_isset) {
    [outProtocol writeFieldBeginWithName: @"user_id" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __user_id];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"task_accept_args("];
  [ms appendString: @"access_token:"];
  [ms appendFormat: @"\"%@\"", __access_token];
  [ms appendString: @",user_id:"];
  [ms appendFormat: @"%qi", __user_id];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@interface Task_accept_result : NSObject <NSCoding> {
  BOOL __success;

  BOOL __success_isset;
}

#if TARGET_OS_IPHONE || (MAC_OS_X_VERSION_MAX_ALLOWED >= MAC_OS_X_VERSION_10_5)
@property (nonatomic, getter=success, setter=setSuccess:) BOOL success;
#endif

- (id) initWithSuccess: (BOOL) success;

- (void) read: (id <TProtocol>) inProtocol;
- (void) write: (id <TProtocol>) outProtocol;

- (BOOL) success;
- (void) setSuccess: (BOOL) success;
- (BOOL) successIsSet;

@end

@implementation Task_accept_result

- (id) initWithSuccess: (BOOL) success
{
  self = [super init];
  __success = success;
  __success_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"success"])
  {
    __success = [decoder decodeBoolForKey: @"success"];
    __success_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__success_isset)
  {
    [encoder encodeBool: __success forKey: @"success"];
  }
}

- (void) dealloc
{
  [super dealloc];
}

- (BOOL) success {
  return __success;
}

- (void) setSuccess: (BOOL) success {
  __success = success;
  __success_isset = YES;
}

- (BOOL) successIsSet {
  return __success_isset;
}

- (void) unsetSuccess {
  __success_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 0:
        if (fieldType == TType_BOOL) {
          BOOL fieldValue = [inProtocol readBool];
          [self setSuccess: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Task_accept_result"];

  if (__success_isset) {
    [outProtocol writeFieldBeginWithName: @"success" type: TType_BOOL fieldID: 0];
    [outProtocol writeBool: __success];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Task_accept_result("];
  [ms appendString: @"success:"];
  [ms appendFormat: @"%i", __success];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation SnsClient
- (id) initWithProtocol: (id <TProtocol>) protocol
{
  return [self initWithInProtocol: protocol outProtocol: protocol];
}

- (id) initWithInProtocol: (id <TProtocol>) anInProtocol outProtocol: (id <TProtocol>) anOutProtocol
{
  [super init];
  inProtocol = [anInProtocol retain];
  outProtocol = [anOutProtocol retain];
  return self;
}

- (void) dealloc
{
  [inProtocol release];
  [outProtocol release];
  [super dealloc];
}

- (void) send_login_by_mail: (AuthRequest *) auth : (NSString *) mail : (NSString *) password
{
  [outProtocol writeMessageBeginWithName: @"login_by_mail" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"login_by_mail_args"];
  if (auth != nil)  {
    [outProtocol writeFieldBeginWithName: @"auth" type: TType_STRUCT fieldID: 1];
    [auth write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  if (mail != nil)  {
    [outProtocol writeFieldBeginWithName: @"mail" type: TType_STRING fieldID: 2];
    [outProtocol writeString: mail];
    [outProtocol writeFieldEnd];
  }
  if (password != nil)  {
    [outProtocol writeFieldBeginWithName: @"password" type: TType_STRING fieldID: 3];
    [outProtocol writeString: password];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (AuthResponse *) recv_login_by_mail
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Login_by_mail_result * result = [[[Login_by_mail_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"login_by_mail failed: unknown result"];
}

- (AuthResponse *) login_by_mail: (AuthRequest *) auth : (NSString *) mail : (NSString *) password
{
  [self send_login_by_mail: auth : mail : password];
  return [self recv_login_by_mail];
}

- (void) send_logout: (NSString *) access_token
{
  [outProtocol writeMessageBeginWithName: @"logout" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"logout_args"];
  if (access_token != nil)  {
    [outProtocol writeFieldBeginWithName: @"access_token" type: TType_STRING fieldID: 1];
    [outProtocol writeString: access_token];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (void) recv_logout
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Logout_result * result = [[[Logout_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  return;
}

- (void) logout: (NSString *) access_token
{
  [self send_logout: access_token];
  [self recv_logout];
}

- (void) send_user_info_get: (NSString *) access_token : (int64_t) uid : (BOOL) ext_only
{
  [outProtocol writeMessageBeginWithName: @"user_info_get" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"user_info_get_args"];
  if (access_token != nil)  {
    [outProtocol writeFieldBeginWithName: @"access_token" type: TType_STRING fieldID: 1];
    [outProtocol writeString: access_token];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"uid" type: TType_I64 fieldID: 2];
  [outProtocol writeI64: uid];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"ext_only" type: TType_BOOL fieldID: 3];
  [outProtocol writeBool: ext_only];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (UserInfo *) recv_user_info_get
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  User_info_get_result * result = [[[User_info_get_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"user_info_get failed: unknown result"];
}

- (UserInfo *) user_info_get: (NSString *) access_token : (int64_t) uid : (BOOL) ext_only
{
  [self send_user_info_get: access_token : uid : ext_only];
  return [self recv_user_info_get];
}

- (void) send_task_list: (NSString *) access_token : (int) type : (int64_t) last_id : (int64_t) num
{
  [outProtocol writeMessageBeginWithName: @"task_list" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"task_list_args"];
  if (access_token != nil)  {
    [outProtocol writeFieldBeginWithName: @"access_token" type: TType_STRING fieldID: 1];
    [outProtocol writeString: access_token];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 2];
  [outProtocol writeI32: type];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"last_id" type: TType_I64 fieldID: 3];
  [outProtocol writeI64: last_id];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"num" type: TType_I64 fieldID: 4];
  [outProtocol writeI64: num];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (NSArray *) recv_task_list
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Task_list_result * result = [[[Task_list_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"task_list failed: unknown result"];
}

- (NSArray *) task_list: (NSString *) access_token : (int) type : (int64_t) last_id : (int64_t) num
{
  [self send_task_list: access_token : type : last_id : num];
  return [self recv_task_list];
}

- (void) send_task_get: (int64_t) access_token : (int64_t) tid : (BOOL) ext_only
{
  [outProtocol writeMessageBeginWithName: @"task_get" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"task_get_args"];
  [outProtocol writeFieldBeginWithName: @"access_token" type: TType_I64 fieldID: 1];
  [outProtocol writeI64: access_token];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"tid" type: TType_I64 fieldID: 2];
  [outProtocol writeI64: tid];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldBeginWithName: @"ext_only" type: TType_BOOL fieldID: 3];
  [outProtocol writeBool: ext_only];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (TaskInfo *) recv_task_get
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Task_get_result * result = [[[Task_get_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"task_get failed: unknown result"];
}

- (TaskInfo *) task_get: (int64_t) access_token : (int64_t) tid : (BOOL) ext_only
{
  [self send_task_get: access_token : tid : ext_only];
  return [self recv_task_get];
}

- (void) send_task_new: (NSString *) access_token : (TaskInfo *) task
{
  [outProtocol writeMessageBeginWithName: @"task_new" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"task_new_args"];
  if (access_token != nil)  {
    [outProtocol writeFieldBeginWithName: @"access_token" type: TType_STRING fieldID: 1];
    [outProtocol writeString: access_token];
    [outProtocol writeFieldEnd];
  }
  if (task != nil)  {
    [outProtocol writeFieldBeginWithName: @"task" type: TType_STRUCT fieldID: 2];
    [task write: outProtocol];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (int64_t) recv_task_new
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Task_new_result * result = [[[Task_new_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"task_new failed: unknown result"];
}

- (int64_t) task_new: (NSString *) access_token : (TaskInfo *) task
{
  [self send_task_new: access_token : task];
  return [self recv_task_new];
}

- (void) send_task_apply: (NSString *) access_token : (int64_t) tid
{
  [outProtocol writeMessageBeginWithName: @"task_apply" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"task_apply_args"];
  if (access_token != nil)  {
    [outProtocol writeFieldBeginWithName: @"access_token" type: TType_STRING fieldID: 1];
    [outProtocol writeString: access_token];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"tid" type: TType_I64 fieldID: 2];
  [outProtocol writeI64: tid];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_task_apply
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Task_apply_result * result = [[[Task_apply_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"task_apply failed: unknown result"];
}

- (BOOL) task_apply: (NSString *) access_token : (int64_t) tid
{
  [self send_task_apply: access_token : tid];
  return [self recv_task_apply];
}

- (void) send_task_reject: (NSString *) access_token : (int64_t) user_id
{
  [outProtocol writeMessageBeginWithName: @"task_reject" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"task_reject_args"];
  if (access_token != nil)  {
    [outProtocol writeFieldBeginWithName: @"access_token" type: TType_STRING fieldID: 1];
    [outProtocol writeString: access_token];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"user_id" type: TType_I64 fieldID: 2];
  [outProtocol writeI64: user_id];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_task_reject
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Task_reject_result * result = [[[Task_reject_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"task_reject failed: unknown result"];
}

- (BOOL) task_reject: (NSString *) access_token : (int64_t) user_id
{
  [self send_task_reject: access_token : user_id];
  return [self recv_task_reject];
}

- (void) send_task_accept: (NSString *) access_token : (int64_t) user_id
{
  [outProtocol writeMessageBeginWithName: @"task_accept" type: TMessageType_CALL sequenceID: 0];
  [outProtocol writeStructBeginWithName: @"task_accept_args"];
  if (access_token != nil)  {
    [outProtocol writeFieldBeginWithName: @"access_token" type: TType_STRING fieldID: 1];
    [outProtocol writeString: access_token];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldBeginWithName: @"user_id" type: TType_I64 fieldID: 2];
  [outProtocol writeI64: user_id];
  [outProtocol writeFieldEnd];
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
}

- (BOOL) recv_task_accept
{
  int msgType = 0;
  [inProtocol readMessageBeginReturningName: nil type: &msgType sequenceID: NULL];
  if (msgType == TMessageType_EXCEPTION) {
    TApplicationException * x = [TApplicationException read: inProtocol];
    [inProtocol readMessageEnd];
    @throw x;
  }
  Task_accept_result * result = [[[Task_accept_result alloc] init] autorelease];
  [result read: inProtocol];
  [inProtocol readMessageEnd];
  if ([result successIsSet]) {
    return [result success];
  }
  @throw [TApplicationException exceptionWithType: TApplicationException_MISSING_RESULT
                                           reason: @"task_accept failed: unknown result"];
}

- (BOOL) task_accept: (NSString *) access_token : (int64_t) user_id
{
  [self send_task_accept: access_token : user_id];
  return [self recv_task_accept];
}

@end

@implementation SnsProcessor

- (id) initWithSns: (id <Sns>) service
{
  self = [super init];
  if (!self) {
    return nil;
  }
  mService = [service retain];
  mMethodMap = [[NSMutableDictionary dictionary] retain];
  {
    SEL s = @selector(process_login_by_mail_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"login_by_mail"];
  }
  {
    SEL s = @selector(process_logout_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"logout"];
  }
  {
    SEL s = @selector(process_user_info_get_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"user_info_get"];
  }
  {
    SEL s = @selector(process_task_list_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"task_list"];
  }
  {
    SEL s = @selector(process_task_get_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"task_get"];
  }
  {
    SEL s = @selector(process_task_new_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"task_new"];
  }
  {
    SEL s = @selector(process_task_apply_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"task_apply"];
  }
  {
    SEL s = @selector(process_task_reject_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"task_reject"];
  }
  {
    SEL s = @selector(process_task_accept_withSequenceID:inProtocol:outProtocol:);
    NSMethodSignature * sig = [self methodSignatureForSelector: s];
    NSInvocation * invocation = [NSInvocation invocationWithMethodSignature: sig];
    [invocation setSelector: s];
    [invocation retainArguments];
    [mMethodMap setValue: invocation forKey: @"task_accept"];
  }
  return self;
}

- (id<Sns>) service
{
  return [[mService retain] autorelease];
}

- (BOOL) processOnInputProtocol: (id <TProtocol>) inProtocol
                 outputProtocol: (id <TProtocol>) outProtocol
{
  NSString * messageName;
  int messageType;
  int seqID;
  [inProtocol readMessageBeginReturningName: &messageName
                                       type: &messageType
                                 sequenceID: &seqID];
  NSInvocation * invocation = [mMethodMap valueForKey: messageName];
  if (invocation == nil) {
    [TProtocolUtil skipType: TType_STRUCT onProtocol: inProtocol];
    [inProtocol readMessageEnd];
    TApplicationException * x = [TApplicationException exceptionWithType: TApplicationException_UNKNOWN_METHOD reason: [NSString stringWithFormat: @"Invalid method name: '%@'", messageName]];
    [outProtocol writeMessageBeginWithName: messageName
                                      type: TMessageType_EXCEPTION
                                sequenceID: seqID];
    [x write: outProtocol];
    [outProtocol writeMessageEnd];
    [[outProtocol transport] flush];
    return YES;
  }
  // NSInvocation does not conform to NSCopying protocol
  NSInvocation * i = [NSInvocation invocationWithMethodSignature: [invocation methodSignature]];
  [i setSelector: [invocation selector]];
  [i setArgument: &seqID atIndex: 2];
  [i setArgument: &inProtocol atIndex: 3];
  [i setArgument: &outProtocol atIndex: 4];
  [i setTarget: self];
  [i invoke];
  return YES;
}

- (void) process_login_by_mail_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  login_by_mail_args * args = [[login_by_mail_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Login_by_mail_result * result = [[Login_by_mail_result alloc] init];
  [result setSuccess: [mService login_by_mail: [args auth]: [args mail]: [args password]]];
  [outProtocol writeMessageBeginWithName: @"login_by_mail"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_logout_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  logout_args * args = [[logout_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Logout_result * result = [[Logout_result alloc] init];
  [mService logout: [args access_token]];
  [outProtocol writeMessageBeginWithName: @"logout"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_user_info_get_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  user_info_get_args * args = [[user_info_get_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  User_info_get_result * result = [[User_info_get_result alloc] init];
  [result setSuccess: [mService user_info_get: [args access_token]: [args uid]: [args ext_only]]];
  [outProtocol writeMessageBeginWithName: @"user_info_get"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_task_list_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  task_list_args * args = [[task_list_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Task_list_result * result = [[Task_list_result alloc] init];
  [result setSuccess: [mService task_list: [args access_token]: [args type]: [args last_id]: [args num]]];
  [outProtocol writeMessageBeginWithName: @"task_list"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_task_get_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  task_get_args * args = [[task_get_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Task_get_result * result = [[Task_get_result alloc] init];
  [result setSuccess: [mService task_get: [args access_token]: [args tid]: [args ext_only]]];
  [outProtocol writeMessageBeginWithName: @"task_get"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_task_new_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  task_new_args * args = [[task_new_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Task_new_result * result = [[Task_new_result alloc] init];
  [result setSuccess: [mService task_new: [args access_token]: [args task]]];
  [outProtocol writeMessageBeginWithName: @"task_new"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_task_apply_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  task_apply_args * args = [[task_apply_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Task_apply_result * result = [[Task_apply_result alloc] init];
  [result setSuccess: [mService task_apply: [args access_token]: [args tid]]];
  [outProtocol writeMessageBeginWithName: @"task_apply"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_task_reject_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  task_reject_args * args = [[task_reject_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Task_reject_result * result = [[Task_reject_result alloc] init];
  [result setSuccess: [mService task_reject: [args access_token]: [args user_id]]];
  [outProtocol writeMessageBeginWithName: @"task_reject"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) process_task_accept_withSequenceID: (int32_t) seqID inProtocol: (id<TProtocol>) inProtocol outProtocol: (id<TProtocol>) outProtocol
{
  task_accept_args * args = [[task_accept_args alloc] init];
  [args read: inProtocol];
  [inProtocol readMessageEnd];
  Task_accept_result * result = [[Task_accept_result alloc] init];
  [result setSuccess: [mService task_accept: [args access_token]: [args user_id]]];
  [outProtocol writeMessageBeginWithName: @"task_accept"
                                    type: TMessageType_REPLY
                              sequenceID: seqID];
  [result write: outProtocol];
  [outProtocol writeMessageEnd];
  [[outProtocol transport] flush];
  [result release];
  [args release];
}

- (void) dealloc
{
  [mService release];
  [mMethodMap release];
  [super dealloc];
}

@end

