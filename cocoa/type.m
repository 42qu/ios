/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import <TProtocol.h>
#import <TApplicationException.h>
#import <TProtocolUtil.h>
#import <TProcessor.h>


#import "type.h"

@implementation AuthRequest

- (id) initWithClient_id: (NSString *) client_id client_serect: (NSString *) client_serect
{
  self = [super init];
  __client_id = [client_id retain];
  __client_id_isset = YES;
  __client_serect = [client_serect retain];
  __client_serect_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"client_id"])
  {
    __client_id = [[decoder decodeObjectForKey: @"client_id"] retain];
    __client_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"client_serect"])
  {
    __client_serect = [[decoder decodeObjectForKey: @"client_serect"] retain];
    __client_serect_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__client_id_isset)
  {
    [encoder encodeObject: __client_id forKey: @"client_id"];
  }
  if (__client_serect_isset)
  {
    [encoder encodeObject: __client_serect forKey: @"client_serect"];
  }
}

- (void) dealloc
{
  [__client_id release];
  [__client_serect release];
  [super dealloc];
}

- (NSString *) client_id {
  return [[__client_id retain] autorelease];
}

- (void) setClient_id: (NSString *) client_id {
  [client_id retain];
  [__client_id release];
  __client_id = client_id;
  __client_id_isset = YES;
}

- (BOOL) client_idIsSet {
  return __client_id_isset;
}

- (void) unsetClient_id {
  [__client_id release];
  __client_id = nil;
  __client_id_isset = NO;
}

- (NSString *) client_serect {
  return [[__client_serect retain] autorelease];
}

- (void) setClient_serect: (NSString *) client_serect {
  [client_serect retain];
  [__client_serect release];
  __client_serect = client_serect;
  __client_serect_isset = YES;
}

- (BOOL) client_serectIsSet {
  return __client_serect_isset;
}

- (void) unsetClient_serect {
  [__client_serect release];
  __client_serect = nil;
  __client_serect_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setClient_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setClient_serect: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AuthRequest"];
  if (__client_id_isset) {
    if (__client_id != nil) {
      [outProtocol writeFieldBeginWithName: @"client_id" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __client_id];
      [outProtocol writeFieldEnd];
    }
  }
  if (__client_serect_isset) {
    if (__client_serect != nil) {
      [outProtocol writeFieldBeginWithName: @"client_serect" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __client_serect];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AuthRequest("];
  [ms appendString: @"client_id:"];
  [ms appendFormat: @"\"%@\"", __client_id];
  [ms appendString: @",client_serect:"];
  [ms appendFormat: @"\"%@\"", __client_serect];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AuthResponse

- (id) initWithUid: (int64_t) uid name: (NSString *) name access_token: (NSString *) access_token refresh_token: (NSString *) refresh_token expire_time: (int64_t) expire_time
{
  self = [super init];
  __uid = uid;
  __uid_isset = YES;
  __name = [name retain];
  __name_isset = YES;
  __access_token = [access_token retain];
  __access_token_isset = YES;
  __refresh_token = [refresh_token retain];
  __refresh_token_isset = YES;
  __expire_time = expire_time;
  __expire_time_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"uid"])
  {
    __uid = [decoder decodeInt64ForKey: @"uid"];
    __uid_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"access_token"])
  {
    __access_token = [[decoder decodeObjectForKey: @"access_token"] retain];
    __access_token_isset = YES;
  }
  if ([decoder containsValueForKey: @"refresh_token"])
  {
    __refresh_token = [[decoder decodeObjectForKey: @"refresh_token"] retain];
    __refresh_token_isset = YES;
  }
  if ([decoder containsValueForKey: @"expire_time"])
  {
    __expire_time = [decoder decodeInt64ForKey: @"expire_time"];
    __expire_time_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__uid_isset)
  {
    [encoder encodeInt64: __uid forKey: @"uid"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__access_token_isset)
  {
    [encoder encodeObject: __access_token forKey: @"access_token"];
  }
  if (__refresh_token_isset)
  {
    [encoder encodeObject: __refresh_token forKey: @"refresh_token"];
  }
  if (__expire_time_isset)
  {
    [encoder encodeInt64: __expire_time forKey: @"expire_time"];
  }
}

- (void) dealloc
{
  [__name release];
  [__access_token release];
  [__refresh_token release];
  [super dealloc];
}

- (int64_t) uid {
  return __uid;
}

- (void) setUid: (int64_t) uid {
  __uid = uid;
  __uid_isset = YES;
}

- (BOOL) uidIsSet {
  return __uid_isset;
}

- (void) unsetUid {
  __uid_isset = NO;
}

- (NSString *) name {
  return [[__name retain] autorelease];
}

- (void) setName: (NSString *) name {
  [name retain];
  [__name release];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) access_token {
  return [[__access_token retain] autorelease];
}

- (void) setAccess_token: (NSString *) access_token {
  [access_token retain];
  [__access_token release];
  __access_token = access_token;
  __access_token_isset = YES;
}

- (BOOL) access_tokenIsSet {
  return __access_token_isset;
}

- (void) unsetAccess_token {
  [__access_token release];
  __access_token = nil;
  __access_token_isset = NO;
}

- (NSString *) refresh_token {
  return [[__refresh_token retain] autorelease];
}

- (void) setRefresh_token: (NSString *) refresh_token {
  [refresh_token retain];
  [__refresh_token release];
  __refresh_token = refresh_token;
  __refresh_token_isset = YES;
}

- (BOOL) refresh_tokenIsSet {
  return __refresh_token_isset;
}

- (void) unsetRefresh_token {
  [__refresh_token release];
  __refresh_token = nil;
  __refresh_token_isset = NO;
}

- (int64_t) expire_time {
  return __expire_time;
}

- (void) setExpire_time: (int64_t) expire_time {
  __expire_time = expire_time;
  __expire_time_isset = YES;
}

- (BOOL) expire_timeIsSet {
  return __expire_time_isset;
}

- (void) unsetExpire_time {
  __expire_time_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setUid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAccess_token: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setRefresh_token: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setExpire_time: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AuthResponse"];
  if (__uid_isset) {
    [outProtocol writeFieldBeginWithName: @"uid" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __uid];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__access_token_isset) {
    if (__access_token != nil) {
      [outProtocol writeFieldBeginWithName: @"access_token" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __access_token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__refresh_token_isset) {
    if (__refresh_token != nil) {
      [outProtocol writeFieldBeginWithName: @"refresh_token" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __refresh_token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__expire_time_isset) {
    [outProtocol writeFieldBeginWithName: @"expire_time" type: TType_I64 fieldID: 5];
    [outProtocol writeI64: __expire_time];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AuthResponse("];
  [ms appendString: @"uid:"];
  [ms appendFormat: @"%qi", __uid];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",access_token:"];
  [ms appendFormat: @"\"%@\"", __access_token];
  [ms appendString: @",refresh_token:"];
  [ms appendFormat: @"\"%@\"", __refresh_token];
  [ms appendString: @",expire_time:"];
  [ms appendFormat: @"%qi", __expire_time];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation UserInfo

- (id) initWithName: (NSString *) name sex: (int) sex org: (NSString *) org job: (NSString *) job small_avator: (NSString *) small_avator big_avator: (NSString *) big_avator intro: (NSString *) intro
{
  self = [super init];
  __name = [name retain];
  __name_isset = YES;
  __sex = sex;
  __sex_isset = YES;
  __org = [org retain];
  __org_isset = YES;
  __job = [job retain];
  __job_isset = YES;
  __small_avator = [small_avator retain];
  __small_avator_isset = YES;
  __big_avator = [big_avator retain];
  __big_avator_isset = YES;
  __intro = [intro retain];
  __intro_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"sex"])
  {
    __sex = [decoder decodeIntForKey: @"sex"];
    __sex_isset = YES;
  }
  if ([decoder containsValueForKey: @"org"])
  {
    __org = [[decoder decodeObjectForKey: @"org"] retain];
    __org_isset = YES;
  }
  if ([decoder containsValueForKey: @"job"])
  {
    __job = [[decoder decodeObjectForKey: @"job"] retain];
    __job_isset = YES;
  }
  if ([decoder containsValueForKey: @"small_avator"])
  {
    __small_avator = [[decoder decodeObjectForKey: @"small_avator"] retain];
    __small_avator_isset = YES;
  }
  if ([decoder containsValueForKey: @"big_avator"])
  {
    __big_avator = [[decoder decodeObjectForKey: @"big_avator"] retain];
    __big_avator_isset = YES;
  }
  if ([decoder containsValueForKey: @"intro"])
  {
    __intro = [[decoder decodeObjectForKey: @"intro"] retain];
    __intro_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__sex_isset)
  {
    [encoder encodeInt: __sex forKey: @"sex"];
  }
  if (__org_isset)
  {
    [encoder encodeObject: __org forKey: @"org"];
  }
  if (__job_isset)
  {
    [encoder encodeObject: __job forKey: @"job"];
  }
  if (__small_avator_isset)
  {
    [encoder encodeObject: __small_avator forKey: @"small_avator"];
  }
  if (__big_avator_isset)
  {
    [encoder encodeObject: __big_avator forKey: @"big_avator"];
  }
  if (__intro_isset)
  {
    [encoder encodeObject: __intro forKey: @"intro"];
  }
}

- (void) dealloc
{
  [__name release];
  [__org release];
  [__job release];
  [__small_avator release];
  [__big_avator release];
  [__intro release];
  [super dealloc];
}

- (NSString *) name {
  return [[__name retain] autorelease];
}

- (void) setName: (NSString *) name {
  [name retain];
  [__name release];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release];
  __name = nil;
  __name_isset = NO;
}

- (int) sex {
  return __sex;
}

- (void) setSex: (int) sex {
  __sex = sex;
  __sex_isset = YES;
}

- (BOOL) sexIsSet {
  return __sex_isset;
}

- (void) unsetSex {
  __sex_isset = NO;
}

- (NSString *) org {
  return [[__org retain] autorelease];
}

- (void) setOrg: (NSString *) org {
  [org retain];
  [__org release];
  __org = org;
  __org_isset = YES;
}

- (BOOL) orgIsSet {
  return __org_isset;
}

- (void) unsetOrg {
  [__org release];
  __org = nil;
  __org_isset = NO;
}

- (NSString *) job {
  return [[__job retain] autorelease];
}

- (void) setJob: (NSString *) job {
  [job retain];
  [__job release];
  __job = job;
  __job_isset = YES;
}

- (BOOL) jobIsSet {
  return __job_isset;
}

- (void) unsetJob {
  [__job release];
  __job = nil;
  __job_isset = NO;
}

- (NSString *) small_avator {
  return [[__small_avator retain] autorelease];
}

- (void) setSmall_avator: (NSString *) small_avator {
  [small_avator retain];
  [__small_avator release];
  __small_avator = small_avator;
  __small_avator_isset = YES;
}

- (BOOL) small_avatorIsSet {
  return __small_avator_isset;
}

- (void) unsetSmall_avator {
  [__small_avator release];
  __small_avator = nil;
  __small_avator_isset = NO;
}

- (NSString *) big_avator {
  return [[__big_avator retain] autorelease];
}

- (void) setBig_avator: (NSString *) big_avator {
  [big_avator retain];
  [__big_avator release];
  __big_avator = big_avator;
  __big_avator_isset = YES;
}

- (BOOL) big_avatorIsSet {
  return __big_avator_isset;
}

- (void) unsetBig_avator {
  [__big_avator release];
  __big_avator = nil;
  __big_avator_isset = NO;
}

- (NSString *) intro {
  return [[__intro retain] autorelease];
}

- (void) setIntro: (NSString *) intro {
  [intro retain];
  [__intro release];
  __intro = intro;
  __intro_isset = YES;
}

- (BOOL) introIsSet {
  return __intro_isset;
}

- (void) unsetIntro {
  [__intro release];
  __intro = nil;
  __intro_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setSex: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOrg: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setJob: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSmall_avator: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setBig_avator: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIntro: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UserInfo"];
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sex_isset) {
    [outProtocol writeFieldBeginWithName: @"sex" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __sex];
    [outProtocol writeFieldEnd];
  }
  if (__org_isset) {
    if (__org != nil) {
      [outProtocol writeFieldBeginWithName: @"org" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __org];
      [outProtocol writeFieldEnd];
    }
  }
  if (__job_isset) {
    if (__job != nil) {
      [outProtocol writeFieldBeginWithName: @"job" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __job];
      [outProtocol writeFieldEnd];
    }
  }
  if (__small_avator_isset) {
    if (__small_avator != nil) {
      [outProtocol writeFieldBeginWithName: @"small_avator" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __small_avator];
      [outProtocol writeFieldEnd];
    }
  }
  if (__big_avator_isset) {
    if (__big_avator != nil) {
      [outProtocol writeFieldBeginWithName: @"big_avator" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __big_avator];
      [outProtocol writeFieldEnd];
    }
  }
  if (__intro_isset) {
    if (__intro != nil) {
      [outProtocol writeFieldBeginWithName: @"intro" type: TType_STRING fieldID: 7];
      [outProtocol writeString: __intro];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"UserInfo("];
  [ms appendString: @"name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",sex:"];
  [ms appendFormat: @"%i", __sex];
  [ms appendString: @",org:"];
  [ms appendFormat: @"\"%@\"", __org];
  [ms appendString: @",job:"];
  [ms appendFormat: @"\"%@\"", __job];
  [ms appendString: @",small_avator:"];
  [ms appendFormat: @"\"%@\"", __small_avator];
  [ms appendString: @",big_avator:"];
  [ms appendFormat: @"\"%@\"", __big_avator];
  [ms appendString: @",intro:"];
  [ms appendFormat: @"\"%@\"", __intro];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TaskInfo

- (id) initWithTid: (int64_t) tid name: (NSString *) name intro: (NSString *) intro begin_time: (timestamp) begin_time end_time: (timestamp) end_time owner: (int64_t) owner user_apply_list: (NSArray *) user_apply_list user_accept_list: (NSArray *) user_accept_list user_reject_list: (NSArray *) user_reject_list
{
  self = [super init];
  __tid = tid;
  __tid_isset = YES;
  __name = [name retain];
  __name_isset = YES;
  __intro = [intro retain];
  __intro_isset = YES;
  __begin_time = begin_time;
  __begin_time_isset = YES;
  __end_time = end_time;
  __end_time_isset = YES;
  __owner = owner;
  __owner_isset = YES;
  __user_apply_list = [user_apply_list retain];
  __user_apply_list_isset = YES;
  __user_accept_list = [user_accept_list retain];
  __user_accept_list_isset = YES;
  __user_reject_list = [user_reject_list retain];
  __user_reject_list_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"tid"])
  {
    __tid = [decoder decodeInt64ForKey: @"tid"];
    __tid_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"intro"])
  {
    __intro = [[decoder decodeObjectForKey: @"intro"] retain];
    __intro_isset = YES;
  }
  if ([decoder containsValueForKey: @"begin_time"])
  {
    __begin_time = [decoder decodeInt64ForKey: @"begin_time"];
    __begin_time_isset = YES;
  }
  if ([decoder containsValueForKey: @"end_time"])
  {
    __end_time = [decoder decodeInt64ForKey: @"end_time"];
    __end_time_isset = YES;
  }
  if ([decoder containsValueForKey: @"owner"])
  {
    __owner = [decoder decodeInt64ForKey: @"owner"];
    __owner_isset = YES;
  }
  if ([decoder containsValueForKey: @"user_apply_list"])
  {
    __user_apply_list = [[decoder decodeObjectForKey: @"user_apply_list"] retain];
    __user_apply_list_isset = YES;
  }
  if ([decoder containsValueForKey: @"user_accept_list"])
  {
    __user_accept_list = [[decoder decodeObjectForKey: @"user_accept_list"] retain];
    __user_accept_list_isset = YES;
  }
  if ([decoder containsValueForKey: @"user_reject_list"])
  {
    __user_reject_list = [[decoder decodeObjectForKey: @"user_reject_list"] retain];
    __user_reject_list_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__tid_isset)
  {
    [encoder encodeInt64: __tid forKey: @"tid"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__intro_isset)
  {
    [encoder encodeObject: __intro forKey: @"intro"];
  }
  if (__begin_time_isset)
  {
    [encoder encodeInt64: __begin_time forKey: @"begin_time"];
  }
  if (__end_time_isset)
  {
    [encoder encodeInt64: __end_time forKey: @"end_time"];
  }
  if (__owner_isset)
  {
    [encoder encodeInt64: __owner forKey: @"owner"];
  }
  if (__user_apply_list_isset)
  {
    [encoder encodeObject: __user_apply_list forKey: @"user_apply_list"];
  }
  if (__user_accept_list_isset)
  {
    [encoder encodeObject: __user_accept_list forKey: @"user_accept_list"];
  }
  if (__user_reject_list_isset)
  {
    [encoder encodeObject: __user_reject_list forKey: @"user_reject_list"];
  }
}

- (void) dealloc
{
  [__name release];
  [__intro release];
  [__user_apply_list release];
  [__user_accept_list release];
  [__user_reject_list release];
  [super dealloc];
}

- (int64_t) tid {
  return __tid;
}

- (void) setTid: (int64_t) tid {
  __tid = tid;
  __tid_isset = YES;
}

- (BOOL) tidIsSet {
  return __tid_isset;
}

- (void) unsetTid {
  __tid_isset = NO;
}

- (NSString *) name {
  return [[__name retain] autorelease];
}

- (void) setName: (NSString *) name {
  [name retain];
  [__name release];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release];
  __name = nil;
  __name_isset = NO;
}

- (NSString *) intro {
  return [[__intro retain] autorelease];
}

- (void) setIntro: (NSString *) intro {
  [intro retain];
  [__intro release];
  __intro = intro;
  __intro_isset = YES;
}

- (BOOL) introIsSet {
  return __intro_isset;
}

- (void) unsetIntro {
  [__intro release];
  __intro = nil;
  __intro_isset = NO;
}

- (int64_t) begin_time {
  return __begin_time;
}

- (void) setBegin_time: (int64_t) begin_time {
  __begin_time = begin_time;
  __begin_time_isset = YES;
}

- (BOOL) begin_timeIsSet {
  return __begin_time_isset;
}

- (void) unsetBegin_time {
  __begin_time_isset = NO;
}

- (int64_t) end_time {
  return __end_time;
}

- (void) setEnd_time: (int64_t) end_time {
  __end_time = end_time;
  __end_time_isset = YES;
}

- (BOOL) end_timeIsSet {
  return __end_time_isset;
}

- (void) unsetEnd_time {
  __end_time_isset = NO;
}

- (int64_t) owner {
  return __owner;
}

- (void) setOwner: (int64_t) owner {
  __owner = owner;
  __owner_isset = YES;
}

- (BOOL) ownerIsSet {
  return __owner_isset;
}

- (void) unsetOwner {
  __owner_isset = NO;
}

- (NSArray *) user_apply_list {
  return [[__user_apply_list retain] autorelease];
}

- (void) setUser_apply_list: (NSArray *) user_apply_list {
  [user_apply_list retain];
  [__user_apply_list release];
  __user_apply_list = user_apply_list;
  __user_apply_list_isset = YES;
}

- (BOOL) user_apply_listIsSet {
  return __user_apply_list_isset;
}

- (void) unsetUser_apply_list {
  [__user_apply_list release];
  __user_apply_list = nil;
  __user_apply_list_isset = NO;
}

- (NSArray *) user_accept_list {
  return [[__user_accept_list retain] autorelease];
}

- (void) setUser_accept_list: (NSArray *) user_accept_list {
  [user_accept_list retain];
  [__user_accept_list release];
  __user_accept_list = user_accept_list;
  __user_accept_list_isset = YES;
}

- (BOOL) user_accept_listIsSet {
  return __user_accept_list_isset;
}

- (void) unsetUser_accept_list {
  [__user_accept_list release];
  __user_accept_list = nil;
  __user_accept_list_isset = NO;
}

- (NSArray *) user_reject_list {
  return [[__user_reject_list retain] autorelease];
}

- (void) setUser_reject_list: (NSArray *) user_reject_list {
  [user_reject_list retain];
  [__user_reject_list release];
  __user_reject_list = user_reject_list;
  __user_reject_list_isset = YES;
}

- (BOOL) user_reject_listIsSet {
  return __user_reject_list_isset;
}

- (void) unsetUser_reject_list {
  [__user_reject_list release];
  __user_reject_list = nil;
  __user_reject_list_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setTid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIntro: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setBegin_time: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setEnd_time: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setOwner: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            int64_t _elem2 = [inProtocol readI64];
            [fieldValue addObject: [NSNumber numberWithLongLong: _elem2]];
          }
          [inProtocol readListEnd];
          [self setUser_apply_list: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 8:
        if (fieldType == TType_LIST) {
          int _size3;
          [inProtocol readListBeginReturningElementType: NULL size: &_size3];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size3];
          int _i4;
          for (_i4 = 0; _i4 < _size3; ++_i4)
          {
            int64_t _elem5 = [inProtocol readI64];
            [fieldValue addObject: [NSNumber numberWithLongLong: _elem5]];
          }
          [inProtocol readListEnd];
          [self setUser_accept_list: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 9:
        if (fieldType == TType_LIST) {
          int _size6;
          [inProtocol readListBeginReturningElementType: NULL size: &_size6];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size6];
          int _i7;
          for (_i7 = 0; _i7 < _size6; ++_i7)
          {
            int64_t _elem8 = [inProtocol readI64];
            [fieldValue addObject: [NSNumber numberWithLongLong: _elem8]];
          }
          [inProtocol readListEnd];
          [self setUser_reject_list: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TaskInfo"];
  if (__tid_isset) {
    [outProtocol writeFieldBeginWithName: @"tid" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __tid];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__intro_isset) {
    if (__intro != nil) {
      [outProtocol writeFieldBeginWithName: @"intro" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __intro];
      [outProtocol writeFieldEnd];
    }
  }
  if (__begin_time_isset) {
    [outProtocol writeFieldBeginWithName: @"begin_time" type: TType_I64 fieldID: 4];
    [outProtocol writeI64: __begin_time];
    [outProtocol writeFieldEnd];
  }
  if (__end_time_isset) {
    [outProtocol writeFieldBeginWithName: @"end_time" type: TType_I64 fieldID: 5];
    [outProtocol writeI64: __end_time];
    [outProtocol writeFieldEnd];
  }
  if (__owner_isset) {
    [outProtocol writeFieldBeginWithName: @"owner" type: TType_I64 fieldID: 6];
    [outProtocol writeI64: __owner];
    [outProtocol writeFieldEnd];
  }
  if (__user_apply_list_isset) {
    if (__user_apply_list != nil) {
      [outProtocol writeFieldBeginWithName: @"user_apply_list" type: TType_LIST fieldID: 7];
      {
        [outProtocol writeListBeginWithElementType: TType_I64 size: [__user_apply_list count]];
        int i10;
        for (i10 = 0; i10 < [__user_apply_list count]; i10++)
        {
          [outProtocol writeI64: [[__user_apply_list objectAtIndex: i10] longLongValue]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__user_accept_list_isset) {
    if (__user_accept_list != nil) {
      [outProtocol writeFieldBeginWithName: @"user_accept_list" type: TType_LIST fieldID: 8];
      {
        [outProtocol writeListBeginWithElementType: TType_I64 size: [__user_accept_list count]];
        int i12;
        for (i12 = 0; i12 < [__user_accept_list count]; i12++)
        {
          [outProtocol writeI64: [[__user_accept_list objectAtIndex: i12] longLongValue]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__user_reject_list_isset) {
    if (__user_reject_list != nil) {
      [outProtocol writeFieldBeginWithName: @"user_reject_list" type: TType_LIST fieldID: 9];
      {
        [outProtocol writeListBeginWithElementType: TType_I64 size: [__user_reject_list count]];
        int i14;
        for (i14 = 0; i14 < [__user_reject_list count]; i14++)
        {
          [outProtocol writeI64: [[__user_reject_list objectAtIndex: i14] longLongValue]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TaskInfo("];
  [ms appendString: @"tid:"];
  [ms appendFormat: @"%qi", __tid];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",intro:"];
  [ms appendFormat: @"\"%@\"", __intro];
  [ms appendString: @",begin_time:"];
  [ms appendFormat: @"%qi", __begin_time];
  [ms appendString: @",end_time:"];
  [ms appendFormat: @"%qi", __end_time];
  [ms appendString: @",owner:"];
  [ms appendFormat: @"%qi", __owner];
  [ms appendString: @",user_apply_list:"];
  [ms appendFormat: @"%@", __user_apply_list];
  [ms appendString: @",user_accept_list:"];
  [ms appendFormat: @"%@", __user_accept_list];
  [ms appendString: @",user_reject_list:"];
  [ms appendFormat: @"%@", __user_reject_list];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TaskSummary

- (id) initWithRecommend: (NSArray *) recommend nearby: (NSArray *) nearby follow: (NSArray *) follow
{
  self = [super init];
  __recommend = [recommend retain];
  __recommend_isset = YES;
  __nearby = [nearby retain];
  __nearby_isset = YES;
  __follow = [follow retain];
  __follow_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"recommend"])
  {
    __recommend = [[decoder decodeObjectForKey: @"recommend"] retain];
    __recommend_isset = YES;
  }
  if ([decoder containsValueForKey: @"nearby"])
  {
    __nearby = [[decoder decodeObjectForKey: @"nearby"] retain];
    __nearby_isset = YES;
  }
  if ([decoder containsValueForKey: @"follow"])
  {
    __follow = [[decoder decodeObjectForKey: @"follow"] retain];
    __follow_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__recommend_isset)
  {
    [encoder encodeObject: __recommend forKey: @"recommend"];
  }
  if (__nearby_isset)
  {
    [encoder encodeObject: __nearby forKey: @"nearby"];
  }
  if (__follow_isset)
  {
    [encoder encodeObject: __follow forKey: @"follow"];
  }
}

- (void) dealloc
{
  [__recommend release];
  [__nearby release];
  [__follow release];
  [super dealloc];
}

- (NSArray *) recommend {
  return [[__recommend retain] autorelease];
}

- (void) setRecommend: (NSArray *) recommend {
  [recommend retain];
  [__recommend release];
  __recommend = recommend;
  __recommend_isset = YES;
}

- (BOOL) recommendIsSet {
  return __recommend_isset;
}

- (void) unsetRecommend {
  [__recommend release];
  __recommend = nil;
  __recommend_isset = NO;
}

- (NSArray *) nearby {
  return [[__nearby retain] autorelease];
}

- (void) setNearby: (NSArray *) nearby {
  [nearby retain];
  [__nearby release];
  __nearby = nearby;
  __nearby_isset = YES;
}

- (BOOL) nearbyIsSet {
  return __nearby_isset;
}

- (void) unsetNearby {
  [__nearby release];
  __nearby = nil;
  __nearby_isset = NO;
}

- (NSArray *) follow {
  return [[__follow retain] autorelease];
}

- (void) setFollow: (NSArray *) follow {
  [follow retain];
  [__follow release];
  __follow = follow;
  __follow_isset = YES;
}

- (BOOL) followIsSet {
  return __follow_isset;
}

- (void) unsetFollow {
  [__follow release];
  __follow = nil;
  __follow_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size15;
          [inProtocol readListBeginReturningElementType: NULL size: &_size15];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size15];
          int _i16;
          for (_i16 = 0; _i16 < _size15; ++_i16)
          {
            int64_t _elem17 = [inProtocol readI64];
            [fieldValue addObject: [NSNumber numberWithLongLong: _elem17]];
          }
          [inProtocol readListEnd];
          [self setRecommend: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size18;
          [inProtocol readListBeginReturningElementType: NULL size: &_size18];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size18];
          int _i19;
          for (_i19 = 0; _i19 < _size18; ++_i19)
          {
            int64_t _elem20 = [inProtocol readI64];
            [fieldValue addObject: [NSNumber numberWithLongLong: _elem20]];
          }
          [inProtocol readListEnd];
          [self setNearby: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size21;
          [inProtocol readListBeginReturningElementType: NULL size: &_size21];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size21];
          int _i22;
          for (_i22 = 0; _i22 < _size21; ++_i22)
          {
            int64_t _elem23 = [inProtocol readI64];
            [fieldValue addObject: [NSNumber numberWithLongLong: _elem23]];
          }
          [inProtocol readListEnd];
          [self setFollow: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TaskSummary"];
  if (__recommend_isset) {
    if (__recommend != nil) {
      [outProtocol writeFieldBeginWithName: @"recommend" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_I64 size: [__recommend count]];
        int i25;
        for (i25 = 0; i25 < [__recommend count]; i25++)
        {
          [outProtocol writeI64: [[__recommend objectAtIndex: i25] longLongValue]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__nearby_isset) {
    if (__nearby != nil) {
      [outProtocol writeFieldBeginWithName: @"nearby" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_I64 size: [__nearby count]];
        int i27;
        for (i27 = 0; i27 < [__nearby count]; i27++)
        {
          [outProtocol writeI64: [[__nearby objectAtIndex: i27] longLongValue]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__follow_isset) {
    if (__follow != nil) {
      [outProtocol writeFieldBeginWithName: @"follow" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_I64 size: [__follow count]];
        int i29;
        for (i29 = 0; i29 < [__follow count]; i29++)
        {
          [outProtocol writeI64: [[__follow objectAtIndex: i29] longLongValue]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TaskSummary("];
  [ms appendString: @"recommend:"];
  [ms appendFormat: @"%@", __recommend];
  [ms appendString: @",nearby:"];
  [ms appendFormat: @"%@", __nearby];
  [ms appendString: @",follow:"];
  [ms appendFormat: @"%@", __follow];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation typeConstants
+ (void) initialize {
}
@end

