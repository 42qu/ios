/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */

#import <Foundation/Foundation.h>

#import <TProtocol.h>
#import <TApplicationException.h>
#import <TProtocolUtil.h>
#import <TProcessor.h>


#import "type.h"

@implementation AuthRequest

- (id) initWithClient_id: (int64_t) client_id client_secret: (NSString *) client_secret mail: (NSString *) mail password: (NSString *) password
{
  self = [super init];
  __client_id = client_id;
  __client_id_isset = YES;
  __client_secret = [client_secret retain];
  __client_secret_isset = YES;
  __mail = [mail retain];
  __mail_isset = YES;
  __password = [password retain];
  __password_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"client_id"])
  {
    __client_id = [decoder decodeInt64ForKey: @"client_id"];
    __client_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"client_secret"])
  {
    __client_secret = [[decoder decodeObjectForKey: @"client_secret"] retain];
    __client_secret_isset = YES;
  }
  if ([decoder containsValueForKey: @"mail"])
  {
    __mail = [[decoder decodeObjectForKey: @"mail"] retain];
    __mail_isset = YES;
  }
  if ([decoder containsValueForKey: @"password"])
  {
    __password = [[decoder decodeObjectForKey: @"password"] retain];
    __password_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__client_id_isset)
  {
    [encoder encodeInt64: __client_id forKey: @"client_id"];
  }
  if (__client_secret_isset)
  {
    [encoder encodeObject: __client_secret forKey: @"client_secret"];
  }
  if (__mail_isset)
  {
    [encoder encodeObject: __mail forKey: @"mail"];
  }
  if (__password_isset)
  {
    [encoder encodeObject: __password forKey: @"password"];
  }
}

- (void) dealloc
{
  [__client_secret release];
  [__mail release];
  [__password release];
  [super dealloc];
}

- (int64_t) client_id {
  return __client_id;
}

- (void) setClient_id: (int64_t) client_id {
  __client_id = client_id;
  __client_id_isset = YES;
}

- (BOOL) client_idIsSet {
  return __client_id_isset;
}

- (void) unsetClient_id {
  __client_id_isset = NO;
}

- (NSString *) client_secret {
  return [[__client_secret retain] autorelease];
}

- (void) setClient_secret: (NSString *) client_secret {
  [client_secret retain];
  [__client_secret release];
  __client_secret = client_secret;
  __client_secret_isset = YES;
}

- (BOOL) client_secretIsSet {
  return __client_secret_isset;
}

- (void) unsetClient_secret {
  [__client_secret release];
  __client_secret = nil;
  __client_secret_isset = NO;
}

- (NSString *) mail {
  return [[__mail retain] autorelease];
}

- (void) setMail: (NSString *) mail {
  [mail retain];
  [__mail release];
  __mail = mail;
  __mail_isset = YES;
}

- (BOOL) mailIsSet {
  return __mail_isset;
}

- (void) unsetMail {
  [__mail release];
  __mail = nil;
  __mail_isset = NO;
}

- (NSString *) password {
  return [[__password retain] autorelease];
}

- (void) setPassword: (NSString *) password {
  [password retain];
  [__password release];
  __password = password;
  __password_isset = YES;
}

- (BOOL) passwordIsSet {
  return __password_isset;
}

- (void) unsetPassword {
  [__password release];
  __password = nil;
  __password_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setClient_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setClient_secret: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setMail: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setPassword: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AuthRequest"];
  if (__client_id_isset) {
    [outProtocol writeFieldBeginWithName: @"client_id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __client_id];
    [outProtocol writeFieldEnd];
  }
  if (__client_secret_isset) {
    if (__client_secret != nil) {
      [outProtocol writeFieldBeginWithName: @"client_secret" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __client_secret];
      [outProtocol writeFieldEnd];
    }
  }
  if (__mail_isset) {
    if (__mail != nil) {
      [outProtocol writeFieldBeginWithName: @"mail" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __mail];
      [outProtocol writeFieldEnd];
    }
  }
  if (__password_isset) {
    if (__password != nil) {
      [outProtocol writeFieldBeginWithName: @"password" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __password];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AuthRequest("];
  [ms appendString: @"client_id:"];
  [ms appendFormat: @"%qi", __client_id];
  [ms appendString: @",client_secret:"];
  [ms appendFormat: @"\"%@\"", __client_secret];
  [ms appendString: @",mail:"];
  [ms appendFormat: @"\"%@\"", __mail];
  [ms appendString: @",password:"];
  [ms appendFormat: @"\"%@\"", __password];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation AuthResponse

- (id) initWithAccess_token: (NSString *) access_token expire_in: (timestamp) expire_in user_id: (int64_t) user_id
{
  self = [super init];
  __access_token = [access_token retain];
  __access_token_isset = YES;
  __expire_in = expire_in;
  __expire_in_isset = YES;
  __user_id = user_id;
  __user_id_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"access_token"])
  {
    __access_token = [[decoder decodeObjectForKey: @"access_token"] retain];
    __access_token_isset = YES;
  }
  if ([decoder containsValueForKey: @"expire_in"])
  {
    __expire_in = [decoder decodeInt64ForKey: @"expire_in"];
    __expire_in_isset = YES;
  }
  if ([decoder containsValueForKey: @"user_id"])
  {
    __user_id = [decoder decodeInt64ForKey: @"user_id"];
    __user_id_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__access_token_isset)
  {
    [encoder encodeObject: __access_token forKey: @"access_token"];
  }
  if (__expire_in_isset)
  {
    [encoder encodeInt64: __expire_in forKey: @"expire_in"];
  }
  if (__user_id_isset)
  {
    [encoder encodeInt64: __user_id forKey: @"user_id"];
  }
}

- (void) dealloc
{
  [__access_token release];
  [super dealloc];
}

- (NSString *) access_token {
  return [[__access_token retain] autorelease];
}

- (void) setAccess_token: (NSString *) access_token {
  [access_token retain];
  [__access_token release];
  __access_token = access_token;
  __access_token_isset = YES;
}

- (BOOL) access_tokenIsSet {
  return __access_token_isset;
}

- (void) unsetAccess_token {
  [__access_token release];
  __access_token = nil;
  __access_token_isset = NO;
}

- (int64_t) expire_in {
  return __expire_in;
}

- (void) setExpire_in: (int64_t) expire_in {
  __expire_in = expire_in;
  __expire_in_isset = YES;
}

- (BOOL) expire_inIsSet {
  return __expire_in_isset;
}

- (void) unsetExpire_in {
  __expire_in_isset = NO;
}

- (int64_t) user_id {
  return __user_id;
}

- (void) setUser_id: (int64_t) user_id {
  __user_id = user_id;
  __user_id_isset = YES;
}

- (BOOL) user_idIsSet {
  return __user_id_isset;
}

- (void) unsetUser_id {
  __user_id_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAccess_token: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setExpire_in: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setUser_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"AuthResponse"];
  if (__access_token_isset) {
    if (__access_token != nil) {
      [outProtocol writeFieldBeginWithName: @"access_token" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __access_token];
      [outProtocol writeFieldEnd];
    }
  }
  if (__expire_in_isset) {
    [outProtocol writeFieldBeginWithName: @"expire_in" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __expire_in];
    [outProtocol writeFieldEnd];
  }
  if (__user_id_isset) {
    [outProtocol writeFieldBeginWithName: @"user_id" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __user_id];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"AuthResponse("];
  [ms appendString: @"access_token:"];
  [ms appendFormat: @"\"%@\"", __access_token];
  [ms appendString: @",expire_in:"];
  [ms appendFormat: @"%qi", __expire_in];
  [ms appendString: @",user_id:"];
  [ms appendFormat: @"%qi", __user_id];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation UserBasic

- (id) initWithUser_id: (int64_t) user_id name: (NSString *) name gender: (int) gender org: (NSString *) org job: (NSString *) job avator: (NSString *) avator
{
  self = [super init];
  __user_id = user_id;
  __user_id_isset = YES;
  __name = [name retain];
  __name_isset = YES;
  __gender = gender;
  __gender_isset = YES;
  __org = [org retain];
  __org_isset = YES;
  __job = [job retain];
  __job_isset = YES;
  __avator = [avator retain];
  __avator_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"user_id"])
  {
    __user_id = [decoder decodeInt64ForKey: @"user_id"];
    __user_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"name"])
  {
    __name = [[decoder decodeObjectForKey: @"name"] retain];
    __name_isset = YES;
  }
  if ([decoder containsValueForKey: @"gender"])
  {
    __gender = [decoder decodeIntForKey: @"gender"];
    __gender_isset = YES;
  }
  if ([decoder containsValueForKey: @"org"])
  {
    __org = [[decoder decodeObjectForKey: @"org"] retain];
    __org_isset = YES;
  }
  if ([decoder containsValueForKey: @"job"])
  {
    __job = [[decoder decodeObjectForKey: @"job"] retain];
    __job_isset = YES;
  }
  if ([decoder containsValueForKey: @"avator"])
  {
    __avator = [[decoder decodeObjectForKey: @"avator"] retain];
    __avator_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__user_id_isset)
  {
    [encoder encodeInt64: __user_id forKey: @"user_id"];
  }
  if (__name_isset)
  {
    [encoder encodeObject: __name forKey: @"name"];
  }
  if (__gender_isset)
  {
    [encoder encodeInt: __gender forKey: @"gender"];
  }
  if (__org_isset)
  {
    [encoder encodeObject: __org forKey: @"org"];
  }
  if (__job_isset)
  {
    [encoder encodeObject: __job forKey: @"job"];
  }
  if (__avator_isset)
  {
    [encoder encodeObject: __avator forKey: @"avator"];
  }
}

- (void) dealloc
{
  [__name release];
  [__org release];
  [__job release];
  [__avator release];
  [super dealloc];
}

- (int64_t) user_id {
  return __user_id;
}

- (void) setUser_id: (int64_t) user_id {
  __user_id = user_id;
  __user_id_isset = YES;
}

- (BOOL) user_idIsSet {
  return __user_id_isset;
}

- (void) unsetUser_id {
  __user_id_isset = NO;
}

- (NSString *) name {
  return [[__name retain] autorelease];
}

- (void) setName: (NSString *) name {
  [name retain];
  [__name release];
  __name = name;
  __name_isset = YES;
}

- (BOOL) nameIsSet {
  return __name_isset;
}

- (void) unsetName {
  [__name release];
  __name = nil;
  __name_isset = NO;
}

- (int) gender {
  return __gender;
}

- (void) setGender: (int) gender {
  __gender = gender;
  __gender_isset = YES;
}

- (BOOL) genderIsSet {
  return __gender_isset;
}

- (void) unsetGender {
  __gender_isset = NO;
}

- (NSString *) org {
  return [[__org retain] autorelease];
}

- (void) setOrg: (NSString *) org {
  [org retain];
  [__org release];
  __org = org;
  __org_isset = YES;
}

- (BOOL) orgIsSet {
  return __org_isset;
}

- (void) unsetOrg {
  [__org release];
  __org = nil;
  __org_isset = NO;
}

- (NSString *) job {
  return [[__job retain] autorelease];
}

- (void) setJob: (NSString *) job {
  [job retain];
  [__job release];
  __job = job;
  __job_isset = YES;
}

- (BOOL) jobIsSet {
  return __job_isset;
}

- (void) unsetJob {
  [__job release];
  __job = nil;
  __job_isset = NO;
}

- (NSString *) avator {
  return [[__avator retain] autorelease];
}

- (void) setAvator: (NSString *) avator {
  [avator retain];
  [__avator release];
  __avator = avator;
  __avator_isset = YES;
}

- (BOOL) avatorIsSet {
  return __avator_isset;
}

- (void) unsetAvator {
  [__avator release];
  __avator = nil;
  __avator_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setUser_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setName: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setGender: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setOrg: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setJob: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 6:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setAvator: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UserBasic"];
  if (__user_id_isset) {
    [outProtocol writeFieldBeginWithName: @"user_id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __user_id];
    [outProtocol writeFieldEnd];
  }
  if (__name_isset) {
    if (__name != nil) {
      [outProtocol writeFieldBeginWithName: @"name" type: TType_STRING fieldID: 2];
      [outProtocol writeString: __name];
      [outProtocol writeFieldEnd];
    }
  }
  if (__gender_isset) {
    [outProtocol writeFieldBeginWithName: @"gender" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __gender];
    [outProtocol writeFieldEnd];
  }
  if (__org_isset) {
    if (__org != nil) {
      [outProtocol writeFieldBeginWithName: @"org" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __org];
      [outProtocol writeFieldEnd];
    }
  }
  if (__job_isset) {
    if (__job != nil) {
      [outProtocol writeFieldBeginWithName: @"job" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __job];
      [outProtocol writeFieldEnd];
    }
  }
  if (__avator_isset) {
    if (__avator != nil) {
      [outProtocol writeFieldBeginWithName: @"avator" type: TType_STRING fieldID: 6];
      [outProtocol writeString: __avator];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"UserBasic("];
  [ms appendString: @"user_id:"];
  [ms appendFormat: @"%qi", __user_id];
  [ms appendString: @",name:"];
  [ms appendFormat: @"\"%@\"", __name];
  [ms appendString: @",gender:"];
  [ms appendFormat: @"%i", __gender];
  [ms appendString: @",org:"];
  [ms appendFormat: @"\"%@\"", __org];
  [ms appendString: @",job:"];
  [ms appendFormat: @"\"%@\"", __job];
  [ms appendString: @",avator:"];
  [ms appendFormat: @"\"%@\"", __avator];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation UserExt

- (id) initWithIntro: (NSString *) intro following: (NSArray *) following followed: (NSArray *) followed
{
  self = [super init];
  __intro = [intro retain];
  __intro_isset = YES;
  __following = [following retain];
  __following_isset = YES;
  __followed = [followed retain];
  __followed_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"intro"])
  {
    __intro = [[decoder decodeObjectForKey: @"intro"] retain];
    __intro_isset = YES;
  }
  if ([decoder containsValueForKey: @"following"])
  {
    __following = [[decoder decodeObjectForKey: @"following"] retain];
    __following_isset = YES;
  }
  if ([decoder containsValueForKey: @"followed"])
  {
    __followed = [[decoder decodeObjectForKey: @"followed"] retain];
    __followed_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__intro_isset)
  {
    [encoder encodeObject: __intro forKey: @"intro"];
  }
  if (__following_isset)
  {
    [encoder encodeObject: __following forKey: @"following"];
  }
  if (__followed_isset)
  {
    [encoder encodeObject: __followed forKey: @"followed"];
  }
}

- (void) dealloc
{
  [__intro release];
  [__following release];
  [__followed release];
  [super dealloc];
}

- (NSString *) intro {
  return [[__intro retain] autorelease];
}

- (void) setIntro: (NSString *) intro {
  [intro retain];
  [__intro release];
  __intro = intro;
  __intro_isset = YES;
}

- (BOOL) introIsSet {
  return __intro_isset;
}

- (void) unsetIntro {
  [__intro release];
  __intro = nil;
  __intro_isset = NO;
}

- (NSArray *) following {
  return [[__following retain] autorelease];
}

- (void) setFollowing: (NSArray *) following {
  [following retain];
  [__following release];
  __following = following;
  __following_isset = YES;
}

- (BOOL) followingIsSet {
  return __following_isset;
}

- (void) unsetFollowing {
  [__following release];
  __following = nil;
  __following_isset = NO;
}

- (NSArray *) followed {
  return [[__followed retain] autorelease];
}

- (void) setFollowed: (NSArray *) followed {
  [followed retain];
  [__followed release];
  __followed = followed;
  __followed_isset = YES;
}

- (BOOL) followedIsSet {
  return __followed_isset;
}

- (void) unsetFollowed {
  [__followed release];
  __followed = nil;
  __followed_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIntro: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size0;
          [inProtocol readListBeginReturningElementType: NULL size: &_size0];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size0];
          int _i1;
          for (_i1 = 0; _i1 < _size0; ++_i1)
          {
            int64_t _elem2 = [inProtocol readI64];
            [fieldValue addObject: [NSNumber numberWithLongLong: _elem2]];
          }
          [inProtocol readListEnd];
          [self setFollowing: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size3;
          [inProtocol readListBeginReturningElementType: NULL size: &_size3];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size3];
          int _i4;
          for (_i4 = 0; _i4 < _size3; ++_i4)
          {
            int64_t _elem5 = [inProtocol readI64];
            [fieldValue addObject: [NSNumber numberWithLongLong: _elem5]];
          }
          [inProtocol readListEnd];
          [self setFollowed: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"UserExt"];
  if (__intro_isset) {
    if (__intro != nil) {
      [outProtocol writeFieldBeginWithName: @"intro" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __intro];
      [outProtocol writeFieldEnd];
    }
  }
  if (__following_isset) {
    if (__following != nil) {
      [outProtocol writeFieldBeginWithName: @"following" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_I64 size: [__following count]];
        int i7;
        for (i7 = 0; i7 < [__following count]; i7++)
        {
          [outProtocol writeI64: [[__following objectAtIndex: i7] longLongValue]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__followed_isset) {
    if (__followed != nil) {
      [outProtocol writeFieldBeginWithName: @"followed" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_I64 size: [__followed count]];
        int i9;
        for (i9 = 0; i9 < [__followed count]; i9++)
        {
          [outProtocol writeI64: [[__followed objectAtIndex: i9] longLongValue]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"UserExt("];
  [ms appendString: @"intro:"];
  [ms appendFormat: @"\"%@\"", __intro];
  [ms appendString: @",following:"];
  [ms appendFormat: @"%@", __following];
  [ms appendString: @",followed:"];
  [ms appendFormat: @"%@", __followed];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation User

- (id) initWithBasic: (UserBasic *) basic ext: (UserExt *) ext
{
  self = [super init];
  __basic = [basic retain];
  __basic_isset = YES;
  __ext = [ext retain];
  __ext_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"basic"])
  {
    __basic = [[decoder decodeObjectForKey: @"basic"] retain];
    __basic_isset = YES;
  }
  if ([decoder containsValueForKey: @"ext"])
  {
    __ext = [[decoder decodeObjectForKey: @"ext"] retain];
    __ext_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__basic_isset)
  {
    [encoder encodeObject: __basic forKey: @"basic"];
  }
  if (__ext_isset)
  {
    [encoder encodeObject: __ext forKey: @"ext"];
  }
}

- (void) dealloc
{
  [__basic release];
  [__ext release];
  [super dealloc];
}

- (UserBasic *) basic {
  return [[__basic retain] autorelease];
}

- (void) setBasic: (UserBasic *) basic {
  [basic retain];
  [__basic release];
  __basic = basic;
  __basic_isset = YES;
}

- (BOOL) basicIsSet {
  return __basic_isset;
}

- (void) unsetBasic {
  [__basic release];
  __basic = nil;
  __basic_isset = NO;
}

- (UserExt *) ext {
  return [[__ext retain] autorelease];
}

- (void) setExt: (UserExt *) ext {
  [ext retain];
  [__ext release];
  __ext = ext;
  __ext_isset = YES;
}

- (BOOL) extIsSet {
  return __ext_isset;
}

- (void) unsetExt {
  [__ext release];
  __ext = nil;
  __ext_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          UserBasic *fieldValue = [[UserBasic alloc] init];
          [fieldValue read: inProtocol];
          [self setBasic: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          UserExt *fieldValue = [[UserExt alloc] init];
          [fieldValue read: inProtocol];
          [self setExt: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"User"];
  if (__basic_isset) {
    if (__basic != nil) {
      [outProtocol writeFieldBeginWithName: @"basic" type: TType_STRUCT fieldID: 1];
      [__basic write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__ext_isset) {
    if (__ext != nil) {
      [outProtocol writeFieldBeginWithName: @"ext" type: TType_STRUCT fieldID: 2];
      [__ext write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"User("];
  [ms appendString: @"basic:"];
  [ms appendFormat: @"%@", __basic];
  [ms appendString: @",ext:"];
  [ms appendFormat: @"%@", __ext];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TaskBasic

- (id) initWithTask_id: (int64_t) task_id state: (int) state title: (NSString *) title intro: (NSString *) intro cover: (NSString *) cover sponsor: (UserBasic *) sponsor
{
  self = [super init];
  __task_id = task_id;
  __task_id_isset = YES;
  __state = state;
  __state_isset = YES;
  __title = [title retain];
  __title_isset = YES;
  __intro = [intro retain];
  __intro_isset = YES;
  __cover = [cover retain];
  __cover_isset = YES;
  __sponsor = [sponsor retain];
  __sponsor_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"task_id"])
  {
    __task_id = [decoder decodeInt64ForKey: @"task_id"];
    __task_id_isset = YES;
  }
  if ([decoder containsValueForKey: @"state"])
  {
    __state = [decoder decodeIntForKey: @"state"];
    __state_isset = YES;
  }
  if ([decoder containsValueForKey: @"title"])
  {
    __title = [[decoder decodeObjectForKey: @"title"] retain];
    __title_isset = YES;
  }
  if ([decoder containsValueForKey: @"intro"])
  {
    __intro = [[decoder decodeObjectForKey: @"intro"] retain];
    __intro_isset = YES;
  }
  if ([decoder containsValueForKey: @"cover"])
  {
    __cover = [[decoder decodeObjectForKey: @"cover"] retain];
    __cover_isset = YES;
  }
  if ([decoder containsValueForKey: @"sponsor"])
  {
    __sponsor = [[decoder decodeObjectForKey: @"sponsor"] retain];
    __sponsor_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__task_id_isset)
  {
    [encoder encodeInt64: __task_id forKey: @"task_id"];
  }
  if (__state_isset)
  {
    [encoder encodeInt: __state forKey: @"state"];
  }
  if (__title_isset)
  {
    [encoder encodeObject: __title forKey: @"title"];
  }
  if (__intro_isset)
  {
    [encoder encodeObject: __intro forKey: @"intro"];
  }
  if (__cover_isset)
  {
    [encoder encodeObject: __cover forKey: @"cover"];
  }
  if (__sponsor_isset)
  {
    [encoder encodeObject: __sponsor forKey: @"sponsor"];
  }
}

- (void) dealloc
{
  [__title release];
  [__intro release];
  [__cover release];
  [__sponsor release];
  [super dealloc];
}

- (int64_t) task_id {
  return __task_id;
}

- (void) setTask_id: (int64_t) task_id {
  __task_id = task_id;
  __task_id_isset = YES;
}

- (BOOL) task_idIsSet {
  return __task_id_isset;
}

- (void) unsetTask_id {
  __task_id_isset = NO;
}

- (int) state {
  return __state;
}

- (void) setState: (int) state {
  __state = state;
  __state_isset = YES;
}

- (BOOL) stateIsSet {
  return __state_isset;
}

- (void) unsetState {
  __state_isset = NO;
}

- (NSString *) title {
  return [[__title retain] autorelease];
}

- (void) setTitle: (NSString *) title {
  [title retain];
  [__title release];
  __title = title;
  __title_isset = YES;
}

- (BOOL) titleIsSet {
  return __title_isset;
}

- (void) unsetTitle {
  [__title release];
  __title = nil;
  __title_isset = NO;
}

- (NSString *) intro {
  return [[__intro retain] autorelease];
}

- (void) setIntro: (NSString *) intro {
  [intro retain];
  [__intro release];
  __intro = intro;
  __intro_isset = YES;
}

- (BOOL) introIsSet {
  return __intro_isset;
}

- (void) unsetIntro {
  [__intro release];
  __intro = nil;
  __intro_isset = NO;
}

- (NSString *) cover {
  return [[__cover retain] autorelease];
}

- (void) setCover: (NSString *) cover {
  [cover retain];
  [__cover release];
  __cover = cover;
  __cover_isset = YES;
}

- (BOOL) coverIsSet {
  return __cover_isset;
}

- (void) unsetCover {
  [__cover release];
  __cover = nil;
  __cover_isset = NO;
}

- (UserBasic *) sponsor {
  return [[__sponsor retain] autorelease];
}

- (void) setSponsor: (UserBasic *) sponsor {
  [sponsor retain];
  [__sponsor release];
  __sponsor = sponsor;
  __sponsor_isset = YES;
}

- (BOOL) sponsorIsSet {
  return __sponsor_isset;
}

- (void) unsetSponsor {
  [__sponsor release];
  __sponsor = nil;
  __sponsor_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setTask_id: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setState: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setTitle: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setIntro: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 5:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setCover: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 7:
        if (fieldType == TType_STRUCT) {
          UserBasic *fieldValue = [[UserBasic alloc] init];
          [fieldValue read: inProtocol];
          [self setSponsor: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TaskBasic"];
  if (__task_id_isset) {
    [outProtocol writeFieldBeginWithName: @"task_id" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __task_id];
    [outProtocol writeFieldEnd];
  }
  if (__state_isset) {
    [outProtocol writeFieldBeginWithName: @"state" type: TType_I32 fieldID: 2];
    [outProtocol writeI32: __state];
    [outProtocol writeFieldEnd];
  }
  if (__title_isset) {
    if (__title != nil) {
      [outProtocol writeFieldBeginWithName: @"title" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __title];
      [outProtocol writeFieldEnd];
    }
  }
  if (__intro_isset) {
    if (__intro != nil) {
      [outProtocol writeFieldBeginWithName: @"intro" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __intro];
      [outProtocol writeFieldEnd];
    }
  }
  if (__cover_isset) {
    if (__cover != nil) {
      [outProtocol writeFieldBeginWithName: @"cover" type: TType_STRING fieldID: 5];
      [outProtocol writeString: __cover];
      [outProtocol writeFieldEnd];
    }
  }
  if (__sponsor_isset) {
    if (__sponsor != nil) {
      [outProtocol writeFieldBeginWithName: @"sponsor" type: TType_STRUCT fieldID: 7];
      [__sponsor write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TaskBasic("];
  [ms appendString: @"task_id:"];
  [ms appendFormat: @"%qi", __task_id];
  [ms appendString: @",state:"];
  [ms appendFormat: @"%i", __state];
  [ms appendString: @",title:"];
  [ms appendFormat: @"\"%@\"", __title];
  [ms appendString: @",intro:"];
  [ms appendFormat: @"\"%@\"", __intro];
  [ms appendString: @",cover:"];
  [ms appendFormat: @"\"%@\"", __cover];
  [ms appendString: @",sponsor:"];
  [ms appendFormat: @"%@", __sponsor];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TaskExt

- (id) initWithInterested_list: (NSArray *) interested_list accepted_list: (NSArray *) accepted_list invited_list: (NSArray *) invited_list applied_list: (NSArray *) applied_list
{
  self = [super init];
  __interested_list = [interested_list retain];
  __interested_list_isset = YES;
  __accepted_list = [accepted_list retain];
  __accepted_list_isset = YES;
  __invited_list = [invited_list retain];
  __invited_list_isset = YES;
  __applied_list = [applied_list retain];
  __applied_list_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"interested_list"])
  {
    __interested_list = [[decoder decodeObjectForKey: @"interested_list"] retain];
    __interested_list_isset = YES;
  }
  if ([decoder containsValueForKey: @"accepted_list"])
  {
    __accepted_list = [[decoder decodeObjectForKey: @"accepted_list"] retain];
    __accepted_list_isset = YES;
  }
  if ([decoder containsValueForKey: @"invited_list"])
  {
    __invited_list = [[decoder decodeObjectForKey: @"invited_list"] retain];
    __invited_list_isset = YES;
  }
  if ([decoder containsValueForKey: @"applied_list"])
  {
    __applied_list = [[decoder decodeObjectForKey: @"applied_list"] retain];
    __applied_list_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__interested_list_isset)
  {
    [encoder encodeObject: __interested_list forKey: @"interested_list"];
  }
  if (__accepted_list_isset)
  {
    [encoder encodeObject: __accepted_list forKey: @"accepted_list"];
  }
  if (__invited_list_isset)
  {
    [encoder encodeObject: __invited_list forKey: @"invited_list"];
  }
  if (__applied_list_isset)
  {
    [encoder encodeObject: __applied_list forKey: @"applied_list"];
  }
}

- (void) dealloc
{
  [__interested_list release];
  [__accepted_list release];
  [__invited_list release];
  [__applied_list release];
  [super dealloc];
}

- (NSArray *) interested_list {
  return [[__interested_list retain] autorelease];
}

- (void) setInterested_list: (NSArray *) interested_list {
  [interested_list retain];
  [__interested_list release];
  __interested_list = interested_list;
  __interested_list_isset = YES;
}

- (BOOL) interested_listIsSet {
  return __interested_list_isset;
}

- (void) unsetInterested_list {
  [__interested_list release];
  __interested_list = nil;
  __interested_list_isset = NO;
}

- (NSArray *) accepted_list {
  return [[__accepted_list retain] autorelease];
}

- (void) setAccepted_list: (NSArray *) accepted_list {
  [accepted_list retain];
  [__accepted_list release];
  __accepted_list = accepted_list;
  __accepted_list_isset = YES;
}

- (BOOL) accepted_listIsSet {
  return __accepted_list_isset;
}

- (void) unsetAccepted_list {
  [__accepted_list release];
  __accepted_list = nil;
  __accepted_list_isset = NO;
}

- (NSArray *) invited_list {
  return [[__invited_list retain] autorelease];
}

- (void) setInvited_list: (NSArray *) invited_list {
  [invited_list retain];
  [__invited_list release];
  __invited_list = invited_list;
  __invited_list_isset = YES;
}

- (BOOL) invited_listIsSet {
  return __invited_list_isset;
}

- (void) unsetInvited_list {
  [__invited_list release];
  __invited_list = nil;
  __invited_list_isset = NO;
}

- (NSArray *) applied_list {
  return [[__applied_list retain] autorelease];
}

- (void) setApplied_list: (NSArray *) applied_list {
  [applied_list retain];
  [__applied_list release];
  __applied_list = applied_list;
  __applied_list_isset = YES;
}

- (BOOL) applied_listIsSet {
  return __applied_list_isset;
}

- (void) unsetApplied_list {
  [__applied_list release];
  __applied_list = nil;
  __applied_list_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_LIST) {
          int _size10;
          [inProtocol readListBeginReturningElementType: NULL size: &_size10];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size10];
          int _i11;
          for (_i11 = 0; _i11 < _size10; ++_i11)
          {
            int64_t _elem12 = [inProtocol readI64];
            [fieldValue addObject: [NSNumber numberWithLongLong: _elem12]];
          }
          [inProtocol readListEnd];
          [self setInterested_list: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_LIST) {
          int _size13;
          [inProtocol readListBeginReturningElementType: NULL size: &_size13];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size13];
          int _i14;
          for (_i14 = 0; _i14 < _size13; ++_i14)
          {
            int64_t _elem15 = [inProtocol readI64];
            [fieldValue addObject: [NSNumber numberWithLongLong: _elem15]];
          }
          [inProtocol readListEnd];
          [self setAccepted_list: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_LIST) {
          int _size16;
          [inProtocol readListBeginReturningElementType: NULL size: &_size16];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size16];
          int _i17;
          for (_i17 = 0; _i17 < _size16; ++_i17)
          {
            int64_t _elem18 = [inProtocol readI64];
            [fieldValue addObject: [NSNumber numberWithLongLong: _elem18]];
          }
          [inProtocol readListEnd];
          [self setInvited_list: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_LIST) {
          int _size19;
          [inProtocol readListBeginReturningElementType: NULL size: &_size19];
          NSMutableArray * fieldValue = [[NSMutableArray alloc] initWithCapacity: _size19];
          int _i20;
          for (_i20 = 0; _i20 < _size19; ++_i20)
          {
            int64_t _elem21 = [inProtocol readI64];
            [fieldValue addObject: [NSNumber numberWithLongLong: _elem21]];
          }
          [inProtocol readListEnd];
          [self setApplied_list: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TaskExt"];
  if (__interested_list_isset) {
    if (__interested_list != nil) {
      [outProtocol writeFieldBeginWithName: @"interested_list" type: TType_LIST fieldID: 1];
      {
        [outProtocol writeListBeginWithElementType: TType_I64 size: [__interested_list count]];
        int i23;
        for (i23 = 0; i23 < [__interested_list count]; i23++)
        {
          [outProtocol writeI64: [[__interested_list objectAtIndex: i23] longLongValue]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__accepted_list_isset) {
    if (__accepted_list != nil) {
      [outProtocol writeFieldBeginWithName: @"accepted_list" type: TType_LIST fieldID: 2];
      {
        [outProtocol writeListBeginWithElementType: TType_I64 size: [__accepted_list count]];
        int i25;
        for (i25 = 0; i25 < [__accepted_list count]; i25++)
        {
          [outProtocol writeI64: [[__accepted_list objectAtIndex: i25] longLongValue]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__invited_list_isset) {
    if (__invited_list != nil) {
      [outProtocol writeFieldBeginWithName: @"invited_list" type: TType_LIST fieldID: 3];
      {
        [outProtocol writeListBeginWithElementType: TType_I64 size: [__invited_list count]];
        int i27;
        for (i27 = 0; i27 < [__invited_list count]; i27++)
        {
          [outProtocol writeI64: [[__invited_list objectAtIndex: i27] longLongValue]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  if (__applied_list_isset) {
    if (__applied_list != nil) {
      [outProtocol writeFieldBeginWithName: @"applied_list" type: TType_LIST fieldID: 4];
      {
        [outProtocol writeListBeginWithElementType: TType_I64 size: [__applied_list count]];
        int i29;
        for (i29 = 0; i29 < [__applied_list count]; i29++)
        {
          [outProtocol writeI64: [[__applied_list objectAtIndex: i29] longLongValue]];
        }
        [outProtocol writeListEnd];
      }
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TaskExt("];
  [ms appendString: @"interested_list:"];
  [ms appendFormat: @"%@", __interested_list];
  [ms appendString: @",accepted_list:"];
  [ms appendFormat: @"%@", __accepted_list];
  [ms appendString: @",invited_list:"];
  [ms appendFormat: @"%@", __invited_list];
  [ms appendString: @",applied_list:"];
  [ms appendFormat: @"%@", __applied_list];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Task

- (id) initWithBasic: (TaskBasic *) basic ext: (TaskExt *) ext
{
  self = [super init];
  __basic = [basic retain];
  __basic_isset = YES;
  __ext = [ext retain];
  __ext_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"basic"])
  {
    __basic = [[decoder decodeObjectForKey: @"basic"] retain];
    __basic_isset = YES;
  }
  if ([decoder containsValueForKey: @"ext"])
  {
    __ext = [[decoder decodeObjectForKey: @"ext"] retain];
    __ext_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__basic_isset)
  {
    [encoder encodeObject: __basic forKey: @"basic"];
  }
  if (__ext_isset)
  {
    [encoder encodeObject: __ext forKey: @"ext"];
  }
}

- (void) dealloc
{
  [__basic release];
  [__ext release];
  [super dealloc];
}

- (TaskBasic *) basic {
  return [[__basic retain] autorelease];
}

- (void) setBasic: (TaskBasic *) basic {
  [basic retain];
  [__basic release];
  __basic = basic;
  __basic_isset = YES;
}

- (BOOL) basicIsSet {
  return __basic_isset;
}

- (void) unsetBasic {
  [__basic release];
  __basic = nil;
  __basic_isset = NO;
}

- (TaskExt *) ext {
  return [[__ext retain] autorelease];
}

- (void) setExt: (TaskExt *) ext {
  [ext retain];
  [__ext release];
  __ext = ext;
  __ext_isset = YES;
}

- (BOOL) extIsSet {
  return __ext_isset;
}

- (void) unsetExt {
  [__ext release];
  __ext = nil;
  __ext_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRUCT) {
          TaskBasic *fieldValue = [[TaskBasic alloc] init];
          [fieldValue read: inProtocol];
          [self setBasic: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_STRUCT) {
          TaskExt *fieldValue = [[TaskExt alloc] init];
          [fieldValue read: inProtocol];
          [self setExt: fieldValue];
          [fieldValue release];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Task"];
  if (__basic_isset) {
    if (__basic != nil) {
      [outProtocol writeFieldBeginWithName: @"basic" type: TType_STRUCT fieldID: 1];
      [__basic write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  if (__ext_isset) {
    if (__ext != nil) {
      [outProtocol writeFieldBeginWithName: @"ext" type: TType_STRUCT fieldID: 2];
      [__ext write: outProtocol];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Task("];
  [ms appendString: @"basic:"];
  [ms appendFormat: @"%@", __basic];
  [ms appendString: @",ext:"];
  [ms appendFormat: @"%@", __ext];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation TaskListRequest

- (id) initWithType: (int) type lastid: (int64_t) lastid length: (int64_t) length
{
  self = [super init];
  __type = type;
  __type_isset = YES;
  __lastid = lastid;
  __lastid_isset = YES;
  __length = length;
  __length_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [decoder decodeIntForKey: @"type"];
    __type_isset = YES;
  }
  if ([decoder containsValueForKey: @"lastid"])
  {
    __lastid = [decoder decodeInt64ForKey: @"lastid"];
    __lastid_isset = YES;
  }
  if ([decoder containsValueForKey: @"length"])
  {
    __length = [decoder decodeInt64ForKey: @"length"];
    __length_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__type_isset)
  {
    [encoder encodeInt: __type forKey: @"type"];
  }
  if (__lastid_isset)
  {
    [encoder encodeInt64: __lastid forKey: @"lastid"];
  }
  if (__length_isset)
  {
    [encoder encodeInt64: __length forKey: @"length"];
  }
}

- (void) dealloc
{
  [super dealloc];
}

- (int) type {
  return __type;
}

- (void) setType: (int) type {
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  __type_isset = NO;
}

- (int64_t) lastid {
  return __lastid;
}

- (void) setLastid: (int64_t) lastid {
  __lastid = lastid;
  __lastid_isset = YES;
}

- (BOOL) lastidIsSet {
  return __lastid_isset;
}

- (void) unsetLastid {
  __lastid_isset = NO;
}

- (int64_t) length {
  return __length;
}

- (void) setLength: (int64_t) length {
  __length = length;
  __length_isset = YES;
}

- (BOOL) lengthIsSet {
  return __length_isset;
}

- (void) unsetLength {
  __length_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setLastid: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setLength: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"TaskListRequest"];
  if (__type_isset) {
    [outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 1];
    [outProtocol writeI32: __type];
    [outProtocol writeFieldEnd];
  }
  if (__lastid_isset) {
    [outProtocol writeFieldBeginWithName: @"lastid" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __lastid];
    [outProtocol writeFieldEnd];
  }
  if (__length_isset) {
    [outProtocol writeFieldBeginWithName: @"length" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __length];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"TaskListRequest("];
  [ms appendString: @"type:"];
  [ms appendFormat: @"%i", __type];
  [ms appendString: @",lastid:"];
  [ms appendFormat: @"%qi", __lastid];
  [ms appendString: @",length:"];
  [ms appendFormat: @"%qi", __length];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Msg

- (id) initWithSender: (int64_t) sender time: (timestamp) time text: (NSString *) text type: (int) type
{
  self = [super init];
  __sender = sender;
  __sender_isset = YES;
  __time = time;
  __time_isset = YES;
  __text = [text retain];
  __text_isset = YES;
  __type = type;
  __type_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"sender"])
  {
    __sender = [decoder decodeInt64ForKey: @"sender"];
    __sender_isset = YES;
  }
  if ([decoder containsValueForKey: @"time"])
  {
    __time = [decoder decodeInt64ForKey: @"time"];
    __time_isset = YES;
  }
  if ([decoder containsValueForKey: @"text"])
  {
    __text = [[decoder decodeObjectForKey: @"text"] retain];
    __text_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [decoder decodeIntForKey: @"type"];
    __type_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__sender_isset)
  {
    [encoder encodeInt64: __sender forKey: @"sender"];
  }
  if (__time_isset)
  {
    [encoder encodeInt64: __time forKey: @"time"];
  }
  if (__text_isset)
  {
    [encoder encodeObject: __text forKey: @"text"];
  }
  if (__type_isset)
  {
    [encoder encodeInt: __type forKey: @"type"];
  }
}

- (void) dealloc
{
  [__text release];
  [super dealloc];
}

- (int64_t) sender {
  return __sender;
}

- (void) setSender: (int64_t) sender {
  __sender = sender;
  __sender_isset = YES;
}

- (BOOL) senderIsSet {
  return __sender_isset;
}

- (void) unsetSender {
  __sender_isset = NO;
}

- (int64_t) time {
  return __time;
}

- (void) setTime: (int64_t) time {
  __time = time;
  __time_isset = YES;
}

- (BOOL) timeIsSet {
  return __time_isset;
}

- (void) unsetTime {
  __time_isset = NO;
}

- (NSString *) text {
  return [[__text retain] autorelease];
}

- (void) setText: (NSString *) text {
  [text retain];
  [__text release];
  __text = text;
  __text_isset = YES;
}

- (BOOL) textIsSet {
  return __text_isset;
}

- (void) unsetText {
  [__text release];
  __text = nil;
  __text_isset = NO;
}

- (int) type {
  return __type;
}

- (void) setType: (int) type {
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  __type_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setSender: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setText: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Msg"];
  if (__sender_isset) {
    [outProtocol writeFieldBeginWithName: @"sender" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __sender];
    [outProtocol writeFieldEnd];
  }
  if (__time_isset) {
    [outProtocol writeFieldBeginWithName: @"time" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __time];
    [outProtocol writeFieldEnd];
  }
  if (__text_isset) {
    if (__text != nil) {
      [outProtocol writeFieldBeginWithName: @"text" type: TType_STRING fieldID: 3];
      [outProtocol writeString: __text];
      [outProtocol writeFieldEnd];
    }
  }
  if (__type_isset) {
    [outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 4];
    [outProtocol writeI32: __type];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Msg("];
  [ms appendString: @"sender:"];
  [ms appendFormat: @"%qi", __sender];
  [ms appendString: @",time:"];
  [ms appendFormat: @"%qi", __time];
  [ms appendString: @",text:"];
  [ms appendFormat: @"\"%@\"", __text];
  [ms appendString: @",type:"];
  [ms appendFormat: @"%i", __type];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation FeedMsg

- (id) initWithSender: (NSString *) sender time: (timestamp) time type: (int) type content: (NSString *) content
{
  self = [super init];
  __sender = [sender retain];
  __sender_isset = YES;
  __time = time;
  __time_isset = YES;
  __type = type;
  __type_isset = YES;
  __content = [content retain];
  __content_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"sender"])
  {
    __sender = [[decoder decodeObjectForKey: @"sender"] retain];
    __sender_isset = YES;
  }
  if ([decoder containsValueForKey: @"time"])
  {
    __time = [decoder decodeInt64ForKey: @"time"];
    __time_isset = YES;
  }
  if ([decoder containsValueForKey: @"type"])
  {
    __type = [decoder decodeIntForKey: @"type"];
    __type_isset = YES;
  }
  if ([decoder containsValueForKey: @"content"])
  {
    __content = [[decoder decodeObjectForKey: @"content"] retain];
    __content_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__sender_isset)
  {
    [encoder encodeObject: __sender forKey: @"sender"];
  }
  if (__time_isset)
  {
    [encoder encodeInt64: __time forKey: @"time"];
  }
  if (__type_isset)
  {
    [encoder encodeInt: __type forKey: @"type"];
  }
  if (__content_isset)
  {
    [encoder encodeObject: __content forKey: @"content"];
  }
}

- (void) dealloc
{
  [__sender release];
  [__content release];
  [super dealloc];
}

- (NSString *) sender {
  return [[__sender retain] autorelease];
}

- (void) setSender: (NSString *) sender {
  [sender retain];
  [__sender release];
  __sender = sender;
  __sender_isset = YES;
}

- (BOOL) senderIsSet {
  return __sender_isset;
}

- (void) unsetSender {
  [__sender release];
  __sender = nil;
  __sender_isset = NO;
}

- (int64_t) time {
  return __time;
}

- (void) setTime: (int64_t) time {
  __time = time;
  __time_isset = YES;
}

- (BOOL) timeIsSet {
  return __time_isset;
}

- (void) unsetTime {
  __time_isset = NO;
}

- (int) type {
  return __type;
}

- (void) setType: (int) type {
  __type = type;
  __type_isset = YES;
}

- (BOOL) typeIsSet {
  return __type_isset;
}

- (void) unsetType {
  __type_isset = NO;
}

- (NSString *) content {
  return [[__content retain] autorelease];
}

- (void) setContent: (NSString *) content {
  [content retain];
  [__content release];
  __content = content;
  __content_isset = YES;
}

- (BOOL) contentIsSet {
  return __content_isset;
}

- (void) unsetContent {
  [__content release];
  __content = nil;
  __content_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setSender: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setTime: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I32) {
          int fieldValue = [inProtocol readI32];
          [self setType: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 4:
        if (fieldType == TType_STRING) {
          NSString * fieldValue = [inProtocol readString];
          [self setContent: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"FeedMsg"];
  if (__sender_isset) {
    if (__sender != nil) {
      [outProtocol writeFieldBeginWithName: @"sender" type: TType_STRING fieldID: 1];
      [outProtocol writeString: __sender];
      [outProtocol writeFieldEnd];
    }
  }
  if (__time_isset) {
    [outProtocol writeFieldBeginWithName: @"time" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __time];
    [outProtocol writeFieldEnd];
  }
  if (__type_isset) {
    [outProtocol writeFieldBeginWithName: @"type" type: TType_I32 fieldID: 3];
    [outProtocol writeI32: __type];
    [outProtocol writeFieldEnd];
  }
  if (__content_isset) {
    if (__content != nil) {
      [outProtocol writeFieldBeginWithName: @"content" type: TType_STRING fieldID: 4];
      [outProtocol writeString: __content];
      [outProtocol writeFieldEnd];
    }
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"FeedMsg("];
  [ms appendString: @"sender:"];
  [ms appendFormat: @"\"%@\"", __sender];
  [ms appendString: @",time:"];
  [ms appendFormat: @"%qi", __time];
  [ms appendString: @",type:"];
  [ms appendFormat: @"%i", __type];
  [ms appendString: @",content:"];
  [ms appendFormat: @"\"%@\"", __content];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end

@implementation Summary

- (id) initWithUnread_msg_num: (int64_t) unread_msg_num following_num: (int64_t) following_num followed_num: (int64_t) followed_num
{
  self = [super init];
  __unread_msg_num = unread_msg_num;
  __unread_msg_num_isset = YES;
  __following_num = following_num;
  __following_num_isset = YES;
  __followed_num = followed_num;
  __followed_num_isset = YES;
  return self;
}

- (id) initWithCoder: (NSCoder *) decoder
{
  self = [super init];
  if ([decoder containsValueForKey: @"unread_msg_num"])
  {
    __unread_msg_num = [decoder decodeInt64ForKey: @"unread_msg_num"];
    __unread_msg_num_isset = YES;
  }
  if ([decoder containsValueForKey: @"following_num"])
  {
    __following_num = [decoder decodeInt64ForKey: @"following_num"];
    __following_num_isset = YES;
  }
  if ([decoder containsValueForKey: @"followed_num"])
  {
    __followed_num = [decoder decodeInt64ForKey: @"followed_num"];
    __followed_num_isset = YES;
  }
  return self;
}

- (void) encodeWithCoder: (NSCoder *) encoder
{
  if (__unread_msg_num_isset)
  {
    [encoder encodeInt64: __unread_msg_num forKey: @"unread_msg_num"];
  }
  if (__following_num_isset)
  {
    [encoder encodeInt64: __following_num forKey: @"following_num"];
  }
  if (__followed_num_isset)
  {
    [encoder encodeInt64: __followed_num forKey: @"followed_num"];
  }
}

- (void) dealloc
{
  [super dealloc];
}

- (int64_t) unread_msg_num {
  return __unread_msg_num;
}

- (void) setUnread_msg_num: (int64_t) unread_msg_num {
  __unread_msg_num = unread_msg_num;
  __unread_msg_num_isset = YES;
}

- (BOOL) unread_msg_numIsSet {
  return __unread_msg_num_isset;
}

- (void) unsetUnread_msg_num {
  __unread_msg_num_isset = NO;
}

- (int64_t) following_num {
  return __following_num;
}

- (void) setFollowing_num: (int64_t) following_num {
  __following_num = following_num;
  __following_num_isset = YES;
}

- (BOOL) following_numIsSet {
  return __following_num_isset;
}

- (void) unsetFollowing_num {
  __following_num_isset = NO;
}

- (int64_t) followed_num {
  return __followed_num;
}

- (void) setFollowed_num: (int64_t) followed_num {
  __followed_num = followed_num;
  __followed_num_isset = YES;
}

- (BOOL) followed_numIsSet {
  return __followed_num_isset;
}

- (void) unsetFollowed_num {
  __followed_num_isset = NO;
}

- (void) read: (id <TProtocol>) inProtocol
{
  NSString * fieldName;
  int fieldType;
  int fieldID;

  [inProtocol readStructBeginReturningName: NULL];
  while (true)
  {
    [inProtocol readFieldBeginReturningName: &fieldName type: &fieldType fieldID: &fieldID];
    if (fieldType == TType_STOP) { 
      break;
    }
    switch (fieldID)
    {
      case 1:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setUnread_msg_num: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 2:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setFollowing_num: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      case 3:
        if (fieldType == TType_I64) {
          int64_t fieldValue = [inProtocol readI64];
          [self setFollowed_num: fieldValue];
        } else { 
          [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        }
        break;
      default:
        [TProtocolUtil skipType: fieldType onProtocol: inProtocol];
        break;
    }
    [inProtocol readFieldEnd];
  }
  [inProtocol readStructEnd];
}

- (void) write: (id <TProtocol>) outProtocol {
  [outProtocol writeStructBeginWithName: @"Summary"];
  if (__unread_msg_num_isset) {
    [outProtocol writeFieldBeginWithName: @"unread_msg_num" type: TType_I64 fieldID: 1];
    [outProtocol writeI64: __unread_msg_num];
    [outProtocol writeFieldEnd];
  }
  if (__following_num_isset) {
    [outProtocol writeFieldBeginWithName: @"following_num" type: TType_I64 fieldID: 2];
    [outProtocol writeI64: __following_num];
    [outProtocol writeFieldEnd];
  }
  if (__followed_num_isset) {
    [outProtocol writeFieldBeginWithName: @"followed_num" type: TType_I64 fieldID: 3];
    [outProtocol writeI64: __followed_num];
    [outProtocol writeFieldEnd];
  }
  [outProtocol writeFieldStop];
  [outProtocol writeStructEnd];
}

- (NSString *) description {
  NSMutableString * ms = [NSMutableString stringWithString: @"Summary("];
  [ms appendString: @"unread_msg_num:"];
  [ms appendFormat: @"%qi", __unread_msg_num];
  [ms appendString: @",following_num:"];
  [ms appendFormat: @"%qi", __following_num];
  [ms appendString: @",followed_num:"];
  [ms appendFormat: @"%qi", __followed_num];
  [ms appendString: @")"];
  return [NSString stringWithString: ms];
}

@end


@implementation typeConstants
+ (void) initialize {
}
@end

